{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\One Life\\\\Projects_Dac\\\\upload-image\\\\ValidationProject\\\\src\\\\components\\\\nodejs\\\\Javascript4.js\";\nimport React from 'react';\nimport { SiNodeDotJs } from 'react-icons/si';\nimport Tutorial from '../Tutorial';\nimport icon from './js.png';\nimport icon2 from './js2.png';\n\nconst Nodejs1 = () => {\n  const logo = {\n    \"Lname\": icon,\n    \"Lname2\": icon2\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Tutorial, {\n      icons: logo.Lname,\n      name: \"Javascript\",\n      language: \"javascript\",\n      next: \"/Javascript4\",\n      icon2: logo.Lname2,\n      theoryContent: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"TutorialPadding\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"JavaScript Object\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 17\n        }, this), \"An \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"object\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 20\n        }, this), \" is a complex data type that allows us to store collections of data. For example,\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `const student = {\n    firstName: 'ram',\n    lastName: null,\n    class: 10\n};  `\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"JavaScript Symbol\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }, this), \"This data type was introduced in a newer version of JavaScript (from ES2015). A value having the data type Symbol can be referred to as a symbol value. Symbol is an immutable primitive value that is unique. For example,\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: [` // two symbols with the same description`, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 65\n            }, this), \"const value1 = Symbol('hello');\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 52\n            }, this), \"const value2 = Symbol('hello');\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 17\n        }, this), \"Though \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"value1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 24\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"value2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 48\n        }, this), \" both contain \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"'hello'\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 81\n        }, this), \", they are different as they are of the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Symbol\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 141\n        }, this), \" type.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"JavaScript Object\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this), \"An \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"object\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 20\n        }, this), \" is a complex data type that allows us to store collections of data. For example,\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `const student = {\n    firstName: 'ram',\n    lastName: null,\n    class: 10\n};`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"JavaScript Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, this), \"JavaScript is a dynamically typed (loosely typed) language. JavaScript automatically determines the variables' data type for you.\", /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }, this), \"It also means that a variable can be of one data type and later it can be changed to another data type. For example,\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `// data is of undefined type\nlet data;\n\n// data is of integer type\ndata = 5;\n\n// data is of string type\ndata = \"JavaScript Programming\";`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"JavaScript typeof\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this), \"To find the type of a variable, you can use the typeof operator. For example,\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 94\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: ` const name = 'ram';\ntypeof(name); // returns \"string\"\n\nconst number = 4;\ntypeof(number); //returns \"number\"\n\nconst valueChecked = true;\ntypeof(valueChecked); //returns \"boolean\"\n\nconst a = null;\ntypeof(a); // returns \"object\"  `\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Nodejs1;\nexport default Nodejs1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Nodejs1\");","map":{"version":3,"sources":["C:/Users/One Life/Projects_Dac/upload-image/ValidationProject/src/components/nodejs/Javascript4.js"],"names":["React","SiNodeDotJs","Tutorial","icon","icon2","Nodejs1","logo","Lname","Lname2"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {SiNodeDotJs} from 'react-icons/si'\r\nimport Tutorial from '../Tutorial'\r\nimport icon from './js.png'\r\nimport icon2 from './js2.png'\r\n\r\nconst Nodejs1 = () => {\r\n    const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"Javascript\" language = \"javascript\" next=\"/Javascript4\" icon2={logo.Lname2}\r\n            theoryContent = {   \r\n            <div className=\"TutorialPadding\">\r\n                <h4>JavaScript Object</h4>\r\n                An <code>object</code> is a complex data type that allows us to store collections of data. For example,\r\n                <div className=\"card card-body\">\r\n                    <pre>\r\n                   {`const student = {\r\n    firstName: 'ram',\r\n    lastName: null,\r\n    class: 10\r\n};  `}                  \r\n                    </pre>\r\n                </div>\r\n                 <hr/>   \r\n                <h4 className=\"Thead\">JavaScript Symbol</h4>\r\n                This data type was introduced in a newer version of JavaScript (from ES2015).\r\n                A value having the data type Symbol can be referred to as a symbol value. Symbol is an immutable primitive value that is unique. For example,\r\n                <div className=\"card card-body\">\r\n                    <pre>\r\n                   {` // two symbols with the same description`}<br/>\r\n\r\n                    const value1 = Symbol('hello');<br/>\r\n                    const value2 = Symbol('hello');                 \r\n                    </pre>\r\n                </div>    \r\n                Though <code>value1</code> and <code>value2</code> both contain <code>'hello'</code>, they are different as they are of the <code>Symbol</code> type.\r\n                <br/><hr/>\r\n                <h4 className=\"Thead\">JavaScript Object</h4>    \r\n                An <code>object</code> is a complex data type that allows us to store collections of data. For example,\r\n                <div className=\"card card-body\">\r\n                    <pre>\r\n                    {`const student = {\r\n    firstName: 'ram',\r\n    lastName: null,\r\n    class: 10\r\n};`}\r\n                    </pre>\r\n                </div>\r\n                <hr/>\r\n                <h4 className=\"Thead\">JavaScript Type</h4>\r\n                JavaScript is a dynamically typed (loosely typed) language. JavaScript automatically determines the variables' data type for you.\r\n                <hr/>    \r\n                It also means that a variable can be of one data type and later it can be changed to another data type. For example,\r\n                <div className=\"card card-body\">\r\n                    <pre>\r\n                    {`// data is of undefined type\r\nlet data;\r\n\r\n// data is of integer type\r\ndata = 5;\r\n\r\n// data is of string type\r\ndata = \"JavaScript Programming\";`}                    \r\n                    </pre>\r\n                </div>\r\n                <hr/>\r\n                <h4 className=\"Thead\">JavaScript typeof</h4>\r\n                To find the type of a variable, you can use the typeof operator. For example,<br/>\r\n                <div className=\"card card-body\">\r\n                    <pre>\r\n                   {` const name = 'ram';\r\ntypeof(name); // returns \"string\"\r\n\r\nconst number = 4;\r\ntypeof(number); //returns \"number\"\r\n\r\nconst valueChecked = true;\r\ntypeof(valueChecked); //returns \"boolean\"\r\n\r\nconst a = null;\r\ntypeof(a); // returns \"object\"  `}              \r\n                    </pre>\r\n                </div>\r\n            \r\n            \r\n            \r\n            </div>       \r\n            \r\n        }/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nodejs1\r\n"]},"metadata":{},"sourceType":"module"}