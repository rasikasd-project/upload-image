{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\One Life\\\\Desktop\\\\finalProject\\\\src\\\\components\\\\cpp\\\\Cpp4.js\";\nimport React from 'react';\nimport Tutorial from '../Tutorial';\nimport { SiCplusplus } from 'react-icons/si';\nimport icon from './cpp2.png';\nimport icon2 from './cpp9.png';\n\nconst Cpp1 = () => {\n  const logo = {\n    \"Lname\": icon,\n    \"Lname2\": icon2\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Tutorial, {\n      icons: logo.Lname,\n      name: \"C++\",\n      language: \"cpp\",\n      next: \"/Cpp4\",\n      icon2: logo.Lname2,\n      theoryContent: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"TutorialPadding\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"C++ Type Conversion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 25\n        }, this), \"In this tutorial, we will learn about the basics of C++ type conversion with the help of examples.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 123\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 128\n        }, this), \"C++ allows us to convert data of one type to that of another. This is known as type conversion.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 120\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 125\n        }, this), \"There are two types of type conversion in C++.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 71\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 76\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Implicit Conversion\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Explicit Conversion (also known as Type Casting\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 85\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 90\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Implicit Type Conversion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 25\n        }, this), \"The type conversion that is done automatically done by the compiler is known as implicit type conversion. This type of conversion is also known as automatic conversion.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 193\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 198\n        }, this), \"Let us look at two examples of implicit type conversion.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 81\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 86\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Example 1: Conversion From int to double\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `// Working of implicit type-conversion\n\n#include <iostream>\nusing namespace std;\n\nint main() {\n   // assigning an int value to num_int\n   int num_int = 9;\n\n   // declaring a double type variable\n   double num_double;\n \n   // implicit conversion\n   // assigning int value to a double variable\n   num_double = num_int;\n\n   cout << \"num_int = \" << num_int << endl;\n   cout << \"num_double = \" << num_double << endl;\n\n   return 0;\n}  `\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Output\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: [\"num_int = 9\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 36\n          }, this), \"num_double = 9\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this), \"In the program, we have assigned an \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"int\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 61\n        }, this), \" data to a \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"double\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 88\n        }, this), \" variable.\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: \"num_double = num_int;\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this), \"Here, the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"int\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 35\n        }, this), \" value is automatically converted to \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"double\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 88\n        }, this), \" by the compiler before it is assigned to the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"num_double\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 153\n        }, this), \" variable. This is an example of implicit type conversion.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 30\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Example 2: Automatic Conversion from double to int\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-board\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `//Working of Implicit type-conversion\n\n#include <iostream>\nusing namespace std;\n\nint main() {\n\n   int num_int;\n   double num_double = 9.99;\n\n   // implicit conversion\n   // assigning a double value to an int variable\n   num_int = num_double;\n\n   cout << \"num_int = \" << num_int << endl;\n   cout << \"num_double = \" << num_double << endl;\n\n   return 0;\n}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Output\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: [\"num_int = 9\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 40\n            }, this), \"num_double = 9.99\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this), \"In the program, we have assigned a double data to an int variable\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 90\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 95\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: \"num_double = num_int;\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this), \"Here, the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"double\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 35\n        }, this), \" value is automatically converted to \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"int\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 91\n        }, this), \" by the compiler before it is assigned to the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"num_int\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 153\n        }, this), \" variable. This is also an example of implicit type conversion.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Cpp1;\nexport default Cpp1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cpp1\");","map":{"version":3,"sources":["C:/Users/One Life/Desktop/finalProject/src/components/cpp/Cpp4.js"],"names":["React","Tutorial","SiCplusplus","icon","icon2","Cpp1","logo","Lname","Lname2"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Tutorial from '../Tutorial'\r\nimport {SiCplusplus} from 'react-icons/si'\r\nimport icon from './cpp2.png'\r\nimport icon2 from './cpp9.png'\r\n\r\nconst Cpp1 = () => {\r\n    const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"C++\" language = \"cpp\" next=\"/Cpp4\" icon2={logo.Lname2}\r\n                theoryContent = {\r\n                    <div className=\"TutorialPadding\">\r\n                        <h4 className=\"Thead\">C++ Type Conversion</h4>\r\n                        In this tutorial, we will learn about the basics of C++ type conversion with the help of examples.<br/><br/>\r\n                        C++ allows us to convert data of one type to that of another. This is known as type conversion.<br/><br/>\r\n                        There are two types of type conversion in C++.<br/><br/>\r\n                        <ol>\r\n                            <li>Implicit Conversion</li>\r\n                            <li>Explicit Conversion (also known as Type Casting</li><br/><hr/>\r\n                        </ol>    \r\n\r\n                        <h4 className=\"Thead\">Implicit Type Conversion</h4>  \r\n                        The type conversion that is done automatically done by the compiler is known as implicit type conversion. This type of conversion is also known as automatic conversion.<br/><br/>\r\n                        Let us look at two examples of implicit type conversion.<br/><hr/>\r\n                        <h4 className=\"Thead\">Example 1: Conversion From int to double</h4>\r\n                        <div className=\"card card-body\">\r\n                            <pre>\r\n                            {`// Working of implicit type-conversion\r\n\r\n#include <iostream>\r\nusing namespace std;\r\n\r\nint main() {\r\n   // assigning an int value to num_int\r\n   int num_int = 9;\r\n\r\n   // declaring a double type variable\r\n   double num_double;\r\n \r\n   // implicit conversion\r\n   // assigning int value to a double variable\r\n   num_double = num_int;\r\n\r\n   cout << \"num_int = \" << num_int << endl;\r\n   cout << \"num_double = \" << num_double << endl;\r\n\r\n   return 0;\r\n}  `}\r\n                            </pre>    \r\n                        </div>\r\n                        <h4 className=\"Thead\">Output</h4>\r\n                        <div className=\"card card-body\">\r\n                        num_int = 9<br/>\r\n                        num_double = 9\r\n                        </div>  \r\n\r\n                        In the program, we have assigned an <code>int</code> data to a <code>double</code> variable.\r\n                        <div className=\"card card-body\">\r\n                        num_double = num_int;\r\n                        </div>\r\n                        Here, the <code>int</code> value is automatically converted to <code>double</code> by the compiler before it is assigned to the <code>num_double</code> variable. This is an example of implicit type conversion.    \r\n                        <br/><hr/>\r\n                        <h4 className=\"Thead\">Example 2: Automatic Conversion from double to int</h4>\r\n                        <div className=\"card card-board\">\r\n                            <pre>\r\n                            {`//Working of Implicit type-conversion\r\n\r\n#include <iostream>\r\nusing namespace std;\r\n\r\nint main() {\r\n\r\n   int num_int;\r\n   double num_double = 9.99;\r\n\r\n   // implicit conversion\r\n   // assigning a double value to an int variable\r\n   num_int = num_double;\r\n\r\n   cout << \"num_int = \" << num_int << endl;\r\n   cout << \"num_double = \" << num_double << endl;\r\n\r\n   return 0;\r\n}`}   \r\n                             </pre>   \r\n                        </div> \r\n                        <h4>Output</h4>\r\n                        <div className=\"card card-body\">\r\n                            <pre>\r\n                            num_int = 9<br/>\r\n                            num_double = 9.99\r\n                             </pre>   \r\n                        </div>    \r\n                        In the program, we have assigned a double data to an int variable<br/><hr/>\r\n\r\n                        <div className=\"card card-body\">\r\n                        num_double = num_int;\r\n                        </div>    \r\n                        Here, the <code>double</code> value is automatically converted to <code>int</code> by the compiler before it is assigned to the <code>num_int</code> variable. This is also an example of implicit type conversion.\r\n                    </div>\r\n                }\r\n            \r\n                />\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    export default Cpp1"]},"metadata":{},"sourceType":"module"}