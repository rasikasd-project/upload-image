{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\One Life\\\\Projects_Dac\\\\upload-image\\\\ValidationProject\\\\src\\\\components\\\\python\\\\Python2.js\";\nimport React from 'react';\nimport { SiPython } from 'react-icons/si';\nimport Tutorial from '../Tutorial';\nimport icon from './py1.png';\nimport icon2 from './py3.png';\n\nconst Python1 = () => {\n  const logo = {\n    \"Lname\": icon,\n    \"Lname2\": icon2\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Tutorial, {\n      icons: logo.Lname,\n      name: \"PYTHON\",\n      language: \"python\",\n      next: \"/Python3\",\n      icon2: logo.Lname2,\n      theoryContent: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"TutorialPadding\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Python Statement, Indentation and Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 21\n        }, this), \"In this tutorial, you will learn about Python statements, why indentation is important and use of comments in programming.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 143\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 148\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Python Statement\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 21\n        }, this), \"Instructions that a Python interpreter can execute are called statements. For example, \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"a = 1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 108\n        }, this), \" is an assignment statement. \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"if\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 155\n        }, this), \" statement, \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"for\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 182\n        }, this), \" statement, \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"while\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 210\n        }, this), \" statement, etc. are other kinds of statements which will be discussed later.\", /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Multi-line statement\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 21\n        }, this), \"In Python, the end of a statement is marked by a newline character. But we can make a statement extend over multiple lines with the line continuation character (\\\\). For example:\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: [\"a = 1 + 2 + 3 + \\\\\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 42\n            }, this), \"4 + 5 + 6 + \\\\\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 42\n            }, this), \"7 + 8 + 9\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this), \"This is an explicit line continuation. In Python, line continuation is implied inside parentheses \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"( )\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 119\n        }, this), \", brackets \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"[ ]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 146\n        }, this), \", and braces \", /*#__PURE__*/_jsxDEV(\"code\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 175\n        }, this), \". For instance, we can implement the above multi-line statement as:\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: [\"a = (1 + 2 + 3 +\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 49\n            }, this), \"4 + 5 + 6 +\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 48\n            }, this), \"7 + 8 + 9)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this), \"Here, the surrounding parentheses \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"( )\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 63\n        }, this), \" do the line continuation implicitly. Same is the case with\", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \" [ ]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 138\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 160\n        }, this), \". For example:\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `colors = ['red',\n          'blue',\n          'green']`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 29\n        }, this), \"We can also put multiple statements in a single line using semicolons, as follows:\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: \"a = 1; b = 2; c = 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Python Indentation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 29\n        }, this), \"Most of the programming languages like C, C++, and Java use braces \", /*#__PURE__*/_jsxDEV(\"code\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 96\n        }, this), \" to define a block of code. Python, however, uses indentation.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 174\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 179\n        }, this), \"A code block (body of a function, loop, etc.) starts with indentation and ends with the first unindented line. The amount of indentation is up to you, but it must be consistent throughout that block.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 228\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 233\n        }, this), \"Generally, four whitespaces are used for indentation and are preferred over tabs. Here is an example.\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: ` for i in range(1,11):\n    print(i)\n    if i == 5:\n        break`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 29\n        }, this), \"The enforcement of indentation in Python makes the code look neat and clean. This results in Python programs that look similar and consistent.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 171\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 176\n        }, this), \"Indentation can be ignored in line continuation, but it's always a good idea to indent. It makes the code more readable. For example:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 162\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `if True:\n    print('Hello')\n    a = 5`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 29\n        }, this), \"and\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: \"if True: print('Hello'); a = 5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 30\n        }, this), \"both are valid and do the same thing, but the former style is clearer. Incorrect indentation will result in \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"IndentationError\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 66\n        }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 34\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Python Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 29\n        }, this), \"Comments are very important while writing a program. They describe what is going on inside a program, so that a person looking at the source code does not have a hard time figuring it out.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 217\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 222\n        }, this), \"You might forget the key details of the program you just wrote in a month's time. So taking the time to explain these concepts in the form of comments is always fruitful.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 199\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 204\n        }, this), \"In Python, we use the hash (#) symbol to start writing a comment.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 94\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 99\n        }, this), \"It extends up to the newline character. Comments are for programmers to better understand a program. Python Interpreter ignores comments.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 166\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `#This is a comment\n#print out Hello\nprint('Hello')`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Multi-line comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 29\n        }, this), \"We can have comments that extend up to multiple lines. One way is to use the hash(#) symbol at the beginning of each line. For example:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 164\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `#This is a long comment\n#and it extends\n#to multiple lines`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 29\n        }, this), \"Another way of doing this is to use triple quotes, either \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"'''\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 87\n        }, this), \" or \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"\\\"\\\"\\\"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 107\n        }, this), \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 124\n        }, this), \"These triple quotes are generally used for multi-line strings. But they can be used as a multi-line comment as well. Unless they are not docstrings, they do not generate any extra code.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 214\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `\"\"\"This is also a\nperfect example of\nmulti-line comments\"\"\"`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Python1;\nexport default Python1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Python1\");","map":{"version":3,"sources":["C:/Users/One Life/Projects_Dac/upload-image/ValidationProject/src/components/python/Python2.js"],"names":["React","SiPython","Tutorial","icon","icon2","Python1","logo","Lname","Lname2"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {SiPython} from 'react-icons/si'\r\nimport Tutorial from '../Tutorial'\r\nimport icon from './py1.png'\r\nimport icon2 from './py3.png'\r\n\r\nconst Python1 = () => {\r\n    const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"PYTHON\" language = \"python\"  next=\"/Python3\" icon2={logo.Lname2}\r\n            theoryContent={\r\n                <div className=\"TutorialPadding\">\r\n                    <h4 className=\"Thead\">Python Statement, Indentation and Comments</h4>\r\n                    In this tutorial, you will learn about Python statements, why indentation is important and use of comments in programming.<br/><br/>\r\n                    <h4 className=\"Thead\">Python Statement</h4>\r\n                    Instructions that a Python interpreter can execute are called statements. For example, <code>a = 1</code> is an assignment statement. <code>if</code> statement, <code>for</code> statement, <code>while</code> statement, etc. are other kinds of statements which will be discussed later.\r\n                    <h4 className=\"Thead\">Multi-line statement</h4>\r\n                    In Python, the end of a statement is marked by a newline character. But we can make a statement extend over multiple lines with the line continuation character (\\). For example:\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        a = 1 + 2 + 3 + \\<br/>\r\n                            4 + 5 + 6 + \\<br/>\r\n                            7 + 8 + 9            \r\n                        </pre>\r\n                    </div>\r\n                    This is an explicit line continuation. In Python, line continuation is implied inside parentheses <code>( )</code>, brackets <code>[ ]</code>, and braces <code>{ }</code>. For instance, we can implement the above multi-line statement as:\r\n                    <div className=\"card card-body\">\r\n                                <pre>\r\n                                a = (1 + 2 + 3 +<br/>\r\n                                    4 + 5 + 6 +<br/>\r\n                                    7 + 8 + 9)\r\n                                </pre>\r\n                            </div>\r\n                            Here, the surrounding parentheses <code>( )</code> do the line continuation implicitly. Same is the case with<code> [ ]</code> and <code>{ }</code>. For example:    \r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                {`colors = ['red',\r\n          'blue',\r\n          'green']`}\r\n                                </pre>\r\n                            </div>                \r\n                            We can also put multiple statements in a single line using semicolons, as follows:\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                a = 1; b = 2; c = 3\r\n                                </pre>\r\n                            </div>\r\n                            <hr/>\r\n                            <h4 className=\"Thead\">Python Indentation</h4>\r\n                            Most of the programming languages like C, C++, and Java use braces <code>{ }</code> to define a block of code. Python, however, uses indentation.<br/><br/>\r\n                            A code block (body of a function, loop, etc.) starts with indentation and ends with the first unindented line. The amount of indentation is up to you, but it must be consistent throughout that block.<br/><br/>\r\n                            Generally, four whitespaces are used for indentation and are preferred over tabs. Here is an example.               \r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                               {` for i in range(1,11):\r\n    print(i)\r\n    if i == 5:\r\n        break`}\r\n                                </pre>\r\n                            </div>\r\n                            The enforcement of indentation in Python makes the code look neat and clean. This results in Python programs that look similar and consistent.<br/><br/>\r\n                            Indentation can be ignored in line continuation, but it's always a good idea to indent. It makes the code more readable. For example:<br/>\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                {`if True:\r\n    print('Hello')\r\n    a = 5`}\r\n                                </pre>\r\n                            </div>\r\n                             and<br/>\r\n                             <div className=\"card card-body\">\r\n                                <pre>\r\n                                if True: print('Hello'); a = 5\r\n                                </pre>\r\n                            </div>           \r\n                            both are valid and do the same thing, but the former style is clearer.\r\n                            Incorrect indentation will result in <code>IndentationError</code>.          \r\n                            <br/><hr/>\r\n                            <h4 className=\"Thead\">Python Comments</h4> \r\n                            Comments are very important while writing a program. They describe what is going on inside a program, so that a person looking at the source code does not have a hard time figuring it out.<br/><br/>\r\n                            You might forget the key details of the program you just wrote in a month's time. So taking the time to explain these concepts in the form of comments is always fruitful.<br/><br/>\r\n                            In Python, we use the hash (#) symbol to start writing a comment.<br/><br/>\r\n                            It extends up to the newline character. Comments are for programmers to better understand a program. Python Interpreter ignores comments.<br/>\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                {`#This is a comment\r\n#print out Hello\r\nprint('Hello')`}\r\n                                </pre>\r\n                            </div>        \r\n                            <hr/>\r\n                            <h4 className=\"Thead\">Multi-line comments</h4>\r\n                            We can have comments that extend up to multiple lines. One way is to use the hash(#) symbol at the beginning of each line. For example:<br/>\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                {`#This is a long comment\r\n#and it extends\r\n#to multiple lines`}\r\n                                </pre>\r\n                            </div>\r\n                            Another way of doing this is to use triple quotes, either <code>'''</code> or <code>\"\"\"</code>.<br/>\r\n                            These triple quotes are generally used for multi-line strings. But they can be used as a multi-line comment as well. Unless they are not docstrings, they do not generate any extra code.<br/>           \r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                {`\"\"\"This is also a\r\nperfect example of\r\nmulti-line comments\"\"\"`}\r\n                                </pre>\r\n                            </div>  \r\n                            <hr/>\r\n                                      \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                </div>    \r\n            }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Python1\r\n"]},"metadata":{},"sourceType":"module"}