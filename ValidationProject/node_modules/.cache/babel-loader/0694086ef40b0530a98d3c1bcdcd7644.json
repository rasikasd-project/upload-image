{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\One Life\\\\Projects_Dac\\\\upload-image\\\\ValidationProject\\\\src\\\\components\\\\Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport { QuizContext } from './QuizContext';\nimport 'bootstrap';\nexport const Quiz = () => {\n  _s();\n\n  const {\n    questions,\n    fetchQuestions\n  } = useContext(QuizContext);\n  const [correct, setCorrect] = useState(0);\n  const [index, setIndex] = useState(0);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  useEffect(() => {\n    fetchQuestions();\n  }, []);\n  const {\n    question,\n    correct_answer,\n    incorrect_answers\n  } = questions[index];\n  let answers = [...incorrect_answers];\n  const tempIndex = Math.floor(Math.random() * 4);\n\n  if (tempIndex === 3) {\n    answers.push(correct_answer);\n  } else {\n    answers.push(answers[tempIndex]);\n    answers[tempIndex] = correct_answer;\n  } // const openModal = () => {\n  //     setIsModalOpen(true);\n  // }\n\n\n  const nextQuestion = () => {\n    setIndex(prevIndex => {\n      const index = prevIndex + 1;\n\n      if (index > questions.length - 1) {\n        //openModal();\n        return 0;\n      } else {\n        return index;\n      }\n    });\n  };\n\n  const checkAnswer = value => {\n    if (value) setCorrect(prevValue => prevValue + 1);\n    nextQuestion();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex justify-content-center align-items-center\",\n    style: {\n      height: \"90vh\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"my-4\",\n        dangerouslySetInnerHTML: {\n          __html: question\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-column align-items-center\",\n        children: answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-outline-info\",\n          style: {\n            width: \"15em\",\n            margin: \"0.5em 0.5em\"\n          },\n          onClick: () => {\n            checkAnswer(answer === correct_answer);\n          },\n          children: answer\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Quiz, \"nDSEl7IIZRUbMSg3xm3mrSCgFMQ=\");\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/Users/One Life/Projects_Dac/upload-image/ValidationProject/src/components/Quiz.js"],"names":["React","useContext","useState","useEffect","QuizContext","Quiz","questions","fetchQuestions","correct","setCorrect","index","setIndex","isModalOpen","setIsModalOpen","question","correct_answer","incorrect_answers","answers","tempIndex","Math","floor","random","push","nextQuestion","prevIndex","length","checkAnswer","value","prevValue","height","__html","map","answer","width","margin"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAcC,UAAd,EAA0BC,QAA1B,EAAmCC,SAAnC,QAAmD,OAAnD;AACA,SAAQC,WAAR,QAA0B,eAA1B;AACA,OAAO,WAAP;AAEA,OAAO,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACtB,QAAM;AAACC,IAAAA,SAAD;AAAWC,IAAAA;AAAX,MAA6BN,UAAU,CAACG,WAAD,CAA7C;AACA,QAAM,CAACI,OAAD,EAASC,UAAT,IAAuBP,QAAQ,CAAC,CAAD,CAArC;AACA,QAAM,CAACQ,KAAD,EAAOC,QAAP,IAAmBT,QAAQ,CAAC,CAAD,CAAjC;AACA,QAAM,CAACU,WAAD,EAAaC,cAAb,IAA+BX,QAAQ,CAAC,KAAD,CAA7C;AAEAC,EAAAA,SAAS,CAAC,MAAK;AACXI,IAAAA,cAAc;AACjB,GAFQ,EAEP,EAFO,CAAT;AAIA,QAAM;AAAEO,IAAAA,QAAF;AAAYC,IAAAA,cAAZ;AAA4BC,IAAAA;AAA5B,MAAkDV,SAAS,CAACI,KAAD,CAAjE;AAEA,MAAIO,OAAO,GAAG,CAAC,GAAGD,iBAAJ,CAAd;AACA,QAAME,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAlB;;AACA,MAAIH,SAAS,KAAK,CAAlB,EAAqB;AACnBD,IAAAA,OAAO,CAACK,IAAR,CAAaP,cAAb;AACD,GAFD,MAEO;AACLE,IAAAA,OAAO,CAACK,IAAR,CAAaL,OAAO,CAACC,SAAD,CAApB;AACAD,IAAAA,OAAO,CAACC,SAAD,CAAP,GAAqBH,cAArB;AACD,GAnBqB,CAoBtB;AACA;AACA;;;AACA,QAAMQ,YAAY,GAAG,MAAM;AACvBZ,IAAAA,QAAQ,CAAEa,SAAS,IAAI;AACnB,YAAMd,KAAK,GAAGc,SAAS,GAAG,CAA1B;;AACA,UAAGd,KAAK,GAAGJ,SAAS,CAACmB,MAAV,GAAmB,CAA9B,EAAgC;AAC5B;AACA,eAAO,CAAP;AACH,OAHD,MAGK;AACD,eAAOf,KAAP;AACH;AACJ,KARO,CAAR;AASH,GAVD;;AAWA,QAAMgB,WAAW,GAAIC,KAAD,IAAW;AAC3B,QAAGA,KAAH,EACIlB,UAAU,CAAEmB,SAAS,IAAIA,SAAS,GAAG,CAA3B,CAAV;AACJL,IAAAA,YAAY;AACf,GAJD;;AAMA,sBACI;AAAK,IAAA,SAAS,EAAG,kDAAjB;AAAoE,IAAA,KAAK,EAAI;AAACM,MAAAA,MAAM,EAAG;AAAV,KAA7E;AAAA,2BACA;AAAA,8BACK;AAAI,QAAA,SAAS,EAAG,MAAhB;AAAuB,QAAA,uBAAuB,EAAI;AAACC,UAAAA,MAAM,EAAGhB;AAAV;AAAlD;AAAA;AAAA;AAAA;AAAA,cADL,eAEK;AAAK,QAAA,SAAS,EAAG,uCAAjB;AAAA,kBACIG,OAAO,CAACc,GAAR,CAAY,CAACC,MAAD,EAAQtB,KAAR,kBACT;AAAQ,UAAA,SAAS,EAAG,sBAApB;AACA,UAAA,KAAK,EAAE;AAACuB,YAAAA,KAAK,EAAG,MAAT;AAAgBC,YAAAA,MAAM,EAAG;AAAzB,WADP;AAGA,UAAA,OAAO,EAAI,MAAM;AAACR,YAAAA,WAAW,CAACM,MAAM,KAAKjB,cAAZ,CAAX;AAAuC,WAHzD;AAAA,oBAICiB;AAJD,WAEOtB,KAFP;AAAA;AAAA;AAAA;AAAA,gBADH;AADJ;AAAA;AAAA;AAAA;AAAA,cAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CAxDM;;GAAML,I;;KAAAA,I","sourcesContent":["import React,{useContext, useState,useEffect} from 'react'\r\nimport {QuizContext} from './QuizContext'\r\nimport 'bootstrap'\r\n\r\nexport const Quiz = () => {\r\n    const {questions,fetchQuestions} = useContext(QuizContext);\r\n    const [correct,setCorrect] = useState(0);\r\n    const [index,setIndex] = useState(0);\r\n    const [isModalOpen,setIsModalOpen] = useState(false);\r\n\r\n    useEffect(() =>{\r\n        fetchQuestions();\r\n    },[]);\r\n\r\n    const { question, correct_answer, incorrect_answers } = questions[index];\r\n\r\n    let answers = [...incorrect_answers];\r\n    const tempIndex = Math.floor(Math.random() * 4)\r\n    if (tempIndex === 3) {\r\n      answers.push(correct_answer)\r\n    } else {\r\n      answers.push(answers[tempIndex])\r\n      answers[tempIndex] = correct_answer\r\n    }\r\n    // const openModal = () => {\r\n    //     setIsModalOpen(true);\r\n    // }\r\n    const nextQuestion = () => {\r\n        setIndex( prevIndex => {\r\n            const index = prevIndex + 1;\r\n            if(index > questions.length - 1){\r\n                //openModal();\r\n                return 0;\r\n            }else{\r\n                return index;\r\n            }\r\n        });\r\n    }\r\n    const checkAnswer = (value) => {\r\n        if(value)\r\n            setCorrect( prevValue => prevValue + 1)\r\n        nextQuestion();\r\n    }\r\n    \r\n    return (\r\n        <div className = \"d-flex justify-content-center align-items-center\" style = {{height : \"90vh\"}}>\r\n        <div>\r\n             <h3 className = \"my-4\" dangerouslySetInnerHTML = {{__html : question}}/>\r\n             <div className = \"d-flex flex-column align-items-center\">\r\n                {answers.map((answer,index) => (\r\n                    <button className = \"btn btn-outline-info\"\r\n                    style={{width : \"15em\",margin : \"0.5em 0.5em\"}}\r\n                    key = {index}\r\n                    onClick = {() => {checkAnswer(answer === correct_answer)}}>\r\n                    {answer}</button>\r\n                ))}\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}