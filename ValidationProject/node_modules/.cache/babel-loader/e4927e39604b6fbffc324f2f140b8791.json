{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\One Life\\\\Projects_Dac\\\\upload-image\\\\ValidationProject\\\\src\\\\components\\\\nodejs\\\\Javascript3.js\";\nimport React from 'react';\nimport { SiNodeDotJs } from 'react-icons/si';\nimport Tutorial from '../Tutorial';\nimport icon from './js.png';\nimport icon2 from './js2.png';\n\nconst Nodejs1 = () => {\n  const logo = {\n    \"Lname\": icon,\n    \"Lname2\": icon2\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Tutorial, {\n      icons: logo.Lname,\n      name: \"Javascript\",\n      language: \"javascript\",\n      next: \"/Javascript4\",\n      icon2: logo.Lname2,\n      theoryContent: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"TutorialPadding\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"JavaScript Data Types\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 17\n        }, this), \"In this tutorial, you will learn about the various data types available in JavaScript with the help of examples.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 22\n        }, this), \"As suggested by the name, data types refers to types of data that you can use in your program. For example,\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: \"const x = 5; const y = \\\"Hello\\\";\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 17\n        }, this), \"Here,\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 25\n            }, this), \" is an integer data.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"\\\"Hello\\\"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 25\n            }, this), \" is a string data.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"JavaScript Data Types\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 17\n        }, this), \"There are eight basic data types in JavaScript. They are:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 74\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              class: \"table table-striped\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    scope: \"col\",\n                    children: \"Data Type\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 39,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    scope: \"col\",\n                    children: \"Description\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 40,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    scope: \"col\",\n                    children: \"Example\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 41,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 38,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"String\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 46,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 46,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"represents textual data\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 47,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 47,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"'hello', \\\"hello world!\\\" etc\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 48,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 48,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 45,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"Number\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 51,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 51,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"an integer or a floating-point number\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 52,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 52,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"3, 3.234, 3e-2 etc.\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 53,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 53,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 50,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"BigInt\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 56,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 56,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"an integer with arbitrary precision\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 57,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 57,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"900719925124740999n , 1n etc.\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 58,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 58,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 55,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"Boolean\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 61,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 61,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"Any of two values: true or false\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 62,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 62,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"true and false\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 63,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 63,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"undefined\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 66,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 66,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"a data type whose variable is not initialized\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 67,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 67,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"let a;\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 68,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 68,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 65,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"null\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 71,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 71,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"denotes a null value\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 72,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 72,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"let a = null;\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 73,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 73,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"Symbol\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 76,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 76,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"data type whose instances are unique and immutable\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 77,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 77,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"let value = Symbol('hello');\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 78,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 78,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 75,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 35\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"JavaScript String\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"String\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 29\n        }, this), \" is used to store text. In JavaScript, strings are surrounded by quotes:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Single quotes:\", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \" 'Hello'\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 50\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Double quotes: \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"\\\"Hello\\\"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 51\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Backticks: \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"`Hello`\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 47\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 29\n        }, this), \"For example,\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: [`//strings example`, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 54\n            }, this), \"const name = 'ram';\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 52\n            }, this), \"const name1 = \\\"hari\\\";\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 29\n        }, this), \"Single quotes and double quotes are practically the same and you can use either of them.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 117\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 122\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"JavaScript Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 29\n        }, this), \" represents integer and floating numbers (decimals and exponentials). For example\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: [\"const number1 = 3;\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 55\n            }, this), \"const number2 = 3.433;\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 59\n            }, this), \"const number3 = 3e5 \", `// 3 * 10^5`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 29\n        }, this), \"A number type can also be +Infinity, -Infinity, and NaN (not a number). For example,\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: [\"const number1 = 3/0;\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 57\n            }, this), \"console.log(number1); \", `// returns Infinity`, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 82\n            }, this), \"const number2 = -3/0;\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 58\n            }, this), \"console.log(number2); \", `// returns Infinity`, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 82\n            }, this), `// strings can't be divided by numbers`, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 79\n            }, this), \"const number3 = \\\"abc\\\"/3; \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 62\n            }, this), \"console.log(number3);  // returns NaN\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"JavaScript Boolean\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 29\n        }, this), \"This data type represents logical entities. \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"Boolean\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 73\n        }, this), \" represents one of two values: \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"true\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 124\n        }, this), \" or \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"false\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 145\n        }, this), \". It is easier to think of it as a yes/no switch. For example,\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 225\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: [\"const dataChecked = true;\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 58\n            }, this), \"const valueCounted = false;\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"JavaScript undefined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 29\n        }, this), \"The \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"undefined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 33\n        }, this), \" data type represents value that is not assigned. If a variable is declared but the value is not assigned, then the value of that variable will be undefined. For example,\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 225\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: [\"let name; console.log(name); \", `// returns undefined`, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 76\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 29\n        }, this), \"It is also possible to explicitly assign a variable value \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"undefined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 87\n        }, this), \". For example,\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: [\"let name = undefined;\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 54\n            }, this), \"console.log(name); \", `// returns undefined`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Nodejs1;\nexport default Nodejs1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Nodejs1\");","map":{"version":3,"sources":["C:/Users/One Life/Projects_Dac/upload-image/ValidationProject/src/components/nodejs/Javascript3.js"],"names":["React","SiNodeDotJs","Tutorial","icon","icon2","Nodejs1","logo","Lname","Lname2"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {SiNodeDotJs} from 'react-icons/si'\r\nimport Tutorial from '../Tutorial'\r\nimport icon from './js.png'\r\nimport icon2 from './js2.png'\r\nconst Nodejs1 = () => {\r\n  const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"Javascript\" language = \"javascript\" next=\"/Javascript4\" icon2={logo.Lname2}\r\n            theoryContent = {   \r\n            <div className=\"TutorialPadding\">\r\n                <h4 className=\"Thead\">JavaScript Data Types</h4>\r\n                In this tutorial, you will learn about the various data types available in JavaScript with the help of examples.\r\n                <br/><br/>\r\n                As suggested by the name, data types refers to types of data that you can use in your program. For example,\r\n                <div className=\"card card-body\">\r\n                    <pre>\r\n                    const x = 5;\r\n                    const y = \"Hello\";                    \r\n                    </pre>\r\n                </div> \r\n                Here,<br/>\r\n                <ol>\r\n                    <li><code>5</code> is an integer data.</li>\r\n                    <li><code>\"Hello\"</code> is a string data.</li>\r\n                 </ol>   \r\n                <hr/>\r\n\r\n                <h4 className=\"Thead\">JavaScript Data Types</h4>\r\n                There are eight basic data types in JavaScript. They are:<br/>\r\n                <div class=\"card card-body\">\r\n                            <pre>\r\n                            <table class=\"table table-striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                      <th scope=\"col\">Data Type</th>\r\n                                      <th scope=\"col\">Description</th>\r\n                                      <th scope=\"col\">Example</th>\r\n                                    </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                    <tr>\r\n                                      <td><code>String</code></td>\r\n                                      <td><code>represents textual data</code></td>\r\n                                      <td><code>'hello', \"hello world!\" etc</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>Number</code></td>\r\n                                      <td><code>an integer or a floating-point number</code></td>\r\n                                      <td><code>3, 3.234, 3e-2 etc.</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>BigInt</code></td>\r\n                                      <td><code>an integer with arbitrary precision</code></td>\r\n                                      <td><code>900719925124740999n , 1n etc.</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>Boolean</code></td>\r\n                                      <td><code>Any of two values: true or false</code></td>\r\n                                      <td><code>true and false</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>undefined</code></td>\r\n                                      <td><code>a data type whose variable is not initialized</code></td>\r\n                                      <td><code>let a;</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>null</code></td>\r\n                                      <td><code>denotes a null value</code></td>\r\n                                      <td><code>let a = null;</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>Symbol</code></td>\r\n                                      <td><code>data type whose instances are unique and immutable</code></td>\r\n                                      <td><code>let value = Symbol('hello');</code></td>\r\n                                    </tr> \r\n                                  </tbody>\r\n                                </table>\r\n                            </pre>\r\n                           </div>\r\n                            <hr/>\r\n                            <h4 className=\"Thead\">JavaScript String</h4>\r\n                            <code>String</code> is used to store text. In JavaScript, strings are surrounded by quotes:\r\n                            <ul>\r\n                               <li>Single quotes:<code> 'Hello'</code></li>\r\n                               <li>Double quotes: <code>\"Hello\"</code></li>\r\n                               <li>Backticks: <code>`Hello`</code></li>     \r\n                            </ul>\r\n                            For example,\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                {`//strings example`}<br/>\r\n                                const name = 'ram';<br/>\r\n                                const name1 = \"hari\";\r\n                                </pre>\r\n                            </div>\r\n                            Single quotes and double quotes are practically the same and you can use either of them.<br/><hr/>\r\n                            <h4 className=\"Thead\">JavaScript Number</h4>\r\n                            <code>Number</code> represents integer and floating numbers (decimals and exponentials). For example   \r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                    const number1 = 3;<br/>\r\n                                    const number2 = 3.433;<br/>\r\n                                    const number3 = 3e5 {`// 3 * 10^5`}\r\n                                </pre>\r\n                            </div>\r\n                            A number type can also be +Infinity, -Infinity, and NaN (not a number). For example,\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                    const number1 = 3/0;<br/>\r\n                                    console.log(number1); {`// returns Infinity`}<br/>\r\n\r\n                                    const number2 = -3/0;<br/>\r\n                                    console.log(number2); {`// returns Infinity`}<br/>\r\n\r\n                                    {`// strings can't be divided by numbers`}<br/>\r\n                                    const number3 = \"abc\"/3; <br/>\r\n                                    console.log(number3);  // returns NaN\r\n                                </pre>\r\n                            </div>\r\n                            <hr/>\r\n                            <h4 className=\"Thead\">JavaScript Boolean</h4>\r\n                            This data type represents logical entities. <code>Boolean</code> represents one of two values: <code>true</code> or <code>false</code>. It is easier to think of it as a yes/no switch. For example,<br/>\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                const dataChecked = true;<br/>\r\n                                const valueCounted = false;  \r\n                                </pre>\r\n                            </div>\r\n                            <hr/>\r\n                            <h4 className=\"Thead\">JavaScript undefined</h4>\r\n                            The <code>undefined</code> data type represents value that is not assigned. If a variable is declared but the value is not assigned, then the value of that variable will be undefined. For example,<br/>\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                let name;\r\n                                console.log(name); {`// returns undefined`}<br/>\r\n                                </pre>\r\n                            </div>\r\n                            It is also possible to explicitly assign a variable value <code>undefined</code>. For example,\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                let name = undefined;<br/>\r\n                                console.log(name); {`// returns undefined`}\r\n                                </pre>\r\n                            </div>\r\n\r\n            </div>       \r\n            \r\n        }/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nodejs1\r\n"]},"metadata":{},"sourceType":"module"}