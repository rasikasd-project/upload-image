{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\One Life\\\\Desktop\\\\finalProject\\\\src\\\\components\\\\python\\\\Python3.js\";\nimport React from 'react';\nimport { SiPython } from 'react-icons/si';\nimport Tutorial from '../Tutorial';\nimport icon from './py1.png';\nimport icon2 from './py3.png';\n\nconst Python1 = () => {\n  const logo = {\n    \"Lname\": icon,\n    \"Lname2\": icon2\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Tutorial, {\n      icons: logo.Lname,\n      name: \"PYTHON\",\n      language: \"python\",\n      next: \"/Python4\",\n      icon2: logo.Lname2,\n      theoryContent: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"TutorialPadding\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Python Data Types\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 21\n        }, this), \"In this tutorial, you will learn about different data types you can use in Python.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 103\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 108\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Data Types in Python\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 21\n        }, this), \"Every value in Python has a datatype. Since everything is an object in Python programming, data types are actually classes and variables are instance (object) of these classes.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 197\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 202\n        }, this), \"There are various data types in Python. Some of the important types are listed below.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 106\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Python Numbers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this), \"Integers, floating point numbers and complex numbers fall under Python numbers category. They are defined as \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"int\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 130\n        }, this), \",\", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"float\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 147\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"complex\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 170\n        }, this), \" classes in Python.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 209\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 214\n        }, this), \"We can use the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"type()\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 36\n        }, this), \" function to know which class a variable or a value belongs to. Similarly, the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"isinstance()\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 134\n        }, this), \" function is used to check if an object belongs to a particular class.\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `a = 5\nprint(a, \"is of type\", type(a))\n\na = 2.0\nprint(a, \"is of type\", type(a))\n\na = 1+2j\nprint(a, \"is complex number?\", isinstance(1+2j,complex))`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Output\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `5 is of type <class 'int'>\n2.0 is of type <class 'float'>\n(1+2j) is complex number? True`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), \"Integers can be of any length, it is only limited by the memory available.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 95\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 100\n        }, this), \"A floating-point number is accurate up to 15 decimal places. Integer and floating points are separated by decimal points. \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 143\n        }, this), \" is an integer, \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"1.0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 173\n        }, this), \" is a floating-point number. Complex numbers are written in the form, x + yj, where x is the real part and y is the imaginary part. Here are some examples.\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `>>> a = 1234567890123456789\n>>> a\n1234567890123456789\n>>> b = 0.1234567890123456789\n>>> b\n0.12345678901234568\n>>> c = 1+2j\n>>> c\n(1+2j)`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), \"Notice that the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"float\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 37\n        }, this), \" variable b got truncated.\", /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Python List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), \"List is an ordered sequence of items. It is one of the most used datatype in Python and is very flexible. All the items in a list do not need to be of the same type.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 186\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 191\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 196\n        }, this), \"Declaring a list is pretty straight forward. Items separated by commas are enclosed within brackets \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"[ ]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 121\n        }, this), \".\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: \"a = [1, 2.2, 'python']\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), \"We can use the slicing operator \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"[ ]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 53\n        }, this), \" to extract an item or a range of items from a list. The index starts from 0 in Python.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 156\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 161\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `a = [5,10,15,20,25,30,35,40]\n\n# a[2] = 15\nprint(\"a[2] = \", a[2])\n\n# a[0:3] = [5, 10, 15]\nprint(\"a[0:3] = \", a[0:3])\n\n# a[5:] = [30, 35, 40]\nprint(\"a[5:] = \", a[5:])`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Output\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: [\"a[2] =  15\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 35\n            }, this), \"a[0:3] =  [5, 10, 15]\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 46\n            }, this), \"a[5:] =  [30, 35, 40]\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), \"Lists are mutable, meaning, the value of elements of a list can be altered.\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: [\"a = [1, 2, 3]\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 38\n            }, this), \"a[2] = 4\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 33\n            }, this), \"print(a)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Output\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: \"[1, 2, 4]\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Python Tuple\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), \"Tuple is an ordered sequence of items same as a list. The only difference is that tuples are immutable. Tuples once created cannot be modified.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 164\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 169\n        }, this), \"Tuples are used to write-protect data and are usually faster than lists as they cannot change dynamically.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 127\n        }, this), \"It is defined within parentheses \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"()\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 54\n        }, this), \" where items are separated by commas.\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: \"t = (5,'program', 1+3j)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), \"We can use the slicing operator \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"[]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 53\n        }, this), \" to extract items but we cannot change its value.\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `t = (5,'program', 1+3j)\n\n# t[1] = 'program'\nprint(\"t[1] = \", t[1])\n\n# t[0:3] = (5, 'program', (1+3j))\nprint(\"t[0:3] = \", t[0:3])\n\n# Generates error\n# Tuples are immutable\nt[0] = 10`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Output\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `t[1] =  program\nt[0:3] =  (5, 'program', (1+3j))\nTraceback (most recent call last):\nFile \"test.py\", line 11, in <module>\nt[0] = 10\nTypeError: 'tuple' object does not support item assignment `\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Python Strings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), \"String is sequence of Unicode characters. We can use single quotes or double quotes to represent strings. Multi-line strings can be denoted using triple quotes, \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"'''\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 182\n        }, this), \" or \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"\\\"\\\"\\\"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 202\n        }, this), \".\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `s = \"This is a string\"\nprint(s)\ns = '''A multiline\nstring'''\nprint(s)`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Output\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: [\"This is a string\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 41\n            }, this), \"A multiline\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 36\n            }, this), \"string\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 22\n        }, this), \"Just like a list and tuple, the slicing operator \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"[ ]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 70\n        }, this), \" can be used with strings. Strings, however, are immutable.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 145\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 150\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `s = 'Hello world!'\n\n# s[4] = 'o'\nprint(\"s[4] = \", s[4])\n\n# s[6:11] = 'world'\nprint(\"s[6:11] = \", s[6:11])\n\n# Generates error\n# Strings are immutable in Python\ns[5] ='d'`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Output\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `s[4] =  o\ns[6:11] =  world\nTraceback (most recent call last):\n  File \"<string>\", line 11, in <module>\nTypeError: 'str' object does not support item assignment`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Python Set\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this), \"Set is an unordered collection of unique items. Set is defined by values separated by comma inside braces \", /*#__PURE__*/_jsxDEV(\"code\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 127\n        }, this), \". Items in a set are not ordered.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 176\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `a = {5,2,3,1,4}\n\n# printing set variable\nprint(\"a = \", a)\n\n# data type of variable a\nprint(type(a))`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Output\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: ` a =  {1, 2, 3, 4, 5}\n<class 'set'>`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this), \"We can perform set operations like union, intersection on two sets. Sets have unique values. They eliminate duplicates.\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `a = {1,2,2,3,3,3}\nprint(a) `\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Output\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `{1, 2, 3}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 21\n        }, this), \"Since, set are unordered collection, indexing has no meaning. Hence, the slicing operator \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"[]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 111\n        }, this), \" does not work.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 141\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 147\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: ` >>> a = {1,2,3}\n>>> a[1]\nTraceback (most recent call last):\n  File \"<string>\", line 301, in runcode\n  File \"<interactive input>\", line 1, in <module>\nTypeError: 'set' object does not support indexing `\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Python Dictionary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 21\n        }, this), \"Dictionary is an unordered collection of key-value pairs.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 78\n        }, this), \"It is generally used when we have a huge amount of data. Dictionaries are optimized for retrieving data. We must know the key to retrieve the value.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 169\n        }, this), \"In Python, dictionaries are defined within braces \", /*#__PURE__*/_jsxDEV(\"code\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 71\n        }, this), \" with each item being a pair in the form \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"key:value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 127\n        }, this), \". Key and value can be of any type.\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `>>> d = {1:'value','key':2}\n>>> type(d)\n<class 'dict'>`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }, this), \"We use key to retrieve the respective value. But not the other way around.\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `d = {1:'value','key':2}\nprint(type(d))\n\nprint(\"d[1] = \", d[1]);\n\nprint(\"d['key'] = \", d['key']);\n\n# Generates error\nprint(\"d[2] = \", d[2]);`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Output\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `<class 'dict'>\nd[1] =  value\nd['key'] =  2\nTraceback (most recent call last):\n  File \"<string>\", line 9, in <module>\nKeyError: 2`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Conversion between data types\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 21\n        }, this), \"We can convert between different data types by using different type conversion functions like \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"int()\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 115\n        }, this), \", \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"float()\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 135\n        }, this), \", \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"str()\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 157\n        }, this), \", etc.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 181\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: [`>>>`, \"float(5)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 40\n            }, this), \"5.0\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 21\n        }, this), \"Conversion from float to int will truncate the value (make it closer to zero).\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `>>> int(10.6)\n10\n>>> int(-10.6)\n-10`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 21\n        }, this), \"Conversion to and from string must contain compatible values.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `>>> float('2.5')\n2.5\n>>> str(25)\n'25'\n>>> int('1p')\nTraceback (most recent call last):\n  File \"<string>\", line 301, in runcode\n  File \"<interactive input>\", line 1, in <module>\nValueError: invalid literal for int() with base 10: '1p' `\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 21\n        }, this), \"We can even convert one sequence to another.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 65\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `>>> set([1,2,3])\n{1, 2, 3}\n>>> tuple({5,6,7})\n(5, 6, 7)\n>>> list('hello')\n['h', 'e', 'l', 'l', 'o'] `\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 21\n        }, this), \"To convert to dictionary, each element must be a pair:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 75\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `>>> dict([[1,2],[3,4]])\n{1: 2, 3: 4}\n>>> dict([(3,26),(4,44)])\n{3: 26, 4: 44}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Python1;\nexport default Python1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Python1\");","map":{"version":3,"sources":["C:/Users/One Life/Desktop/finalProject/src/components/python/Python3.js"],"names":["React","SiPython","Tutorial","icon","icon2","Python1","logo","Lname","Lname2"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,WAAlB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAClB,QAAMC,IAAI,GAAC;AAAC,aAAQH,IAAT;AACD,cAASC;AADR,GAAX;AAGA,sBACI;AAAA,2BACI,QAAC,QAAD;AAAU,MAAA,KAAK,EAAIE,IAAI,CAACC,KAAxB;AAA+B,MAAA,IAAI,EAAG,QAAtC;AAA+C,MAAA,QAAQ,EAAG,QAA1D;AAAoE,MAAA,IAAI,EAAC,UAAzE;AAAoF,MAAA,KAAK,EAAED,IAAI,CAACE,MAAhG;AACA,MAAA,aAAa,eACT;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCACI;AAAI,UAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,qGAEsF;AAAA;AAAA;AAAA;AAAA,gBAFtF,eAE2F;AAAA;AAAA;AAAA;AAAA,gBAF3F,eAGI;AAAI,UAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,mMAIoL;AAAA;AAAA;AAAA;AAAA,gBAJpL,eAIyL;AAAA;AAAA;AAAA;AAAA,gBAJzL,wGAKyF;AAAA;AAAA;AAAA;AAAA,gBALzF,eAMI;AAAA;AAAA;AAAA;AAAA,gBANJ,eAOI;AAAI,UAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPJ,gIAQiH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARjH,oBAQkI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARlI,wBAQyJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARzJ,sCAQgM;AAAA;AAAA;AAAA;AAAA,gBARhM,eAQqM;AAAA;AAAA;AAAA;AAAA,gBARrM,kCASmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATnB,kGASqH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATrH,yFAUI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,sBACE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AARwB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAVJ,eAuBI;AAAI,UAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAvBJ,eAwBI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,sBACE;AAC1B;AACA;AAHwB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAxBJ,6FA+B8E;AAAA;AAAA;AAAA;AAAA,gBA/B9E,eA+BmF;AAAA;AAAA;AAAA;AAAA,gBA/BnF,6IAgC8H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhC9H,mCAgC4J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhC5J,8KAkCI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,sBACE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATwB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAlCJ,mCA+CoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA/CpB,6CAgDI;AAAA;AAAA;AAAA;AAAA,gBAhDJ,eAiDI;AAAI,UAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjDJ,wLAkDyK;AAAA;AAAA;AAAA;AAAA,gBAlDzK,eAkD8K;AAAA;AAAA;AAAA;AAAA,gBAlD9K,eAkDmL;AAAA;AAAA;AAAA;AAAA,gBAlDnL,uHAmDwG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAnDxG,oBAoDI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBApDJ,mDAyDoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAzDpC,0GAyD2I;AAAA;AAAA;AAAA;AAAA,gBAzD3I,eAyDgJ;AAAA;AAAA;AAAA;AAAA,gBAzDhJ,eA0DI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,sBACE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVwB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBA1DJ,eAyEI;AAAI,UAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAzEJ,eA0EI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,kDACU;AAAA;AAAA;AAAA;AAAA,oBADV,wCAEqB;AAAA;AAAA;AAAA;AAAA,oBAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBA1EJ,8FAkFI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,qDACa;AAAA;AAAA;AAAA;AAAA,oBADb,2BAEQ;AAAA;AAAA;AAAA;AAAA,oBAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAlFJ,eAyFI;AAAI,UAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAzFJ,eA0FI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBA1FJ,eA+FI;AAAA;AAAA;AAAA;AAAA,gBA/FJ,eAgGI;AAAI,UAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhGJ,kKAiGmJ;AAAA;AAAA;AAAA;AAAA,gBAjGnJ,eAiGwJ;AAAA;AAAA;AAAA;AAAA,gBAjGxJ,6HAkG8G;AAAA;AAAA;AAAA;AAAA,gBAlG9G,oDAmGqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAnGrC,wDAoGI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBApGJ,mDA0GoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA1GpC,oEA2GI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,sBACE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXwB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBA3GJ,eA0HK;AAAI,UAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA1HL,eA2HK;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACG;AAAA,sBACE;AAC1B;AACA;AACA;AACA;AACA;AANwB;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,gBA3HL,eAqII;AAAA;AAAA;AAAA;AAAA,gBArIJ,eAsII;AAAI,UAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAtIJ,oLAuIqK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAvIrK,uBAuIyL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAvIzL,oBAwII;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,sBACE;AAC1B;AACA;AACA;AACA;AALwB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAxIJ,eAiJK;AAAI,UAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjJL,eAkJK;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACG;AAAA,wDACgB;AAAA;AAAA;AAAA;AAAA,oBADhB,8BAEW;AAAA;AAAA;AAAA;AAAA,oBAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,gBAlJL,oEAyJqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAzJrD,8EAyJgI;AAAA;AAAA;AAAA;AAAA,gBAzJhI,eAyJqI;AAAA;AAAA;AAAA;AAAA,gBAzJrI,eA0JI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,sBACE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXwB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBA1JJ,eAyKI;AAAI,UAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAzKJ,eA0KI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,sBACE;AAC1B;AACA;AACA;AACA;AALwB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBA1KJ,eAmLI;AAAA;AAAA;AAAA;AAAA,gBAnLJ,eAoLI;AAAI,UAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBApLJ,6HAqL8G;AAAA;AAAA;AAAA;AAAA,gBArL9G,oDAqL+J;AAAA;AAAA;AAAA;AAAA,gBArL/J,eAsLI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,sBACG;AAC3B;AACA;AACA;AACA;AACA;AACA;AAPwB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAtLJ,eAiMI;AAAI,UAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjMJ,eAkMI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,sBACC;AACzB;AAFwB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAlMJ,0IAyMI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,sBACE;AAC1B;AAFwB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAzMJ,eA+MI;AAAI,UAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA/MJ,eAgNI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,sBACM;AADN;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAhNJ,6GAqN8F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBArN9F,kCAqN4H;AAAA;AAAA;AAAA;AAAA,gBArN5H,oBAqNkI;AAAA;AAAA;AAAA;AAAA,gBArNlI,eAsNI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,sBACC;AACzB;AACA;AACA;AACA;AACA;AANwB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAtNJ,eAgOI;AAAA;AAAA;AAAA;AAAA,gBAhOJ,eAgOS;AAAA;AAAA;AAAA;AAAA,gBAhOT,eAiOI;AAAI,UAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjOJ,4EAkO6D;AAAA;AAAA;AAAA;AAAA,gBAlO7D,uKAmOwJ;AAAA;AAAA;AAAA;AAAA,gBAnOxJ,qEAoOsD;AAAA;AAAA;AAAA;AAAA,gBApOtD,4DAoO8G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBApO9G,sDAqOI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,sBACE;AAC1B;AACA;AAHwB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBArOJ,6FA6OI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,sBACC;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATwB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBA7OJ,eA0PI;AAAI,UAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA1PJ,eA2PI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,sBACE;AAC1B;AACA;AACA;AACA;AACA;AANwB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBA3PJ,eAsQI;AAAA;AAAA;AAAA;AAAA,gBAtQJ,eAuQI;AAAI,UAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAvQJ,iHAwQkG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAxQlG,qBAwQsH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAxQtH,qBAwQ4I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAxQ5I,yBAwQoK;AAAA;AAAA;AAAA;AAAA,gBAxQpK,eAyQI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,uBACE,KADF,2BACe;AAAA;AAAA;AAAA;AAAA,oBADf;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAzQJ,iGAgRI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,sBACC;AACzB;AACA;AACA;AAJwB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAhRJ,gFAyRI;AAAA;AAAA;AAAA;AAAA,gBAzRJ,eA0RI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,sBACE;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATwB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBA1RJ,+DAwSgD;AAAA;AAAA;AAAA;AAAA,gBAxShD,eAySI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,sBACE;AAC1B;AACA;AACA;AACA;AACA;AANwB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAzSJ,yEAmT0D;AAAA;AAAA;AAAA;AAAA,gBAnT1D,eAoTI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAA,sBACE;AAC1B;AACA;AACA;AAJwB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBApTJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAqUH,CAzUD;;KAAMH,O;AA2UN,eAAeA,OAAf","sourcesContent":["import React from 'react'\r\nimport {SiPython} from 'react-icons/si'\r\nimport Tutorial from '../Tutorial'\r\nimport icon from './py1.png'\r\nimport icon2 from './py3.png'\r\n\r\nconst Python1 = () => {\r\n    const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"PYTHON\" language = \"python\"  next=\"/Python4\" icon2={logo.Lname2}\r\n            theoryContent={\r\n                <div className=\"TutorialPadding\">\r\n                    <h4 className=\"Thead\">Python Data Types</h4>\r\n                    In this tutorial, you will learn about different data types you can use in Python.<br/><br/>\r\n                    <h4 className=\"Thead\">Data Types in Python</h4>\r\n                    Every value in Python has a datatype. Since everything is an object in Python programming, data types are actually classes and variables are instance (object) of these classes.<br/><br/>\r\n                    There are various data types in Python. Some of the important types are listed below.<br/>\r\n                    <hr/>\r\n                    <h4 className=\"Thead\">Python Numbers</h4>\r\n                    Integers, floating point numbers and complex numbers fall under Python numbers category. They are defined as <code>int</code>,<code>float</code> and <code>complex</code> classes in Python.<br/><br/>\r\n                    We can use the <code>type()</code> function to know which class a variable or a value belongs to. Similarly, the <code>isinstance()</code> function is used to check if an object belongs to a particular class.\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`a = 5\r\nprint(a, \"is of type\", type(a))\r\n\r\na = 2.0\r\nprint(a, \"is of type\", type(a))\r\n\r\na = 1+2j\r\nprint(a, \"is complex number?\", isinstance(1+2j,complex))`}                \r\n                        </pre>\r\n                    </div> \r\n\r\n                    <h4 className=\"Thead\">Output</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`5 is of type <class 'int'>\r\n2.0 is of type <class 'float'>\r\n(1+2j) is complex number? True`}                \r\n                        </pre>\r\n                    </div> \r\n                    Integers can be of any length, it is only limited by the memory available.<br/><br/>\r\n                    A floating-point number is accurate up to 15 decimal places. Integer and floating points are separated by decimal points. <code>1</code> is an integer, <code>1.0</code> is a floating-point number.\r\n                    Complex numbers are written in the form, x + yj, where x is the real part and y is the imaginary part. Here are some examples.\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`>>> a = 1234567890123456789\r\n>>> a\r\n1234567890123456789\r\n>>> b = 0.1234567890123456789\r\n>>> b\r\n0.12345678901234568\r\n>>> c = 1+2j\r\n>>> c\r\n(1+2j)`}                \r\n                        </pre>\r\n                    </div> \r\n                    Notice that the <code>float</code> variable b got truncated.\r\n                    <hr/>\r\n                    <h4 className=\"Thead\">Python List</h4>\r\n                    List is an ordered sequence of items. It is one of the most used datatype in Python and is very flexible. All the items in a list do not need to be of the same type.<br/><br/><hr/>\r\n                    Declaring a list is pretty straight forward. Items separated by commas are enclosed within brackets <code>[ ]</code>.\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        a = [1, 2.2, 'python']            \r\n                        </pre>\r\n                    </div> \r\n                    We can use the slicing operator <code>[ ]</code> to extract an item or a range of items from a list. The index starts from 0 in Python.<br/><br/>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`a = [5,10,15,20,25,30,35,40]\r\n\r\n# a[2] = 15\r\nprint(\"a[2] = \", a[2])\r\n\r\n# a[0:3] = [5, 10, 15]\r\nprint(\"a[0:3] = \", a[0:3])\r\n\r\n# a[5:] = [30, 35, 40]\r\nprint(\"a[5:] = \", a[5:])`}                \r\n                        </pre>\r\n                    </div>\r\n\r\n                    <h4 className=\"Thead\">Output</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        a[2] =  15<br/>\r\n                        a[0:3] =  [5, 10, 15]<br/>\r\n                        a[5:] =  [30, 35, 40]              \r\n                        </pre>\r\n                    </div>  \r\n                    Lists are mutable, meaning, the value of elements of a list can be altered.\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        a = [1, 2, 3]<br/>\r\n                        a[2] = 4<br/>\r\n                        print(a)              \r\n                        </pre>\r\n                    </div>\r\n                    <h4 className=\"Thead\">Output</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                            [1, 2, 4]\r\n                         </pre>   \r\n                    </div> \r\n                    <hr/>\r\n                    <h4 className=\"Thead\">Python Tuple</h4>\r\n                    Tuple is an ordered sequence of items same as a list. The only difference is that tuples are immutable. Tuples once created cannot be modified.<br/><br/>\r\n                    Tuples are used to write-protect data and are usually faster than lists as they cannot change dynamically.<br/>\r\n                    It is defined within parentheses <code>()</code> where items are separated by commas.\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        t = (5,'program', 1+3j)\r\n                         </pre>   \r\n                    </div>\r\n\r\n                    We can use the slicing operator <code>[]</code> to extract items but we cannot change its value.\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`t = (5,'program', 1+3j)\r\n\r\n# t[1] = 'program'\r\nprint(\"t[1] = \", t[1])\r\n\r\n# t[0:3] = (5, 'program', (1+3j))\r\nprint(\"t[0:3] = \", t[0:3])\r\n\r\n# Generates error\r\n# Tuples are immutable\r\nt[0] = 10`}\r\n                         </pre>   \r\n                    </div>\r\n                     <h4 className=\"Thead\">Output</h4>\r\n                     <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`t[1] =  program\r\nt[0:3] =  (5, 'program', (1+3j))\r\nTraceback (most recent call last):\r\nFile \"test.py\", line 11, in <module>\r\nt[0] = 10\r\nTypeError: 'tuple' object does not support item assignment `}\r\n                         </pre>   \r\n                    </div>   \r\n                    <hr/>\r\n                    <h4 className=\"Thead\">Python Strings</h4>\r\n                    String is sequence of Unicode characters. We can use single quotes or double quotes to represent strings. Multi-line strings can be denoted using triple quotes, <code>'''</code> or <code>\"\"\"</code>.\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`s = \"This is a string\"\r\nprint(s)\r\ns = '''A multiline\r\nstring'''\r\nprint(s)`}\r\n                        </pre>   \r\n                    </div>\r\n                     <h4 className=\"Thead\">Output</h4>\r\n                     <div className=\"card card-body\">\r\n                        <pre>\r\n                        This is a string<br/>\r\n                        A multiline<br/>\r\n                        string   \r\n                        </pre>   \r\n                    </div>  \r\n                    Just like a list and tuple, the slicing operator <code>[ ]</code> can be used with strings. Strings, however, are immutable.<br/><br/>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`s = 'Hello world!'\r\n\r\n# s[4] = 'o'\r\nprint(\"s[4] = \", s[4])\r\n\r\n# s[6:11] = 'world'\r\nprint(\"s[6:11] = \", s[6:11])\r\n\r\n# Generates error\r\n# Strings are immutable in Python\r\ns[5] ='d'`}\r\n                        </pre>   \r\n                    </div>\r\n                    <h4 className=\"Thead\">Output</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`s[4] =  o\r\ns[6:11] =  world\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 11, in <module>\r\nTypeError: 'str' object does not support item assignment`}\r\n                        </pre>   \r\n                    </div>\r\n                    <hr/>\r\n                    <h4 className=\"Thead\">Python Set</h4>\r\n                    Set is an unordered collection of unique items. Set is defined by values separated by comma inside braces <code>{ }</code>. Items in a set are not ordered.<br/>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                         {`a = {5,2,3,1,4}\r\n\r\n# printing set variable\r\nprint(\"a = \", a)\r\n\r\n# data type of variable a\r\nprint(type(a))`}  \r\n                        </pre>   \r\n                    </div>\r\n                    <h4 className=\"Thead\">Output</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                       {` a =  {1, 2, 3, 4, 5}\r\n<class 'set'>`}\r\n                        </pre>   \r\n                    </div>\r\n                    We can perform set operations like union, intersection on two sets. Sets have unique values. They eliminate duplicates.\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`a = {1,2,2,3,3,3}\r\nprint(a) `}\r\n                        </pre>   \r\n                    </div>\r\n                    <h4 className=\"Thead\">Output</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                            {`{1, 2, 3}`}\r\n                        </pre>   \r\n                    </div>\r\n                    Since, set are unordered collection, indexing has no meaning. Hence, the slicing operator <code>[]</code> does not work.<br/> <br/>  \r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                       {` >>> a = {1,2,3}\r\n>>> a[1]\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 301, in runcode\r\n  File \"<interactive input>\", line 1, in <module>\r\nTypeError: 'set' object does not support indexing `}\r\n                        </pre>   \r\n                    </div>\r\n                    <hr/><hr/>\r\n                    <h4 className=\"Thead\">Python Dictionary</h4>\r\n                    Dictionary is an unordered collection of key-value pairs.<br/>\r\n                    It is generally used when we have a huge amount of data. Dictionaries are optimized for retrieving data. We must know the key to retrieve the value.<br/>\r\n                    In Python, dictionaries are defined within braces <code>{}</code> with each item being a pair in the form <code>key:value</code>. Key and value can be of any type.\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`>>> d = {1:'value','key':2}\r\n>>> type(d)\r\n<class 'dict'>`}\r\n                        </pre>   \r\n                    </div>\r\n                    We use key to retrieve the respective value. But not the other way around.\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                       {`d = {1:'value','key':2}\r\nprint(type(d))\r\n\r\nprint(\"d[1] = \", d[1]);\r\n\r\nprint(\"d['key'] = \", d['key']);\r\n\r\n# Generates error\r\nprint(\"d[2] = \", d[2]);`}\r\n                         </pre>   \r\n                    </div>\r\n                    <h4 className=\"Thead\">Output</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`<class 'dict'>\r\nd[1] =  value\r\nd['key'] =  2\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 9, in <module>\r\nKeyError: 2`}\r\n\r\n                         </pre>   \r\n                    </div>\r\n                    <hr/>\r\n                    <h4 className=\"Thead\">Conversion between data types</h4>\r\n                    We can convert between different data types by using different type conversion functions like <code>int()</code>, <code>float()</code>, <code>str()</code>, etc.<br/>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`>>>`}float(5)<br/>\r\n                        5.0\r\n                         </pre>   \r\n                    </div>\r\n                    Conversion from float to int will truncate the value (make it closer to zero).\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                       {`>>> int(10.6)\r\n10\r\n>>> int(-10.6)\r\n-10`}\r\n                         </pre>   \r\n                    </div>\r\n                    Conversion to and from string must contain compatible values.\r\n                    <br/>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`>>> float('2.5')\r\n2.5\r\n>>> str(25)\r\n'25'\r\n>>> int('1p')\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 301, in runcode\r\n  File \"<interactive input>\", line 1, in <module>\r\nValueError: invalid literal for int() with base 10: '1p' `}\r\n                         </pre>   \r\n                    </div>\r\n\r\n                    We can even convert one sequence to another.<br/>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`>>> set([1,2,3])\r\n{1, 2, 3}\r\n>>> tuple({5,6,7})\r\n(5, 6, 7)\r\n>>> list('hello')\r\n['h', 'e', 'l', 'l', 'o'] `} \r\n                         </pre>   \r\n                    </div>\r\n                    To convert to dictionary, each element must be a pair:<br/>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`>>> dict([[1,2],[3,4]])\r\n{1: 2, 3: 4}\r\n>>> dict([(3,26),(4,44)])\r\n{3: 26, 4: 44}`}\r\n                         </pre>   \r\n                    </div>\r\n                </div>          \r\n            }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Python1\r\n"]},"metadata":{},"sourceType":"module"}