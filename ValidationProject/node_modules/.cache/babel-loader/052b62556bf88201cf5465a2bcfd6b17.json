{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\One Life\\\\Projects_Dac\\\\upload-image\\\\ValidationProject\\\\src\\\\components\\\\java\\\\Java2.js\";\nimport React from 'react';\nimport Tutorial from '../Tutorial';\nimport { SiJava } from 'react-icons/si';\nimport icon from './java9.png';\nimport icon2 from './java1.png';\n\nconst Java1 = () => {\n  const logo = {\n    \"Lname\": icon,\n    \"Lname2\": icon2\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Tutorial, {\n      icons: logo.Lname,\n      name: \"JAVA\",\n      language: \"java\",\n      next: \"/Java3\",\n      icon2: logo.Lname2,\n      theoryContent: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"TutorialPadding\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"Thead\",\n          children: [\"Java Methods\", /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 58\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"A method is a block of code that performs a specific task.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: [\"Declaring a Java Method\", /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 69\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 24\n        }, this), \"The syntax to declare a method is:\", /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `returnType methodName() {\n  // method body\n}\n`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 24\n        }, this), \"Here,\", /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" 1. returnType - It specifies what type of value a method returns For example if a method has an int return type then it returns an integer value.If the method does not return a value, its return type is void.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" 2. methodName - It is an identifier that is used to refer to the particular method in a program.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"3. method body - It includes the programming statements that are used to perform some tasks. The method body is enclosed inside the curly braces \", \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"For example,\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `int addNumbers() {\n// code\n}\n`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" In the above example, the name of the method is adddNumbers(). And, the return type is int. We will learn more about return types later in this tutorial.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: [\"Static vs. Non-Static\", /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 67\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You will often see Java programs that have either static or public attributes and methods. In the example above, we created a static method, which means that it can be accessed without creating an object of the class, unlike public, which can only be accessed by objects:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `public class Main {\n  // Static method\n  static void myStaticMethod() {\n    System.out.println(\"Static methods can be called without creating objects\");\n  }\n\n  // Public method\n  public void myPublicMethod() {\n    System.out.println(\"Public methods must be called by creating objects\");\n  }\n\n  // Main method\n  public static void main(String[] args) {\n    myStaticMethod(); // Call the static method\n    // myPublicMethod(); This would compile an error\n\n    Main myObj = new Main(); // Create an object of Main\n    myObj.myPublicMethod(); // Call the public method on the object\n  }\n}\n  // method body\n}\n`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: [\"Access Methods With an Object\", /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 77\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Create a Car object named myCar. Call the fullThrottle() and speed() methods on the myCar object, and run the program:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `public class Main {\n  // Static method\n  static void myStaticMethod() {\n    System.out.println(\"Static methods can be called without creating objects\");\n  }\n\n  // Public method\n  public void myPublicMethod() {\n    System.out.println(\"Public methods must be called by creating objects\");\n  }\n\n  // Main method\n  public static void main(String[] args) {\n    myStaticMethod(); // Call the static method\n    // myPublicMethod(); This would compile an error\n\n    Main myObj = new Main(); // Create an object of Main\n    myObj.myPublicMethod(); // Call the public method on the object\n  }\n}\n  // method body\n}\n`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 20\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Java1;\nexport default Java1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Java1\");","map":{"version":3,"sources":["C:/Users/One Life/Projects_Dac/upload-image/ValidationProject/src/components/java/Java2.js"],"names":["React","Tutorial","SiJava","icon","icon2","Java1","logo","Lname","Lname2"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Tutorial from '../Tutorial'\r\nimport {SiJava} from 'react-icons/si'\r\nimport icon from './java9.png'\r\nimport icon2 from './java1.png'\r\n\r\nconst Java1 = () => {\r\n    const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n          <Tutorial icons = {logo.Lname} name = \"JAVA\" language = \"java\" next=\"/Java3\" icon2={logo.Lname2}\r\n          theoryContent = {\r\n                   <p className=\"TutorialPadding\">\r\n                       <h3 className=\"Thead\">Java Methods<hr/></h3>\r\n                        <p>A method is a block of code that performs a specific task.</p>\r\n\r\n                      \r\n\r\n                       <h4 className=\"Thead\">Declaring a Java Method<hr/></h4>\r\n                       The syntax to declare a method is:\r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`returnType methodName() {\r\n  // method body\r\n}\r\n`}\r\n                            </pre>      \r\n                         </div>\r\n    Here,\r\n   <p> 1. returnType - It specifies what type of value a method returns For example if a method has an int return type then it returns an integer value.If the method does not return a value, its return type is void.</p>\r\n   <p> 2. methodName - It is an identifier that is used to refer to the particular method in a program.</p>\r\n<p>3. method body - It includes the programming statements that are used to perform some tasks. The method body is enclosed inside the curly braces { }.</p>\r\n<p>For example,</p>\r\n\r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`int addNumbers() {\r\n// code\r\n}\r\n`}\r\n                            </pre>      \r\n                         </div>\r\n\r\n                         \r\n                       <p> In the above example, the name of the method is adddNumbers(). And, the return type is int. We will learn more about return types later in this tutorial.</p>\r\n\r\n                       <h4 className=\"Thead\">Static vs. Non-Static<hr/></h4>\r\n                       <p>You will often see Java programs that have either static or public attributes and methods.\r\n\r\nIn the example above, we created a static method, which means that it can be accessed without creating an object of the class, unlike public, which can only be accessed by objects:</p>\r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`public class Main {\r\n  // Static method\r\n  static void myStaticMethod() {\r\n    System.out.println(\"Static methods can be called without creating objects\");\r\n  }\r\n\r\n  // Public method\r\n  public void myPublicMethod() {\r\n    System.out.println(\"Public methods must be called by creating objects\");\r\n  }\r\n\r\n  // Main method\r\n  public static void main(String[] args) {\r\n    myStaticMethod(); // Call the static method\r\n    // myPublicMethod(); This would compile an error\r\n\r\n    Main myObj = new Main(); // Create an object of Main\r\n    myObj.myPublicMethod(); // Call the public method on the object\r\n  }\r\n}\r\n  // method body\r\n}\r\n`}\r\n                            </pre>      \r\n                         </div>\r\n\r\n\r\n\r\n\r\n                         <h4 className=\"Thead\">Access Methods With an Object<hr/></h4>\r\n                       <p>Create a Car object named myCar. Call the fullThrottle() and speed() methods on the myCar object, and run the program:</p>\r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`public class Main {\r\n  // Static method\r\n  static void myStaticMethod() {\r\n    System.out.println(\"Static methods can be called without creating objects\");\r\n  }\r\n\r\n  // Public method\r\n  public void myPublicMethod() {\r\n    System.out.println(\"Public methods must be called by creating objects\");\r\n  }\r\n\r\n  // Main method\r\n  public static void main(String[] args) {\r\n    myStaticMethod(); // Call the static method\r\n    // myPublicMethod(); This would compile an error\r\n\r\n    Main myObj = new Main(); // Create an object of Main\r\n    myObj.myPublicMethod(); // Call the public method on the object\r\n  }\r\n}\r\n  // method body\r\n}\r\n`}\r\n                            </pre>      \r\n                         </div>\r\n\r\n                   </p> \r\n\r\n                    \r\n\r\n                }\r\n                />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Java1\r\n"]},"metadata":{},"sourceType":"module"}