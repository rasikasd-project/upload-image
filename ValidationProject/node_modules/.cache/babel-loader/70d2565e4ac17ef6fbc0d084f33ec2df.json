{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\One Life\\\\Desktop\\\\finalProject\\\\src\\\\components\\\\cpp\\\\Cpp1.js\";\nimport React from 'react';\nimport Tutorial from '../Tutorial';\nimport { SiCplusplus } from 'react-icons/si';\nimport icon from './cpp2.png';\nimport icon2 from './cpp9.png';\n\nconst Cpp1 = () => {\n  const logo = {\n    \"Lname\": icon,\n    \"Lname2\": icon2\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Tutorial, {\n      icons: logo.Lname,\n      name: \"C++\",\n      language: \"cpp\",\n      next: \"/Cpp2\",\n      icon2: logo.Lname2,\n      theoryContent: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"TutorialPadding\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"Thead\",\n          children: [\"C++ Variables, Literals and Constants\", /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 83\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 24\n        }, this), \"In this tutorial, we will learn about variables, literals, and constants in C++ with the help of examples.\", /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"C++ Variables\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 24\n        }, this), \"In programming, a variable is a container (storage area) to hold data.To indicate the storage area, each variable should be given a unique name (identifier). For example,\", /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `int age = 14;`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 24\n        }, this), \"Here, \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"age\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 31\n        }, this), \" is a variable of the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"int\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 69\n        }, this), \" data type, and we have assigned an integer value 14 to it. The value of a variable can be changed, hence the name variable.\", /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `int age = 14;   // age is 14\nage = 17;       // age is 17`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"Rules for Naming a variable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"A variable name can only have alphabets, numbers, and the underscore \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"_\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 102\n            }, this), \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \" A variable name cannot begin with a number.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \" Variable names should not begin with an uppercase character.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\" A variable name cannot be a keyword. For example, \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"int\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 84\n            }, this), \" is a keyword that is used to denote integers\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \" A variable name can start with an underscore. However, it's not considered a good practice.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"C++ Literals\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this), \"Literals are data used for representing fixed values. They can be used directly in the code. For example: \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 130\n        }, this), \",\", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \" 2.5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 145\n        }, this), \",\", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \" 'c'\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 163\n        }, this), \" etc.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 185\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 191\n        }, this), \"Here,\", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \" 1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 29\n        }, this), \",\", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \" 2.5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 45\n        }, this), \" and \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"'c'\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 67\n        }, this), \" are literals. Why? You cannot assign different values to these terms.\", /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 153\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"1. Integers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 24\n        }, this), \"An integer is a numeric literal(associated with numbers) without any fractional or exponential part. There are three types of integer literals in C programming:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"1. decimal (base 10)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"2. octal (base 8)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"3. hexadecimal (base 16)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 24\n        }, this), \"For example:\", /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `Decimal: 0, -9, 22 etc\nOctal: 021, 077, 033 etc\nHexadecimal: 0x7f, 0x2a, 0x521 etc`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 24\n        }, this), \"In C++ programming, octal starts with a \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 66\n        }, this), \", and hexadecimal starts with a \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"0x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 112\n        }, this), \".\", /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"2. Floating point Literals\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this), \"A floating-point literal is a numeric literal that has either a fractional form or an exponent form. For example:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 138\n        }, this), /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"-2.0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 42\n        }, this), /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"0.0000234\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 47\n        }, this), /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"-0.22E-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"3. characters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this), \"A character literal is created by enclosing a single character inside single quotation marks. For example: 'a', 'm', 'F', '2', '}' etc.\", /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"Thead\",\n          children: \"4. Escape Sequence\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this), \"Sometimes, it is necessary to use characters that cannot be typed or has special meaning in C++ programming. For example, newline (enter), tab, question mark, etc.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 188\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 194\n        }, this), \"In order to use these characters, escape sequences are used.\", /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              class: \"table table-striped\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    scope: \"col\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 83,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    scope: \"col\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 84,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 82,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"Escape Sequence\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 89,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 89,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"Characters\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 90,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 90,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"\\\\b\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 93,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 93,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"Backspace\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 94,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 94,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 92,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"\\\\f\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 97,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 97,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"Form feed\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 98,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 98,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"\\\\n\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 101,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 101,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"Newline\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 102,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 102,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"\\\\r\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 105,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 105,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"Return\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 106,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 106,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 104,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"\\\\t\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 109,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 109,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"Horizontal tab\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 110,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 110,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"\\\\v\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 113,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 113,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"Vertical tab\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 114,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 114,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"\\\\\\\\\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 117,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 117,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"Backslash\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 118,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 118,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"\\\\'\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 121,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 121,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"Single quotation mark\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 122,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 122,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"\\\\\\\"\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 125,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 125,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"Double quotation mark\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 126,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 126,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"\\\\?\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 129,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 129,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"Question mark\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 130,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 130,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"\\\\0\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 133,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 133,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"Null character\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 134,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 134,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 35\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"5. String Literals\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 26\n        }, this), \"A string literal is a sequence of characters enclosed in double-quote marks. For example:\", /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              class: \"table table-striped\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    scope: \"col\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 148,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    scope: \"col\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 149,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"\\\"Good\\\"\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 154,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 154,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"string constant\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 155,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 155,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"\\\"\\\"\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 158,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 158,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"null string constant\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 159,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 159,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"\\\" \\\"\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 162,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 162,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"string constant of six white space\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 163,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 163,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"\\\"x\\\"\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 166,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 166,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"string constant having a single character\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 167,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 167,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"\\\"Earth is round\\\\n\\\"\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 170,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 170,\n                    columnNumber: 39\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"code\", {\n                      children: \"prints string with a new line\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 171,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 171,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 35\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"Thead\",\n          children: \"C++ Constants\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 27\n        }, this), \"In C++, we can create variables whose value cannot be changed. For that, we use the const keyword. Here's an example:\", /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: `const int LIGHT_SPEED = 299792458;\nLIGHT_SPEED = 2500 // Error! LIGHT_SPEED is a constant.`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 27\n        }, this), \"Here, we have used the keyword \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"const\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 57\n        }, this), \" to declare a constant named \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"LIGHT_SPEED\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 104\n        }, this), \". If we try to change the value of \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"LIGHT_SPEED\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 163\n        }, this), \", we will get an error. A constant can also be created using the \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"#define\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 68\n        }, this), \" preprocessor directive. We will learn about it in detail in the C++ Macros tutorial.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 20\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Cpp1;\nexport default Cpp1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cpp1\");","map":{"version":3,"sources":["C:/Users/One Life/Desktop/finalProject/src/components/cpp/Cpp1.js"],"names":["React","Tutorial","SiCplusplus","icon","icon2","Cpp1","logo","Lname","Lname2"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Tutorial from '../Tutorial'\r\nimport {SiCplusplus} from 'react-icons/si'\r\nimport icon from './cpp2.png'\r\nimport icon2 from './cpp9.png'\r\n\r\nconst Cpp1 = () => {\r\n  const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"C++\" language = \"cpp\" next=\"/Cpp2\" icon2={logo.Lname2}\r\n                \r\n                theoryContent = {\r\n                   <div className=\"TutorialPadding\">\r\n                       <h3 className=\"Thead\">C++ Variables, Literals and Constants<hr/></h3>\r\n                        In this tutorial, we will learn about variables, literals, and constants in C++ with the help of examples.\r\n                       <h4>C++ Variables</h4>\r\n                       In programming, a variable is a container (storage area) to hold data.To indicate the storage area, each variable should be given a unique name (identifier). For example, \r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`int age = 14;`}\r\n                            </pre>      \r\n                         </div>\r\n                        Here, <code>age</code> is a variable of the <code>int</code> data type, and we have assigned an integer value 14 to it.\r\n                        The value of a variable can be changed, hence the name variable.\r\n                        <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`int age = 14;   // age is 14\r\nage = 17;       // age is 17`}\r\n                            </pre>      \r\n                        </div>\r\n\r\n                        <h4 className=\"Thead\">Rules for Naming a variable</h4>\r\n                        <ol>\r\n                            <li>A variable name can only have alphabets, numbers, and the underscore <code>_</code>.</li>\r\n                            <li> A variable name cannot begin with a number.</li>\r\n                            <li> Variable names should not begin with an uppercase character.</li>\r\n                            <li> A variable name cannot be a keyword. For example, <code>int</code> is a keyword that is used to denote integers</li>\r\n                            <li> A variable name can start with an underscore. However, it's not considered a good practice.</li>\r\n                        </ol>\r\n                        \r\n                        <h4 className=\"Thead\">C++ Literals</h4>\r\n                       Literals are data used for representing fixed values. They can be used directly in the code. For example: <code>1</code>,<code> 2.5</code>,<code> 'c'</code> etc.<br /><br/>\r\n                       Here,<code> 1</code>,<code> 2.5</code> and <code>'c'</code> are literals. Why? You cannot assign different values to these terms.<hr/>\r\n                       <h4 className=\"Thead\">1. Integers</h4>\r\n                       An integer is a numeric literal(associated with numbers) without any fractional or exponential part. There are three types of integer literals in C programming:\r\n                       <ul>\r\n                            <li>1. decimal (base 10)</li>\r\n                            <li>2. octal (base 8)</li>\r\n                            <li>3. hexadecimal (base 16)</li>    \r\n                       </ul>\r\n                       For example:\r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`Decimal: 0, -9, 22 etc\r\nOctal: 021, 077, 033 etc\r\nHexadecimal: 0x7f, 0x2a, 0x521 etc`}\r\n                            </pre>      \r\n                         </div>\r\n                         In C++ programming, octal starts with a <code>0</code>, and hexadecimal starts with a <code>0x</code>.\r\n                   <hr />\r\n\r\n                        <h4 className=\"Thead\">2. Floating point Literals</h4>\r\n                        A floating-point literal is a numeric literal that has either a fractional form or an exponent form. For example:<br />\r\n                        <code>-2.0</code><br />\r\n                        <code>0.0000234</code><br />\r\n                        <code>-0.22E-5</code>\r\n                        <hr />\r\n\r\n                        <h4 className=\"Thead\">3. characters</h4>\r\n                        A character literal is created by enclosing a single character inside single quotation marks. For example: 'a', 'm', 'F', '2', '}' etc.\r\n                        <hr />\r\n                        <h5 className=\"Thead\">4. Escape Sequence</h5>\r\n                        Sometimes, it is necessary to use characters that cannot be typed or has special meaning in C++ programming. For example, newline (enter), tab, question mark, etc.<br /><br/>\r\n                        In order to use these characters, escape sequences are used.\r\n                        <div class=\"card card-body\">\r\n                            <pre>\r\n                            <table class=\"table table-striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                      <th scope=\"col\"></th>\r\n                                      <th scope=\"col\"></th>\r\n                                    </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                    <tr>\r\n                                      <td><code>Escape Sequence</code></td>\r\n                                      <td><code>Characters</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\b</code></td>\r\n                                      <td><code>Backspace</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\f</code></td>\r\n                                      <td><code>Form feed</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\n</code></td>\r\n                                      <td><code>Newline</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\r</code></td>\r\n                                      <td><code>Return</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\t</code></td>\r\n                                      <td><code>Horizontal tab</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\v</code></td>\r\n                                      <td><code>Vertical tab</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\\\</code></td>\r\n                                      <td><code>Backslash</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\'</code></td>\r\n                                      <td><code>Single quotation mark</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\\"</code></td>\r\n                                      <td><code>Double quotation mark</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\?</code></td>\r\n                                      <td><code>Question mark</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\0</code></td>\r\n                                      <td><code>Null character</code></td>\r\n                                    </tr> \r\n                                  </tbody>\r\n                                </table>\r\n                            </pre>      \r\n                         </div>\r\n                         <hr />\r\n                         <h4 className=\"Thead\">5. String Literals</h4>\r\n                          A string literal is a sequence of characters enclosed in double-quote marks. For example:\r\n                          <div class=\"card card-body\">\r\n                            <pre>\r\n                            <table class=\"table table-striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                      <th scope=\"col\"></th>\r\n                                      <th scope=\"col\"></th>\r\n                                    </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                    <tr>\r\n                                      <td><code>\"Good\"</code></td>\r\n                                      <td><code>string constant</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\"\"</code></td>\r\n                                      <td><code>null string constant</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\" \"</code></td>\r\n                                      <td><code>string constant of six white space</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\"x\"</code></td>\r\n                                      <td><code>string constant having a single character</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\"Earth is round\\n\"</code></td>\r\n                                      <td><code>prints string with a new line</code></td>\r\n                                    </tr> \r\n                                  </tbody>\r\n                                </table>\r\n                            </pre>\r\n                           </div>  \r\n                           <hr /> \r\n\r\n                          <h4 className=\"Thead\">C++ Constants</h4>\r\n                          In C++, we can create variables whose value cannot be changed. For that, we use the const keyword. Here's an example:\r\n                          <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`const int LIGHT_SPEED = 299792458;\r\nLIGHT_SPEED = 2500 // Error! LIGHT_SPEED is a constant.`}\r\n                            </pre>      \r\n                         </div>\r\n                         Here, we have used the keyword <code>const</code> to declare a constant named <code>LIGHT_SPEED</code>. If we try to change the value of <code>LIGHT_SPEED</code>, we will get an error.\r\n                          A constant can also be created using the <code>#define</code> preprocessor directive. We will learn about it in detail in the C++ Macros tutorial.\r\n                   </div> \r\n                }\r\n            \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cpp1\r\n"]},"metadata":{},"sourceType":"module"}