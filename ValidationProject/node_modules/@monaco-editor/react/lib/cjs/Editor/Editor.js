'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var monaco = require('@monaco-editor/loader');
var React = require('react');
var PropTypes = require('prop-types');
var index$2 = require('../MonacoContainer/index.js');
var index = require('../hooks/useMount/index.js');
var index$1 = require('../hooks/useUpdate/index.js');
var index$3 = require('../utils/index.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var monaco__default = /*#__PURE__*/_interopDefaultLegacy(monaco);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);

function Editor({
  value,
  language,
  editorDidMount,
  theme,
  line,
  width,
  height,
  loading,
  options,
  overrideServices,
  _isControlledMode,
  className,
  wrapperClassName
}) {
  const [isEditorReady, setIsEditorReady] = React.useState(false);
  const [isMonacoMounting, setIsMonacoMounting] = React.useState(true);
  const editorRef = React.useRef(null);
  const monacoRef = React.useRef(null);
  const containerRef = React.useRef(null);
  const editorDidMountRef = React.useRef(editorDidMount);
  index['default'](() => {
    const cancelable = monaco__default['default'].init();
    cancelable.then(monaco => (monacoRef.current = monaco) && setIsMonacoMounting(false)).catch(error => (error === null || error === void 0 ? void 0 : error.type) !== 'cancelation' && console.error('Monaco initialization: error:', error));
    return () => editorRef.current ? disposeEditor() : cancelable.cancel();
  });
  index$1['default'](() => {
    editorRef.current.updateOptions(options);
  }, [options], isEditorReady);
  index$1['default'](() => {
    if (editorRef.current.getOption(monacoRef.current.editor.EditorOption.readOnly)) {
      editorRef.current.setValue(value);
    } else {
      if (value !== editorRef.current.getValue()) {
        editorRef.current.executeEdits('', [{
          range: editorRef.current.getModel().getFullModelRange(),
          text: value,
          forceMoveMarkers: true
        }]);

        if (_isControlledMode) {
          const model = editorRef.current.getModel();
          model.forceTokenization(model.getLineCount());
        }

        editorRef.current.pushUndoStop();
      }
    }
  }, [value], isEditorReady);
  index$1['default'](() => {
    monacoRef.current.editor.setModelLanguage(editorRef.current.getModel(), language);
  }, [language], isEditorReady);
  index$1['default'](() => {
    editorRef.current.setScrollPosition({
      scrollTop: line
    });
  }, [line], isEditorReady);
  index$1['default'](() => {
    monacoRef.current.editor.setTheme(theme);
  }, [theme], isEditorReady);
  const createEditor = React.useCallback(() => {
    editorRef.current = monacoRef.current.editor.create(containerRef.current, {
      value,
      language,
      automaticLayout: true,
      ...options
    }, overrideServices);
    monacoRef.current.editor.setTheme(theme);
    setIsEditorReady(true);
  }, [language, options, overrideServices, theme, value]);
  React.useEffect(() => {
    if (isEditorReady) {
      editorDidMountRef.current(editorRef.current.getValue.bind(editorRef.current), editorRef.current);
    }
  }, [isEditorReady]);
  React.useEffect(() => {
    !isMonacoMounting && !isEditorReady && createEditor();
  }, [isMonacoMounting, isEditorReady, createEditor]);

  const disposeEditor = () => editorRef.current.dispose();

  return /*#__PURE__*/React__default['default'].createElement(index$2['default'], {
    width: width,
    height: height,
    isEditorReady: isEditorReady,
    loading: loading,
    _ref: containerRef,
    className: className,
    wrapperClassName: wrapperClassName
  });
}

Editor.propTypes = {
  value: PropTypes__default['default'].string,
  language: PropTypes__default['default'].string,
  editorDidMount: PropTypes__default['default'].func,
  theme: PropTypes__default['default'].string,
  line: PropTypes__default['default'].number,
  width: PropTypes__default['default'].oneOfType([PropTypes__default['default'].number, PropTypes__default['default'].string]),
  height: PropTypes__default['default'].oneOfType([PropTypes__default['default'].number, PropTypes__default['default'].string]),
  loading: PropTypes__default['default'].oneOfType([PropTypes__default['default'].element, PropTypes__default['default'].string]),
  options: PropTypes__default['default'].object,
  className: PropTypes__default['default'].string,
  wrapperClassName: PropTypes__default['default'].string,
  overrideServices: PropTypes__default['default'].object,
  _isControlledMode: PropTypes__default['default'].bool
};
Editor.defaultProps = {
  editorDidMount: index$3.noop,
  theme: 'light',
  width: '100%',
  height: '100%',
  loading: 'Loading...',
  options: {},
  overrideServices: {},
  _isControlledMode: false
};

exports.default = Editor;
