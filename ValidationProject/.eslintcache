[{"C:\\Users\\One Life\\Desktop\\finalProject\\src\\index.js":"1","C:\\Users\\One Life\\Desktop\\finalProject\\src\\App.js":"2","C:\\Users\\One Life\\Desktop\\finalProject\\src\\reportWebVitals.js":"3","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\QuizContext.js":"4","C:\\Users\\One Life\\Desktop\\finalProject\\src\\Home.js":"5","C:\\Users\\One Life\\Desktop\\finalProject\\src\\Login.js":"6","C:\\Users\\One Life\\Desktop\\finalProject\\src\\Register.js":"7","C:\\Users\\One Life\\Desktop\\finalProject\\src\\Forgot.js":"8","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\Quiz.js":"9","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\Delete.js":"10","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\AddCourse.js":"11","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\AddQuiz.js":"12","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\Examples.js":"13","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\java\\Java2.js":"14","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\python\\Python3.js":"15","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\python\\Python4.js":"16","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\python\\Python2.js":"17","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\csharp\\Csharp3.js":"18","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\python\\Python1.js":"19","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\csharp\\Csharp4.js":"20","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\cpp\\Cpp3.js":"21","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\cpp\\Cpp1.js":"22","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\cpp\\Cpp2.js":"23","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\cpp\\Cpp4.js":"24","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\nodejs\\Javascript2.js":"25","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\nodejs\\Javascript3.js":"26","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\nodejs\\Javascript1.js":"27","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\csharp\\Csharp2.js":"28","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\nodejs\\Javascript4.js":"29","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\java\\Java3.js":"30","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\csharp\\Csharp1.js":"31","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\java\\Java4.js":"32","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\java\\Java1.js":"33","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\Course.js":"34","C:\\Users\\One Life\\Desktop\\finalProject\\src\\Navbar.js":"35","C:\\Users\\One Life\\Desktop\\finalProject\\src\\footer.js":"36","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\Delete1.js":"37","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\AddCourse2.js":"38","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\AddQuiz2.js":"39","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\Tutorial.js":"40","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\Editor.js":"41","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\TabNav.js":"42","C:\\Users\\One Life\\Desktop\\finalProject\\src\\validateInfo.js":"43","C:\\Users\\One Life\\Desktop\\finalProject\\src\\useForm.js":"44","C:\\Users\\One Life\\Desktop\\finalProject\\src\\Form.js":"45","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\index.js":"46","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\reportWebVitals.js":"47","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\App.js":"48","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\QuizContext.js":"49","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\Login.js":"50","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\Register.js":"51","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\Forgot.js":"52","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\Home.js":"53","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\Quiz.js":"54","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\AddQuiz.js":"55","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\AddCourse.js":"56","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\Delete.js":"57","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\Form.js":"58","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\Examples.js":"59","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\java\\Java3.js":"60","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\java\\Java1.js":"61","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\java\\Java4.js":"62","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\python\\Python1.js":"63","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\java\\Java2.js":"64","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\python\\Python2.js":"65","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\csharp\\Csharp1.js":"66","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\python\\Python4.js":"67","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\csharp\\Csharp2.js":"68","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\python\\Python3.js":"69","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\csharp\\Csharp3.js":"70","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\csharp\\Csharp4.js":"71","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\cpp\\Cpp1.js":"72","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\cpp\\Cpp3.js":"73","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\cpp\\Cpp4.js":"74","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\cpp\\Cpp2.js":"75","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\nodejs\\Javascript1.js":"76","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\nodejs\\Javascript2.js":"77","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\nodejs\\Javascript3.js":"78","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\nodejs\\Javascript4.js":"79","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\Course.js":"80","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\footer.js":"81","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\validateInfo.js":"82","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\useForm.js":"83","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\Navbar.js":"84","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\AddCourse2.js":"85","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\AddQuiz2.js":"86","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\Delete1.js":"87","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\Tutorial.js":"88","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\Editor.js":"89","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\TabNav.js":"90","C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\FormSuccess.js":"91"},{"size":613,"mtime":1611380496450,"results":"92","hashOfConfig":"93"},{"size":3465,"mtime":1611480573237,"results":"94","hashOfConfig":"93"},{"size":375,"mtime":1611380496450,"results":"95","hashOfConfig":"93"},{"size":670,"mtime":1611380496356,"results":"96","hashOfConfig":"93"},{"size":2650,"mtime":1611380496325,"results":"97","hashOfConfig":"93"},{"size":4123,"mtime":1611380496325,"results":"98","hashOfConfig":"93"},{"size":3587,"mtime":1611485346134,"results":"99","hashOfConfig":"93"},{"size":1322,"mtime":1611380496325,"results":"100","hashOfConfig":"93"},{"size":2021,"mtime":1611380496356,"results":"101","hashOfConfig":"93"},{"size":1003,"mtime":1611380496340,"results":"102","hashOfConfig":"93"},{"size":2220,"mtime":1611380496325,"results":"103","hashOfConfig":"93"},{"size":3246,"mtime":1611380496325,"results":"104","hashOfConfig":"93"},{"size":143,"mtime":1611380496356,"results":"105","hashOfConfig":"93"},{"size":4475,"mtime":1611397062438,"results":"106","hashOfConfig":"93"},{"size":14435,"mtime":1611380496403,"results":"107","hashOfConfig":"93"},{"size":9619,"mtime":1611380496403,"results":"108","hashOfConfig":"93"},{"size":7716,"mtime":1611380496403,"results":"109","hashOfConfig":"93"},{"size":2541,"mtime":1611380496356,"results":"110","hashOfConfig":"93"},{"size":7737,"mtime":1611380496403,"results":"111","hashOfConfig":"93"},{"size":2798,"mtime":1611405601720,"results":"112","hashOfConfig":"93"},{"size":6525,"mtime":1611380496356,"results":"113","hashOfConfig":"93"},{"size":11346,"mtime":1611380496356,"results":"114","hashOfConfig":"93"},{"size":9025,"mtime":1611380496356,"results":"115","hashOfConfig":"93"},{"size":4626,"mtime":1611380496356,"results":"116","hashOfConfig":"93"},{"size":6711,"mtime":1611380496387,"results":"117","hashOfConfig":"93"},{"size":8801,"mtime":1611380496387,"results":"118","hashOfConfig":"93"},{"size":7247,"mtime":1611380496387,"results":"119","hashOfConfig":"93"},{"size":4714,"mtime":1611405548965,"results":"120","hashOfConfig":"93"},{"size":3669,"mtime":1611380496403,"results":"121","hashOfConfig":"93"},{"size":5518,"mtime":1611399921620,"results":"122","hashOfConfig":"93"},{"size":3434,"mtime":1611401411860,"results":"123","hashOfConfig":"93"},{"size":5427,"mtime":1611380496387,"results":"124","hashOfConfig":"93"},{"size":4250,"mtime":1611396474563,"results":"125","hashOfConfig":"93"},{"size":928,"mtime":1611380496340,"results":"126","hashOfConfig":"93"},{"size":1639,"mtime":1611380496325,"results":"127","hashOfConfig":"93"},{"size":429,"mtime":1611380496403,"results":"128","hashOfConfig":"93"},{"size":865,"mtime":1611382607221,"results":"129","hashOfConfig":"93"},{"size":1371,"mtime":1611380496325,"results":"130","hashOfConfig":"93"},{"size":1216,"mtime":1611380496340,"results":"131","hashOfConfig":"93"},{"size":2000,"mtime":1611380496356,"results":"132","hashOfConfig":"93"},{"size":4839,"mtime":1611380496356,"results":"133","hashOfConfig":"93"},{"size":1098,"mtime":1611380496356,"results":"134","hashOfConfig":"93"},{"size":981,"mtime":1611483144847,"results":"135","hashOfConfig":"93"},{"size":1651,"mtime":1611485066752,"results":"136","hashOfConfig":"93"},{"size":764,"mtime":1611480987455,"results":"137","hashOfConfig":"93"},{"size":613,"mtime":1611380496450,"results":"138","hashOfConfig":"139"},{"size":375,"mtime":1611380496450,"results":"140","hashOfConfig":"139"},{"size":3465,"mtime":1611480573237,"results":"141","hashOfConfig":"139"},{"size":670,"mtime":1611380496356,"results":"142","hashOfConfig":"139"},{"size":4123,"mtime":1611380496325,"results":"143","hashOfConfig":"139"},{"size":3587,"mtime":1611542357275,"results":"144","hashOfConfig":"139"},{"size":1322,"mtime":1611380496325,"results":"145","hashOfConfig":"139"},{"size":2650,"mtime":1611380496325,"results":"146","hashOfConfig":"139"},{"size":2021,"mtime":1611380496356,"results":"147","hashOfConfig":"139"},{"size":3246,"mtime":1611380496325,"results":"148","hashOfConfig":"139"},{"size":2220,"mtime":1611380496325,"results":"149","hashOfConfig":"139"},{"size":1003,"mtime":1611380496340,"results":"150","hashOfConfig":"139"},{"size":812,"mtime":1611543416210,"results":"151","hashOfConfig":"139"},{"size":143,"mtime":1611380496356,"results":"152","hashOfConfig":"139"},{"size":5518,"mtime":1611399921620,"results":"153","hashOfConfig":"139"},{"size":4250,"mtime":1611396474563,"results":"154","hashOfConfig":"139"},{"size":5427,"mtime":1611380496387,"results":"155","hashOfConfig":"139"},{"size":7737,"mtime":1611380496403,"results":"156","hashOfConfig":"139"},{"size":4475,"mtime":1611397062438,"results":"157","hashOfConfig":"139"},{"size":7716,"mtime":1611380496403,"results":"158","hashOfConfig":"139"},{"size":3434,"mtime":1611401411860,"results":"159","hashOfConfig":"139"},{"size":9619,"mtime":1611380496403,"results":"160","hashOfConfig":"139"},{"size":4714,"mtime":1611405548965,"results":"161","hashOfConfig":"139"},{"size":14435,"mtime":1611380496403,"results":"162","hashOfConfig":"139"},{"size":2541,"mtime":1611380496356,"results":"163","hashOfConfig":"139"},{"size":2798,"mtime":1611405601720,"results":"164","hashOfConfig":"139"},{"size":11346,"mtime":1611380496356,"results":"165","hashOfConfig":"139"},{"size":6525,"mtime":1611380496356,"results":"166","hashOfConfig":"139"},{"size":4626,"mtime":1611380496356,"results":"167","hashOfConfig":"139"},{"size":9025,"mtime":1611380496356,"results":"168","hashOfConfig":"139"},{"size":7247,"mtime":1611380496387,"results":"169","hashOfConfig":"139"},{"size":6711,"mtime":1611380496387,"results":"170","hashOfConfig":"139"},{"size":8801,"mtime":1611380496387,"results":"171","hashOfConfig":"139"},{"size":3669,"mtime":1611380496403,"results":"172","hashOfConfig":"139"},{"size":928,"mtime":1611380496340,"results":"173","hashOfConfig":"139"},{"size":429,"mtime":1611380496403,"results":"174","hashOfConfig":"139"},{"size":981,"mtime":1611483144847,"results":"175","hashOfConfig":"139"},{"size":1793,"mtime":1611542717193,"results":"176","hashOfConfig":"139"},{"size":1639,"mtime":1611380496325,"results":"177","hashOfConfig":"139"},{"size":1371,"mtime":1611380496325,"results":"178","hashOfConfig":"139"},{"size":1216,"mtime":1611380496340,"results":"179","hashOfConfig":"139"},{"size":865,"mtime":1611382607221,"results":"180","hashOfConfig":"139"},{"size":2000,"mtime":1611380496356,"results":"181","hashOfConfig":"139"},{"size":4839,"mtime":1611380496356,"results":"182","hashOfConfig":"139"},{"size":1098,"mtime":1611380496356,"results":"183","hashOfConfig":"139"},{"size":260,"mtime":1611543608912,"results":"184","hashOfConfig":"139"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},"z8jz5i",{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"187"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"187"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"187"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"187"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"187"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"187"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"187"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"187"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"187"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"187"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"187"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"187"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"187"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"187"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"187"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"187"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"187"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"187"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"187"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"187"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"187"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"187"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"187"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"187"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"187"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"187"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"187"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"187"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"187"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"303","messages":"304","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"307"},"frjvgu",{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"307"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"307"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"307"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"307"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"307"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"307"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"307"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"307"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"307"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"307"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"307"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"307"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"307"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"307"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"307"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"307"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"307"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"307"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"307"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"307"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"307"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"307"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"307"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"307"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"307"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"307"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"307"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"307"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"307"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"307"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"307"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"307"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"307"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"307"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"382","messages":"383","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"307"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"307"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"307"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"307"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"307"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"307"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"307"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\One Life\\Desktop\\finalProject\\src\\index.js",[],["398","399"],"C:\\Users\\One Life\\Desktop\\finalProject\\src\\App.js",[],"C:\\Users\\One Life\\Desktop\\finalProject\\src\\reportWebVitals.js",[],"C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\QuizContext.js",[],"C:\\Users\\One Life\\Desktop\\finalProject\\src\\Home.js",["400"],"import React,{useState} from \"react\";\r\nimport Nav from \"./Navbar\";\r\nimport './Home.css';\r\nimport Course from './components/Course.js';\r\nimport image from './images/10088.jpg';\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport cpp from './images/cpp.png';\r\nimport java from './images/java.png';\r\nimport nodejs from './images/nodejs.png';\r\nimport python from './images/python.png';\r\nimport chash from './images/chash.png';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Home() {\r\n    //const {asyncCaller} = useContext(QuizContext);\r\n    const languages = [{\r\n                            \"name\" : chash,\r\n                            \"first\" :\"C-SHARP\"\r\n                        },\r\n                        {\r\n                            \"name\" : cpp,\r\n                            \"first\" :\"C++\"\r\n                        },\r\n                        {\r\n                            \"name\" : java,\r\n                            \"first\" : \"JAVA\"\r\n                        },\r\n                        {\r\n                            \"name\" : nodejs,\r\n                            \"first\" : \"NODEJS\"\r\n                        },\r\n                        {\r\n                            \"name\" : python,\r\n                            \"first\" : \"PYTHON\"\r\n                        }\r\n                        ];\r\n\r\n    const [language,setLanguage] = useState({\r\n                0 : \"Csharp1\",\r\n                1 : \"Cpp1\",\r\n                2 : \"Java1\",\r\n                3 : \"Javascript1\",\r\n                4 : \"Python1\"\r\n    });\r\n    return( \r\n    <div className = \"container-fluid\">\r\n        <Nav/>\r\n        <header className = \"d-flex\">\r\n            <img src = {image} height = \"500px\" width = \"900px\" alt = \"ed\"/>\r\n            <div className = \"d-flex justify-content-center align-items-center\">\r\n                <div>\r\n                    <h1 className = \"font-weight-bold\" style = {{\"color\" : \"#112d4e\"}}>Learn to Code <br/> for Free</h1>\r\n                    <p>Learn to code with our beginner-friendly tutorials and examples. Read tutorials, try examples, write programs, and learn to code.</p>\r\n                </div>\r\n            </div>    \r\n        </header>\r\n        <div className=\"courses-offered\">\r\n            <p className = \"font-weight-bold mx-4\">COURSES OFFERED</p>\r\n            <div className = \"d-flex flex-wrap ml-4\">\r\n                { languages.map( (lang,index) => (\r\n                    <Link to = {\"/\"+language[index]} style = {{textDecoration : \"none\"}}><Course title = {lang.name} info = {lang.first}/></Link> \r\n                ))}\r\n            </div>\r\n        </div>\r\n    </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Home;","C:\\Users\\One Life\\Desktop\\finalProject\\src\\Login.js",[],"C:\\Users\\One Life\\Desktop\\finalProject\\src\\Register.js",["401","402","403"],"C:\\Users\\One Life\\Desktop\\finalProject\\src\\Forgot.js",[],"C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\Quiz.js",["404","405","406","407"],"import React,{useContext, useState,useEffect} from 'react'\r\nimport {QuizContext} from './QuizContext'\r\nimport 'bootstrap'\r\n\r\nexport const Quiz = () => {\r\n    const {questions,fetchQuestions} = useContext(QuizContext);\r\n    const [correct,setCorrect] = useState(0);\r\n    const [index,setIndex] = useState(0);\r\n    const [isModalOpen,setIsModalOpen] = useState(false);\r\n\r\n    useEffect(() =>{\r\n        fetchQuestions();\r\n    },[]);\r\n\r\n    const { question, correct_answer, incorrect_answers } = questions[index];\r\n\r\n    let answers = [...incorrect_answers];\r\n    const tempIndex = Math.floor(Math.random() * 4)\r\n    if (tempIndex === 3) {\r\n      answers.push(correct_answer)\r\n    } else {\r\n      answers.push(answers[tempIndex])\r\n      answers[tempIndex] = correct_answer\r\n    }\r\n    // const openModal = () => {\r\n    //     setIsModalOpen(true);\r\n    // }\r\n    const nextQuestion = () => {\r\n        setIndex( prevIndex => {\r\n            const index = prevIndex + 1;\r\n            if(index > questions.length - 1){\r\n                //openModal();\r\n                return 0;\r\n            }else{\r\n                return index;\r\n            }\r\n        });\r\n    }\r\n    const checkAnswer = (value) => {\r\n        if(value)\r\n            setCorrect( prevValue => prevValue + 1)\r\n        nextQuestion();\r\n    }\r\n    \r\n    return (\r\n        <div className = \"d-flex justify-content-center align-items-center\" style = {{height : \"90vh\"}}>\r\n        <div>\r\n             <h3 className = \"my-4\" dangerouslySetInnerHTML = {{__html : question}}/>\r\n             <div className = \"d-flex flex-column align-items-center\">\r\n                {answers.map((answer,index) => (\r\n                    <button className = \"btn btn-outline-info\"\r\n                    style={{width : \"15em\",margin : \"0.5em 0.5em\"}}\r\n                    key = {index}\r\n                    onClick = {() => {checkAnswer(answer === correct_answer)}}>\r\n                    {answer}</button>\r\n                ))}\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\Delete.js",[],"C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\AddCourse.js",["408"],"import React,{Profiler, useState} from 'react'\r\nimport Navbar from '../Navbar'\r\nimport 'bootstrap'\r\nimport AddCourse2 from './AddCourse2'\r\nimport Delete1 from './Delete1'\r\n\r\nconst AddCourse = () => {\r\n    const [courseContent,setCourseContent] = useState({\r\n        \"input\" : \"\",\r\n        \"output\" : \"\"\r\n    });\r\n    const [testCase,setTestCases] = useState([]);\r\n    const handleChange = (e) => {\r\n        const {name,value} = e.target;\r\n        setCourseContent(prevValue => {\r\n            return {...prevValue,[name] : value}\r\n        })\r\n    }\r\n    const addCourse = () => {\r\n        console.log(courseContent);\r\n        setTestCases( prev => [...prev,courseContent]);\r\n        //setTestCases([...testContent,testCase]);\r\n        setCourseContent({\r\n            \"input\" : \"\",\r\n            \"output\" : \"\"\r\n        });\r\n        //setTestCases([]);\r\n        console.log(testCase);\r\n    }\r\n\r\n    const deleteCourse = (id) => {\r\n        setTestCases(prev => {\r\n            return prev.filter((testcase,index) => {\r\n                return index !== id;\r\n            })\r\n        })\r\n    }\r\n\r\n    \r\n\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <Navbar />\r\n            \r\n            <h3 className=\"Thead addNew\">Add New Course</h3>\r\n            <div className=\"row\">\r\n                <div>\r\n                    <h5 className=\"Thead\">New Course Name:</h5>\r\n                    <textarea name=\"input\" id=\"\" cols=\"30\" rows=\"2\" value = {courseContent.input} onChange = {handleChange}/>\r\n                    <Delete1 />\r\n                \r\n\r\n\r\n                <input type = \"button\" className = \"btn btn-primary mb-3 mt-3\" onClick = {addCourse} value = \"Add\"/>\r\n                <ul style = {{listStyle : \"none\"}}>\r\n                    {\r\n                    testCase.map((testcase,index) => (\r\n                        <li> <AddCourse2 key = {index} index = {index} del = {deleteCourse} input = {testcase.input} output = \"\" /></li>\r\n                    ))\r\n                    }\r\n                </ul> \r\n                <button className = \"btn btn-success\">Submit</button>\r\n                </div>\r\n                  \r\n            </div>\r\n            \r\n\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddCourse","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\AddQuiz.js",[],"C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\Examples.js",[],"C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\java\\Java2.js",["409"],"import React from 'react'\r\nimport Tutorial from '../Tutorial'\r\nimport {SiJava} from 'react-icons/si'\r\nimport icon from './java9.png'\r\nimport icon2 from './java1.png'\r\n\r\nconst Java1 = () => {\r\n    const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n          <Tutorial icons = {logo.Lname} name = \"JAVA\" language = \"java\" next=\"/Java3\" icon2={logo.Lname2}\r\n          theoryContent = {\r\n                   <p className=\"TutorialPadding\">\r\n                       <h3 className=\"Thead\">Java Methods<hr/></h3>\r\n                        <p>A method is a block of code that performs a specific task.</p>\r\n\r\n                      \r\n\r\n                       <h4 className=\"Thead\">Declaring a Java Method<hr/></h4>\r\n                       The syntax to declare a method is:\r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`returnType methodName() {\r\n  // method body\r\n}\r\n`}\r\n                            </pre>      \r\n                         </div>\r\n    Here,\r\n   <p> 1. returnType - It specifies what type of value a method returns For example if a method has an int return type then it returns an integer value.If the method does not return a value, its return type is void.</p>\r\n   <p> 2. methodName - It is an identifier that is used to refer to the particular method in a program.</p>\r\n<p>3. method body - It includes the programming statements that are used to perform some tasks. The method body is enclosed inside the curly braces { }.</p>\r\n<p>For example,</p>\r\n\r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`int addNumbers() {\r\n// code\r\n}\r\n`}\r\n                            </pre>      \r\n                         </div>\r\n\r\n                         \r\n                       <p> In the above example, the name of the method is adddNumbers(). And, the return type is int. We will learn more about return types later in this tutorial.</p>\r\n\r\n                       <h4 className=\"Thead\">Static vs. Non-Static<hr/></h4>\r\n                       <p>You will often see Java programs that have either static or public attributes and methods.\r\n\r\nIn the example above, we created a static method, which means that it can be accessed without creating an object of the class, unlike public, which can only be accessed by objects:</p>\r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`public class Main {\r\n  // Static method\r\n  static void myStaticMethod() {\r\n    System.out.println(\"Static methods can be called without creating objects\");\r\n  }\r\n\r\n  // Public method\r\n  public void myPublicMethod() {\r\n    System.out.println(\"Public methods must be called by creating objects\");\r\n  }\r\n\r\n  // Main method\r\n  public static void main(String[] args) {\r\n    myStaticMethod(); // Call the static method\r\n    // myPublicMethod(); This would compile an error\r\n\r\n    Main myObj = new Main(); // Create an object of Main\r\n    myObj.myPublicMethod(); // Call the public method on the object\r\n  }\r\n}\r\n  // method body\r\n}\r\n`}\r\n                            </pre>      \r\n                         </div>\r\n\r\n\r\n\r\n\r\n                         <h4 className=\"Thead\">Access Methods With an Object<hr/></h4>\r\n                       <p>Create a Car object named myCar. Call the fullThrottle() and speed() methods on the myCar object, and run the program:</p>\r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`public class Main {\r\n  // Static method\r\n  static void myStaticMethod() {\r\n    System.out.println(\"Static methods can be called without creating objects\");\r\n  }\r\n\r\n  // Public method\r\n  public void myPublicMethod() {\r\n    System.out.println(\"Public methods must be called by creating objects\");\r\n  }\r\n\r\n  // Main method\r\n  public static void main(String[] args) {\r\n    myStaticMethod(); // Call the static method\r\n    // myPublicMethod(); This would compile an error\r\n\r\n    Main myObj = new Main(); // Create an object of Main\r\n    myObj.myPublicMethod(); // Call the public method on the object\r\n  }\r\n}\r\n  // method body\r\n}\r\n`}\r\n                            </pre>      \r\n                         </div>\r\n\r\n                   </p> \r\n\r\n                    \r\n\r\n                }\r\n                />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Java1\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\python\\Python3.js",["410"],"import React from 'react'\r\nimport {SiPython} from 'react-icons/si'\r\nimport Tutorial from '../Tutorial'\r\nimport icon from './py1.png'\r\nimport icon2 from './py3.png'\r\n\r\nconst Python1 = () => {\r\n    const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"PYTHON\" language = \"python\"  next=\"/Python4\" icon2={logo.Lname2}\r\n            theoryContent={\r\n                <div className=\"TutorialPadding\">\r\n                    <h4 className=\"Thead\">Python Data Types</h4>\r\n                    In this tutorial, you will learn about different data types you can use in Python.<br/><br/>\r\n                    <h4 className=\"Thead\">Data Types in Python</h4>\r\n                    Every value in Python has a datatype. Since everything is an object in Python programming, data types are actually classes and variables are instance (object) of these classes.<br/><br/>\r\n                    There are various data types in Python. Some of the important types are listed below.<br/>\r\n                    <hr/>\r\n                    <h4 className=\"Thead\">Python Numbers</h4>\r\n                    Integers, floating point numbers and complex numbers fall under Python numbers category. They are defined as <code>int</code>,<code>float</code> and <code>complex</code> classes in Python.<br/><br/>\r\n                    We can use the <code>type()</code> function to know which class a variable or a value belongs to. Similarly, the <code>isinstance()</code> function is used to check if an object belongs to a particular class.\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`a = 5\r\nprint(a, \"is of type\", type(a))\r\n\r\na = 2.0\r\nprint(a, \"is of type\", type(a))\r\n\r\na = 1+2j\r\nprint(a, \"is complex number?\", isinstance(1+2j,complex))`}                \r\n                        </pre>\r\n                    </div> \r\n\r\n                    <h4 className=\"Thead\">Output</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`5 is of type <class 'int'>\r\n2.0 is of type <class 'float'>\r\n(1+2j) is complex number? True`}                \r\n                        </pre>\r\n                    </div> \r\n                    Integers can be of any length, it is only limited by the memory available.<br/><br/>\r\n                    A floating-point number is accurate up to 15 decimal places. Integer and floating points are separated by decimal points. <code>1</code> is an integer, <code>1.0</code> is a floating-point number.\r\n                    Complex numbers are written in the form, x + yj, where x is the real part and y is the imaginary part. Here are some examples.\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`>>> a = 1234567890123456789\r\n>>> a\r\n1234567890123456789\r\n>>> b = 0.1234567890123456789\r\n>>> b\r\n0.12345678901234568\r\n>>> c = 1+2j\r\n>>> c\r\n(1+2j)`}                \r\n                        </pre>\r\n                    </div> \r\n                    Notice that the <code>float</code> variable b got truncated.\r\n                    <hr/>\r\n                    <h4 className=\"Thead\">Python List</h4>\r\n                    List is an ordered sequence of items. It is one of the most used datatype in Python and is very flexible. All the items in a list do not need to be of the same type.<br/><br/><hr/>\r\n                    Declaring a list is pretty straight forward. Items separated by commas are enclosed within brackets <code>[ ]</code>.\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        a = [1, 2.2, 'python']            \r\n                        </pre>\r\n                    </div> \r\n                    We can use the slicing operator <code>[ ]</code> to extract an item or a range of items from a list. The index starts from 0 in Python.<br/><br/>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`a = [5,10,15,20,25,30,35,40]\r\n\r\n# a[2] = 15\r\nprint(\"a[2] = \", a[2])\r\n\r\n# a[0:3] = [5, 10, 15]\r\nprint(\"a[0:3] = \", a[0:3])\r\n\r\n# a[5:] = [30, 35, 40]\r\nprint(\"a[5:] = \", a[5:])`}                \r\n                        </pre>\r\n                    </div>\r\n\r\n                    <h4 className=\"Thead\">Output</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        a[2] =  15<br/>\r\n                        a[0:3] =  [5, 10, 15]<br/>\r\n                        a[5:] =  [30, 35, 40]              \r\n                        </pre>\r\n                    </div>  \r\n                    Lists are mutable, meaning, the value of elements of a list can be altered.\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        a = [1, 2, 3]<br/>\r\n                        a[2] = 4<br/>\r\n                        print(a)              \r\n                        </pre>\r\n                    </div>\r\n                    <h4 className=\"Thead\">Output</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                            [1, 2, 4]\r\n                         </pre>   \r\n                    </div> \r\n                    <hr/>\r\n                    <h4 className=\"Thead\">Python Tuple</h4>\r\n                    Tuple is an ordered sequence of items same as a list. The only difference is that tuples are immutable. Tuples once created cannot be modified.<br/><br/>\r\n                    Tuples are used to write-protect data and are usually faster than lists as they cannot change dynamically.<br/>\r\n                    It is defined within parentheses <code>()</code> where items are separated by commas.\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        t = (5,'program', 1+3j)\r\n                         </pre>   \r\n                    </div>\r\n\r\n                    We can use the slicing operator <code>[]</code> to extract items but we cannot change its value.\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`t = (5,'program', 1+3j)\r\n\r\n# t[1] = 'program'\r\nprint(\"t[1] = \", t[1])\r\n\r\n# t[0:3] = (5, 'program', (1+3j))\r\nprint(\"t[0:3] = \", t[0:3])\r\n\r\n# Generates error\r\n# Tuples are immutable\r\nt[0] = 10`}\r\n                         </pre>   \r\n                    </div>\r\n                     <h4 className=\"Thead\">Output</h4>\r\n                     <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`t[1] =  program\r\nt[0:3] =  (5, 'program', (1+3j))\r\nTraceback (most recent call last):\r\nFile \"test.py\", line 11, in <module>\r\nt[0] = 10\r\nTypeError: 'tuple' object does not support item assignment `}\r\n                         </pre>   \r\n                    </div>   \r\n                    <hr/>\r\n                    <h4 className=\"Thead\">Python Strings</h4>\r\n                    String is sequence of Unicode characters. We can use single quotes or double quotes to represent strings. Multi-line strings can be denoted using triple quotes, <code>'''</code> or <code>\"\"\"</code>.\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`s = \"This is a string\"\r\nprint(s)\r\ns = '''A multiline\r\nstring'''\r\nprint(s)`}\r\n                        </pre>   \r\n                    </div>\r\n                     <h4 className=\"Thead\">Output</h4>\r\n                     <div className=\"card card-body\">\r\n                        <pre>\r\n                        This is a string<br/>\r\n                        A multiline<br/>\r\n                        string   \r\n                        </pre>   \r\n                    </div>  \r\n                    Just like a list and tuple, the slicing operator <code>[ ]</code> can be used with strings. Strings, however, are immutable.<br/><br/>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`s = 'Hello world!'\r\n\r\n# s[4] = 'o'\r\nprint(\"s[4] = \", s[4])\r\n\r\n# s[6:11] = 'world'\r\nprint(\"s[6:11] = \", s[6:11])\r\n\r\n# Generates error\r\n# Strings are immutable in Python\r\ns[5] ='d'`}\r\n                        </pre>   \r\n                    </div>\r\n                    <h4 className=\"Thead\">Output</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`s[4] =  o\r\ns[6:11] =  world\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 11, in <module>\r\nTypeError: 'str' object does not support item assignment`}\r\n                        </pre>   \r\n                    </div>\r\n                    <hr/>\r\n                    <h4 className=\"Thead\">Python Set</h4>\r\n                    Set is an unordered collection of unique items. Set is defined by values separated by comma inside braces <code>{ }</code>. Items in a set are not ordered.<br/>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                         {`a = {5,2,3,1,4}\r\n\r\n# printing set variable\r\nprint(\"a = \", a)\r\n\r\n# data type of variable a\r\nprint(type(a))`}  \r\n                        </pre>   \r\n                    </div>\r\n                    <h4 className=\"Thead\">Output</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                       {` a =  {1, 2, 3, 4, 5}\r\n<class 'set'>`}\r\n                        </pre>   \r\n                    </div>\r\n                    We can perform set operations like union, intersection on two sets. Sets have unique values. They eliminate duplicates.\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`a = {1,2,2,3,3,3}\r\nprint(a) `}\r\n                        </pre>   \r\n                    </div>\r\n                    <h4 className=\"Thead\">Output</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                            {`{1, 2, 3}`}\r\n                        </pre>   \r\n                    </div>\r\n                    Since, set are unordered collection, indexing has no meaning. Hence, the slicing operator <code>[]</code> does not work.<br/> <br/>  \r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                       {` >>> a = {1,2,3}\r\n>>> a[1]\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 301, in runcode\r\n  File \"<interactive input>\", line 1, in <module>\r\nTypeError: 'set' object does not support indexing `}\r\n                        </pre>   \r\n                    </div>\r\n                    <hr/><hr/>\r\n                    <h4 className=\"Thead\">Python Dictionary</h4>\r\n                    Dictionary is an unordered collection of key-value pairs.<br/>\r\n                    It is generally used when we have a huge amount of data. Dictionaries are optimized for retrieving data. We must know the key to retrieve the value.<br/>\r\n                    In Python, dictionaries are defined within braces <code>{}</code> with each item being a pair in the form <code>key:value</code>. Key and value can be of any type.\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`>>> d = {1:'value','key':2}\r\n>>> type(d)\r\n<class 'dict'>`}\r\n                        </pre>   \r\n                    </div>\r\n                    We use key to retrieve the respective value. But not the other way around.\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                       {`d = {1:'value','key':2}\r\nprint(type(d))\r\n\r\nprint(\"d[1] = \", d[1]);\r\n\r\nprint(\"d['key'] = \", d['key']);\r\n\r\n# Generates error\r\nprint(\"d[2] = \", d[2]);`}\r\n                         </pre>   \r\n                    </div>\r\n                    <h4 className=\"Thead\">Output</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`<class 'dict'>\r\nd[1] =  value\r\nd['key'] =  2\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 9, in <module>\r\nKeyError: 2`}\r\n\r\n                         </pre>   \r\n                    </div>\r\n                    <hr/>\r\n                    <h4 className=\"Thead\">Conversion between data types</h4>\r\n                    We can convert between different data types by using different type conversion functions like <code>int()</code>, <code>float()</code>, <code>str()</code>, etc.<br/>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`>>>`}float(5)<br/>\r\n                        5.0\r\n                         </pre>   \r\n                    </div>\r\n                    Conversion from float to int will truncate the value (make it closer to zero).\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                       {`>>> int(10.6)\r\n10\r\n>>> int(-10.6)\r\n-10`}\r\n                         </pre>   \r\n                    </div>\r\n                    Conversion to and from string must contain compatible values.\r\n                    <br/>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`>>> float('2.5')\r\n2.5\r\n>>> str(25)\r\n'25'\r\n>>> int('1p')\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 301, in runcode\r\n  File \"<interactive input>\", line 1, in <module>\r\nValueError: invalid literal for int() with base 10: '1p' `}\r\n                         </pre>   \r\n                    </div>\r\n\r\n                    We can even convert one sequence to another.<br/>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`>>> set([1,2,3])\r\n{1, 2, 3}\r\n>>> tuple({5,6,7})\r\n(5, 6, 7)\r\n>>> list('hello')\r\n['h', 'e', 'l', 'l', 'o'] `} \r\n                         </pre>   \r\n                    </div>\r\n                    To convert to dictionary, each element must be a pair:<br/>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`>>> dict([[1,2],[3,4]])\r\n{1: 2, 3: 4}\r\n>>> dict([(3,26),(4,44)])\r\n{3: 26, 4: 44}`}\r\n                         </pre>   \r\n                    </div>\r\n                </div>          \r\n            }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Python1\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\python\\Python4.js",["411"],"import React from 'react'\r\nimport {SiPython} from 'react-icons/si'\r\nimport Tutorial from '../Tutorial'\r\nimport icon from './py1.png'\r\nimport icon2 from './py3.png'\r\n\r\nconst Python1 = () => {\r\n    const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"PYTHON\" language = \"python\"  next=\"/Python4\" icon2={logo.Lname2}\r\n            theoryContent={\r\n                <div className=\"TutorialPadding\">\r\n                    <h4 className=\"Thead\">Python if...else Statement</h4>\r\n                    In this article, you will learn to create decisions in a Python program using different forms of if..else statement.<br/><hr/>\r\n                    <h4 className=\"Thead\">What is if...else statement in Python?</h4>\r\n                    Decision making is required when we want to execute a code only if a certain condition is satisfied.<br/>\r\n                    The <code>if…elif…else</code> statement is used in Python for decision making.<br/>\r\n                    <h4 className=\"Thead\">Python if Statement Syntax</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`if test expression:\r\n    statement(s)`}\r\n\r\n                         </pre>   \r\n                    </div>\r\n                    Here, the program evaluates the <code>test expression</code> and will execute statement(s) only if the test expression is <code>True</code>.<br/><br/>\r\n                    If the test expression is <code>False</code>, the statement(s) is not executed.\r\n                    In Python, the body of the <code>if</code> statement is indicated by the indentation. The body starts with an indentation and the first unindented line marks the end.<br/><br/>\r\n                    Python interprets non-zero values as <code>True</code>. <code>None</code> and <code>0</code> are interpreted as False.<br/><br/>\r\n                    <h4 className=\"Thead\">Example: Python if Statement</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`# If the number is positive, we print an appropriate message\r\n\r\nnum = 3\r\nif num > 0:\r\n    print(num, \"is a positive number.\")\r\nprint(\"This is always printed.\")\r\n\r\nnum = -1\r\nif num > 0:\r\n    print(num, \"is a positive number.\")\r\nprint(\"This is also always printed.\")`}\r\n                         </pre>   \r\n                    </div>\r\n                    When you run the program, the output will be:<br/><br/>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        3 is a positive number<br/>\r\n                        This is always printed<br/>\r\n                        This is also always printed\r\n                         </pre>   \r\n                    </div>\r\n                    In the above example, <code>num {`>`} 0</code> is the test expression.<br/><br/>\r\n                    The body of <code>if</code> is executed only if this evaluates to <code>True</code>.<br/><br/>\r\n                    When the variable <code>num</code> is equal to 3, test expression is true and statements inside the body of <code>if</code> are executed.<br/><br/>\r\n                    If the variable <code>num</code> is equal to -1, test expression is false and statements inside the body of <code>if</code> are skipped.<br/><br/>\r\n                    The <code>print()</code> statement falls outside of the <code>if</code> block (unindented). Hence, it is executed regardless of the test expression.<br/><br/>\r\n                    <hr/>\r\n                    <h4 className=\"Thead\">Python if...else Statement</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`if test expression:\r\n    Body of if\r\nelse:\r\n    Body of else`}\r\n\r\n                         </pre>   \r\n                    </div>\r\n                    The <code>if..else</code> statement evaluates <code>test expression</code> and will execute the body of <code>if</code> only when the test condition is <code>True</code>.<br/>\r\n                    If the condition is <code>False</code>, the body of <code>else</code> is executed. Indentation is used to separate the blocks.\r\n                    <h4 className=\"Thead\">Example of if...else</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                       {` # Program checks if the number is positive or negative\r\n# And displays an appropriate message\r\n\r\nnum = 3\r\n\r\n# Try these two variations as well. \r\n# num = -5\r\n# num = 0\r\n\r\nif num >= 0:\r\n    print(\"Positive or Zero\")\r\nelse:\r\n    print(\"Negative number\")`}\r\n\r\n                         </pre>   \r\n                    </div>\r\n                    <h4 className=\"Thead\">Output</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                            Positive or Zero\r\n                         </pre>   \r\n                    </div>\r\n                    In the above example, when <code>num</code> is equal to 3, the test expression is true and the body of <code>if</code> is executed and the <code>body</code> of else is skipped.<br/><br/>\r\n                    If <code>num</code> is equal to -5, the test expression is false and the body of <code>else</code> is executed and the body of <code>if</code> is skipped.<br/><br/>\r\n                    If <code>num</code> is equal to 0, the test expression is true and body of <code>if</code> is executed and body of else is skipped.<br/><hr/>              \r\n                    <h4 className=\"Thead\">Python if...elif...else Statement</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`if test expression:\r\n    Body of if\r\nelif test expression:\r\n    Body of elif\r\nelse: \r\n    Body of else`}\r\n\r\n                         </pre>   \r\n                    </div>\r\n                    The <code>elif</code> is short for else if. It allows us to check for multiple expressions.<br/><br/>\r\n                    If the condition for <code>if</code> is <code>False</code>, it checks the condition of the next <code>elif</code> block and so on.<br/><br/>\r\n                    If all the conditions are <code>False</code>, the body of else is executed.<br/><br/>\r\n                    Only one block among the several <code>if...elif...else</code> blocks is executed according to the condition.<br/><br/>\r\n                    The <code>if</code> block can have only one <code>else</code> block. But it can have multiple <code>elif</code> blocks.<br/><hr/>\r\n                    <h4 className=\"Thead\">Example of if...elif...else</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`'''In this program, \r\nwe check if the number is positive or\r\nnegative or zero and \r\ndisplay an appropriate message'''\r\n\r\nnum = 3.4\r\n\r\n# Try these two variations as well:\r\n# num = 0\r\n# num = -4.5\r\n\r\nif num > 0:\r\n    print(\"Positive number\")\r\nelif num == 0:\r\n    print(\"Zero\")\r\nelse:\r\n    print(\"Negative number\")`}\r\n                         </pre>   \r\n                    </div>\r\n                    When variable <code>num</code> is positive, <code>Positive number</code> is printed.<br/><br/>\r\n                    If <code>num</code> is equal to 0, <code>Zero</code> is printed.<br/><br/>\r\n                    If <code>num</code> is negative, <code>Negative number</code> is printed.<br/><br/><hr/>\r\n                    <h4 className=\"Thead\">Python Nested if statements</h4>\r\n                    We can have a <code>if...elif...else</code> statement inside another <code>if...elif...else</code> statement. This is called nesting in computer programming.<br/><br/>\r\n                    Any number of these statements can be nested inside one another. Indentation is the only way to figure out the level of nesting. They can get confusing, so they must be avoided unless necessary.<br/>\r\n                    <h4 className=\"Thead\">Python Nested if Example</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`'''In this program, we input a number\r\ncheck if the number is positive or\r\nnegative or zero and display\r\nan appropriate message\r\nThis time we use nested if statement'''\r\n\r\nnum = float(input(\"Enter a number: \"))\r\nif num >= 0:\r\n    if num == 0:\r\n        print(\"Zero\")\r\n    else:\r\n        print(\"Positive number\")\r\nelse:\r\n    print(\"Negative number\")`}\r\n                         </pre>   \r\n                    </div>\r\n                    <h4 className=\"Thead\">Output1</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        Enter a number: 5<br/>\r\n                        Positive number\r\n                         </pre>   \r\n                    </div>\r\n                    <h4 className=\"Thead\">Output2</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        Enter a number: -1<br/>\r\n                        Negative number\r\n                         </pre>   \r\n                    </div>\r\n                    <h4 className=\"Thead\">Output3</h4>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        Enter a number: 0<br/>\r\n                        Zero\r\n                         </pre>   \r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n                </div>    \r\n            }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Python1\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\python\\Python2.js",["412"],"import React from 'react'\r\nimport {SiPython} from 'react-icons/si'\r\nimport Tutorial from '../Tutorial'\r\nimport icon from './py1.png'\r\nimport icon2 from './py3.png'\r\n\r\nconst Python1 = () => {\r\n    const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"PYTHON\" language = \"python\"  next=\"/Python3\" icon2={logo.Lname2}\r\n            theoryContent={\r\n                <div className=\"TutorialPadding\">\r\n                    <h4 className=\"Thead\">Python Statement, Indentation and Comments</h4>\r\n                    In this tutorial, you will learn about Python statements, why indentation is important and use of comments in programming.<br/><br/>\r\n                    <h4 className=\"Thead\">Python Statement</h4>\r\n                    Instructions that a Python interpreter can execute are called statements. For example, <code>a = 1</code> is an assignment statement. <code>if</code> statement, <code>for</code> statement, <code>while</code> statement, etc. are other kinds of statements which will be discussed later.\r\n                    <h4 className=\"Thead\">Multi-line statement</h4>\r\n                    In Python, the end of a statement is marked by a newline character. But we can make a statement extend over multiple lines with the line continuation character (\\). For example:\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        a = 1 + 2 + 3 + \\<br/>\r\n                            4 + 5 + 6 + \\<br/>\r\n                            7 + 8 + 9            \r\n                        </pre>\r\n                    </div>\r\n                    This is an explicit line continuation. In Python, line continuation is implied inside parentheses <code>( )</code>, brackets <code>[ ]</code>, and braces <code>{ }</code>. For instance, we can implement the above multi-line statement as:\r\n                    <div className=\"card card-body\">\r\n                                <pre>\r\n                                a = (1 + 2 + 3 +<br/>\r\n                                    4 + 5 + 6 +<br/>\r\n                                    7 + 8 + 9)\r\n                                </pre>\r\n                            </div>\r\n                            Here, the surrounding parentheses <code>( )</code> do the line continuation implicitly. Same is the case with<code> [ ]</code> and <code>{ }</code>. For example:    \r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                {`colors = ['red',\r\n          'blue',\r\n          'green']`}\r\n                                </pre>\r\n                            </div>                \r\n                            We can also put multiple statements in a single line using semicolons, as follows:\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                a = 1; b = 2; c = 3\r\n                                </pre>\r\n                            </div>\r\n                            <hr/>\r\n                            <h4 className=\"Thead\">Python Indentation</h4>\r\n                            Most of the programming languages like C, C++, and Java use braces <code>{ }</code> to define a block of code. Python, however, uses indentation.<br/><br/>\r\n                            A code block (body of a function, loop, etc.) starts with indentation and ends with the first unindented line. The amount of indentation is up to you, but it must be consistent throughout that block.<br/><br/>\r\n                            Generally, four whitespaces are used for indentation and are preferred over tabs. Here is an example.               \r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                               {` for i in range(1,11):\r\n    print(i)\r\n    if i == 5:\r\n        break`}\r\n                                </pre>\r\n                            </div>\r\n                            The enforcement of indentation in Python makes the code look neat and clean. This results in Python programs that look similar and consistent.<br/><br/>\r\n                            Indentation can be ignored in line continuation, but it's always a good idea to indent. It makes the code more readable. For example:<br/>\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                {`if True:\r\n    print('Hello')\r\n    a = 5`}\r\n                                </pre>\r\n                            </div>\r\n                             and<br/>\r\n                             <div className=\"card card-body\">\r\n                                <pre>\r\n                                if True: print('Hello'); a = 5\r\n                                </pre>\r\n                            </div>           \r\n                            both are valid and do the same thing, but the former style is clearer.\r\n                            Incorrect indentation will result in <code>IndentationError</code>.          \r\n                            <br/><hr/>\r\n                            <h4 className=\"Thead\">Python Comments</h4> \r\n                            Comments are very important while writing a program. They describe what is going on inside a program, so that a person looking at the source code does not have a hard time figuring it out.<br/><br/>\r\n                            You might forget the key details of the program you just wrote in a month's time. So taking the time to explain these concepts in the form of comments is always fruitful.<br/><br/>\r\n                            In Python, we use the hash (#) symbol to start writing a comment.<br/><br/>\r\n                            It extends up to the newline character. Comments are for programmers to better understand a program. Python Interpreter ignores comments.<br/>\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                {`#This is a comment\r\n#print out Hello\r\nprint('Hello')`}\r\n                                </pre>\r\n                            </div>        \r\n                            <hr/>\r\n                            <h4 className=\"Thead\">Multi-line comments</h4>\r\n                            We can have comments that extend up to multiple lines. One way is to use the hash(#) symbol at the beginning of each line. For example:<br/>\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                {`#This is a long comment\r\n#and it extends\r\n#to multiple lines`}\r\n                                </pre>\r\n                            </div>\r\n                            Another way of doing this is to use triple quotes, either <code>'''</code> or <code>\"\"\"</code>.<br/>\r\n                            These triple quotes are generally used for multi-line strings. But they can be used as a multi-line comment as well. Unless they are not docstrings, they do not generate any extra code.<br/>           \r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                {`\"\"\"This is also a\r\nperfect example of\r\nmulti-line comments\"\"\"`}\r\n                                </pre>\r\n                            </div>  \r\n                            <hr/>\r\n                                      \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                </div>    \r\n            }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Python1\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\csharp\\Csharp3.js",["413"],"\r\nimport React from 'react'\r\nimport {SiCsharp} from 'react-icons/si'\r\nimport Tutorial from '../Tutorial'\r\nimport icon from './c1.png'\r\nimport icon2 from './c2.png'\r\n\r\nconst Csharp1 = () => {\r\n    const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"C-SHARP\" language = \"Csharp\" next=\"/Csharp4\" icon2={logo.Lname2}\r\n             theoryContent = {\r\n                <p>\r\n                    <h4>C# Operators<hr/></h4>\r\n                     <p>Operators are symbols that are used to perform operations on operands. Operands may be variables and/or constants.</p>\r\n\r\n\r\n                    <h5>1. Basic Assignment Operator<hr/></h5>\r\n                    Basic assignment operator (=) is used to assign values to variables. For example,\r\n                    <div class=\"card card-body\">\r\n                         <pre>\r\n                             {`double x;\r\nx = 50.05;`}\r\n                         </pre>\r\n                         </div>\r\n\r\n <p>Here, 50.05 is assigned to x.</p>\r\n                             \r\n\r\n                    <h5>2. Arithmetic Operators<hr/></h5>\r\n                    Arithmetic operators are used to perform arithmetic operations such as addition, subtraction, multiplication, division, etc.\r\n                    For example, \r\n                    <div class=\"card card-body\">\r\n                         <pre>\r\n                             {`int x = 5;\r\nint y = 10;\r\nint z = x + y;// z = 15\r\n\r\n`}\r\n                         </pre>      \r\n                      </div>\r\n\r\n\r\n<h5>3. Relational Operators<hr/></h5>\r\nRelational operators are used to check the relationship between two operands. If the relationship is true the result will be true, otherwise it will result in false.      \r\n                    <div class=\"card card-body\">\r\n                         <pre>\r\n                             {`C# Relational Operators\r\nOperator\tOperator Name\tExample\r\n==\tEqual to\t6 == 4 evaluates to false\r\n>\tGreater than\t3 > -1 evaluates to true\r\n<\tLess than\t5 < 3 evaluates to false\r\n>=\tGreater than or equal to\t4 >= 4 evaluates to true\r\n<=\tLess than or equal to\t5 <= 3 evaluates to false\r\n!=\tNot equal to\t10 != 2 evaluates to true\r\n`}\r\n                         </pre>      \r\n                      </div>\r\n\r\n                    \r\n\r\n                    \r\n                      \r\n                    \r\n                     \r\n                </p> \r\n             }\r\n             />\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Csharp1\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\python\\Python1.js",["414"],"import React from 'react'\r\nimport {SiPython} from 'react-icons/si'\r\nimport Tutorial from '../Tutorial'\r\nimport icon from './py1.png'\r\nimport icon2 from './py3.png'\r\n\r\nconst Python1 = () => {\r\n  const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"PYTHON\" language = \"python\"  next=\"/Python2\" icon2={logo.Lname2}\r\n            theoryContent={\r\n                <div className=\"TutorialPadding\">\r\n                    <h4 className=\"Thead\">Python Keywords and Identifiers</h4>\r\n                    In this tutorial, you will learn about keywords (reserved words in Python) and identifiers (names given to variables, functions, etc.)\r\n                    <br/><br/>\r\n                    <h4 className=\"Thead\">Python Keywords</h4>\r\n                    Keywords are the reserved words in Python.<br/>\r\n                    We cannot use a keyword as a variable name, function name or any other identifier. They are used to define the syntax and structure of the Python language.<br/>\r\n                    In Python, keywords are case sensitive.<br/>\r\n                    There are 33 keywords in Python 3.7. This number can vary slightly over the course of time.<br/>\r\n                    All the keywords except <code>True</code>,<code> False</code> and <code>None</code> are in lowercase and they must be written as they are. The list of all the keywords is given below.<br/>\r\n                    <div class=\"card card-body\">\r\n                            <pre>\r\n                            <table class=\"table table-striped\">\r\n                                  <tbody>\r\n                                    <tr>\r\n                                      <td><code>False</code></td>\r\n                                      <td><code>None</code></td>\r\n                                      <td><code>True</code></td>\r\n                                      <td><code>and</code></td>\r\n                                      <td><code>as</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>assert</code></td>\r\n                                      <td><code>async</code></td>\r\n                                      <td><code>await</code></td>\r\n                                      <td><code>break</code></td>\r\n                                      <td><code>class</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>continue</code></td>\r\n                                      <td><code>def</code></td>\r\n                                      <td><code>del</code></td>\r\n                                      <td><code>elif</code></td>\r\n                                      <td><code>else</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>except</code></td>\r\n                                      <td><code>finally</code></td>\r\n                                      <td><code>for</code></td>\r\n                                      <td><code>from</code></td>\r\n                                      <td><code>global</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>if</code></td>\r\n                                      <td><code>import</code></td>\r\n                                      <td><code>in</code></td>\r\n                                      <td><code>is</code></td>\r\n                                      <td><code>lambda</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>nonlocal</code></td>\r\n                                      <td><code>not</code></td>\r\n                                      <td><code>or</code></td>\r\n                                      <td><code>pass</code></td>\r\n                                      <td><code>raise</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>return</code></td>\r\n                                      <td><code>try</code></td>\r\n                                      <td><code>while</code></td>\r\n                                      <td><code>with</code></td>\r\n                                      <td><code>yield</code></td>\r\n                                    </tr> \r\n                                  </tbody>\r\n                                </table>\r\n                            </pre>\r\n                           </div>\r\n                            <hr/>\r\n                            <h4 className=\"Thead\">Python Identifiers</h4>\r\n                            An identifier is a name given to entities like class, functions, variables, etc. It helps to differentiate one entity from another.<br/>\r\n                            <h4 className=\"Thead\">Rules for writing identifiers</h4>\r\n                            <ol>\r\n                                <li>Identifiers can be a combination of letters in lowercase (a to z) or uppercase (A to Z) or digits (0 to 9) or an underscore _. Names like myClass, var_1 and print_this_to_screen, all are valid example.</li>\r\n                                <li>An identifier cannot start with a digit. 1variable is invalid, but variable1 is a valid name.</li>\r\n                                <li>Keywords cannot be used as identifiers</li>\r\n                             </ol> \r\n                             <div className=\"card card-body\">\r\n                                <pre>\r\n                                global = 1\r\n                                </pre>\r\n                            </div>\r\n                            <h4>Output</h4>\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                               {` File \"<interactive input>\", line 1\r\n    global = 1\r\n           ^\r\nSyntaxError: invalid syntax`}\r\n                                </pre>\r\n                            </div>\r\n                            4.We cannot use special symbols like !, @, #, $, % etc. in our identifier.\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                    a@ = 0\r\n                                </pre>\r\n                            </div> \r\n                            <h4>Output</h4>\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                               {`File \"<interactive input>\", line 1\r\n    a@ = 0\r\n     ^\r\nSyntaxError: invalid syntax`}\r\n                                </pre>\r\n                            </div>\r\n                            5.An identifier can be of any length.\r\n                            <hr/>\r\n                            <h4 className=\"Thead\">Things to Remember</h4>\r\n                            Python is a case-sensitive language. This means, <code>Variable</code> and <code>variable</code> are not the same.<br/><br/>\r\n                            Always give the identifiers a name that makes sense. While <code>c = 10</code> is a valid name, writing <code>count = 10</code> would make more sense, and it would be easier to figure out what it represents when you look at your code after a long gap.<br/><br/>\r\n                            Multiple words can be separated using an underscore, like <code>this_is_a_long_variable</code>.\r\n\r\n                </div>    \r\n            }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Python1\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\csharp\\Csharp4.js",["415"],"\r\nimport React from 'react'\r\nimport {SiCsharp} from 'react-icons/si'\r\nimport Tutorial from '../Tutorial'\r\nimport icon from './c1.png'\r\nimport icon2 from './c2.png'\r\n\r\nconst Csharp1 = () => {\r\n    const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"C-SHARP\" language = \"Csharp\" next=\"/Csharp4\" icon2={logo.Lname2}\r\n             theoryContent = {\r\n                <p>\r\n                    <h4>C# Basic Input and Output<hr/></h4>\r\n                     <p>In this tutorial, we will learn how to take input from user and and display output in C# using various methods</p>\r\n\r\n\r\n                    <h5>C# Output<hr/></h5>\r\n                    In order to output something in C#, we can use\r\n                    <div class=\"card card-body\">\r\n                         <pre>\r\n                             {`System.Console.WriteLine() OR\r\nSystem.Console.Write()`}\r\n                         </pre>\r\n                         </div>\r\n\r\n <p>Here, System is a namespace, Console is a class within namespace System and WriteLine and Write are methods of class Console.\r\n\r\n</p>\r\n                             \r\n\r\n                    <h5>Example 1: Printing String using WriteLine()<hr/></h5>\r\n                 \r\n                    <div class=\"card card-body\">\r\n                         <pre>\r\n                             {`using System;\r\n \r\n namespace Sample\r\n {\r\n     class Test\r\n     {\r\n         public static void Main(string[] args)\r\n         {\r\n             Console.WriteLine(\"C# is cool\");\r\n         }\r\n     }\r\n }\r\n \r\n`}\r\n                         </pre>      \r\n                      </div>\r\n\r\n\r\n<h5>Difference between WriteLine() and Write() method<hr/></h5>\r\nThe main difference between WriteLine() and Write() is that the Write() method only prints the string provided to it, while the WriteLine() method prints the string and moves to the start of next line as well.\r\n                    <h5>Example 2: How to use WriteLine() and Write() method?<hr/></h5>\r\n\r\n                    <div class=\"card card-body\">\r\n                         <pre>\r\n                             {`using System;\r\n \r\n namespace Sample\r\n {\r\n     class Test\r\n     {\r\n         public static void Main(string[] args)\r\n         {\r\n             Console.WriteLine(\"Prints on \");\r\n             Console.WriteLine(\"New line\");\r\n \r\n             Console.Write(\"Prints on \");\r\n             Console.Write(\"Same line\");\r\n         }\r\n     }\r\n }\r\n`}\r\n                         </pre>      \r\n                      </div>\r\n\r\n                    \r\n\r\n                    \r\n                      \r\n                    \r\n                     \r\n                </p> \r\n             }\r\n             />\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Csharp1\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\cpp\\Cpp3.js",["416"],"import React from 'react'\r\nimport Tutorial from '../Tutorial'\r\nimport {SiCplusplus} from 'react-icons/si'\r\nimport icon from './cpp2.png'\r\nimport icon2 from './cpp9.png'\r\n\r\nconst Cpp1 = () => {\r\n    const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"C++\" language = \"cpp\" next=\"/Cpp4\" icon2={logo.Lname2}\r\n                theoryContent = {\r\n                    <div className=\"TutorialPadding\">\r\n                        <h4 className=\"Thead\">C++ Basic Input/Output</h4>\r\n                        In this tutorial, we will learn to use the cin object to take input from the user, and the cout object to display output to the user with the help of examples.<br/><br/>\r\n                        <h4 className=\"Thead\">C++ Output</h4>\r\n                        In C++, <code>cout</code> sends formatted output to standard output devices, such as the screen. We use the <code>cout</code> object along with the <code>{'<<'}</code> operator for displaying output.<br/><hr/>\r\n                        <h4 className=\"Thead\">Example 1: String Output</h4>\r\n                        <div className=\"card card-body\">\r\n                            <pre>\r\n                                {`#include <iostream>\r\nusing namespace std;\r\n\r\nint main() {\r\n    // prints the string enclosed in double quotes\r\n    cout << \"This is C++ Programming\";\r\n    return 0;\r\n}`}\r\n                            </pre>\r\n                        </div>\r\n\r\n                        <h4 className=\"Thead\">Output</h4>\r\n                        <div className=\"card card-body\">\r\n                            This is C++ Programming\r\n                        </div>\r\n                        <h4 className=\"Thead\">How does this program work?</h4>\r\n                        <ul>\r\n                            <li>We first include the <code>iostream</code> header file that allows us to display output.</li>\r\n                            <li>The <code>cout</code> object is defined inside the <code>std</code> namespace. To use the <code>std</code> namespace, we used the <code>using namespace std;</code> statement.</li>\r\n                            <li>Every C++ program starts with the <code>main()</code> function. The code execution begins from the start of the <code>main()</code> function.</li>\r\n                            <li><code>cout</code> is an object that prints the string inside quotation marks <code>\" \"</code>. It is followed by the <code>{`<<`}</code> operator.</li>\r\n                            <li><code>return 0;</code> is the \"exit status\" of the main() function. The program ends with this statement, however, this statement is not mandatory.</li>\r\n                         </ul> \r\n                         <br/><hr/>\r\n\r\n                         <h4 className=\"Thead\">Example 2: Numbers and Characters Output</h4> \r\n                         To print the numbers and character variables, we use the same <code>cout</code> object but without using quotation marks.\r\n                        <div className=\"card card-body\">\r\n                            <pre>\r\n                            {`#include <iostream>\r\nusing namespace std;\r\n\r\nint main() {\r\n    int num1 = 70;\r\n    double num2 = 256.783;\r\n    char ch = 'A';\r\n\r\n    cout << num1 << endl;    // print integer\r\n    cout << num2 << endl;    // print double\r\n    cout << \"character: \" << ch << endl;    // print char\r\n    return 0;\r\n}`}\r\n                            </pre>    \r\n                        </div>\r\n                        <h4 className=\"Thead\">Output</h4>\r\n                        <div className=\"card card-body\">\r\n                            <pre>\r\n                            70<br/>\r\n                            256.783<br />\r\n                            character: A<br />\r\n                            </pre>     \r\n                        </div>\r\n                        <h4 className=\"Thead\">C++ Input</h4>\r\n                        In C++, <code>cin</code> takes formatted input from standard input devices such as the keyboard. We use the <code>cin</code> object along with the {`>>`} operator for taking input.\r\n                        <hr />\r\n                        <h4 className=\"Thead\">Example 3: Integer Input/Output</h4>\r\n                        <div className=\"card card-body\">\r\n                            <pre>\r\n                                {`\r\n                                #include <iostream>\r\nusing namespace std;\r\n\r\nint main() {\r\n    int num;\r\n    cout << \"Enter an integer: \";\r\n    cin >> num;   // Taking input\r\n    cout << \"The number is: \" << num;\r\n    return 0;\r\n}\r\n                                `}\r\n                             </pre>   \r\n                        </div>\r\n                        <h4 className=\"Thead\">Output</h4>\r\n                        <div className=\"card card-body\">\r\n                            <pre>\r\n                            Enter an integer: 70<br />\r\n                            The number is: 70\r\n                            </pre>    \r\n                        </div> \r\n                        In the program, we used\r\n                        <div className=\"card card-body\">\r\n                            cin{`>>`}num;\r\n                       </div> \r\n                       to take input from the user. The input is stored in the variable <code>num</code>. We use the <code>{'>>'}</code> operator with <code>cin</code> to take input.<br/><hr/>\r\n                       <h4 className=\"Thead\">C++ Taking Multiple Inputs</h4>\r\n                       <div className=\"card card-body\"> \r\n                            <pre>\r\n                           {` #include <iostream>\r\nusing namespace std;\r\n\r\nint main() {\r\n    char a;\r\n    int num;\r\n\r\n    cout << \"Enter a character and an integer: \";\r\n    cin >> a >> num;\r\n\r\n    cout << \"Character: \" << a << endl;\r\n    cout << \"Number: \" << num;\r\n\r\n    return 0;\r\n}`}\r\n                            </pre>    \r\n                       </div>    \r\n                        <h4 className=\"Thead\">Output</h4>\r\n                        <div className=\"card card-body\">\r\n                        <pre>\r\n                        Enter a character and an integer: F<br/>\r\n                        23<br/>\r\n                        Character: F<br/>\r\n                        Number: 23              \r\n                        </pre>\r\n                        </div>    \r\n\r\n                    </div>\r\n                }\r\n            \r\n                />\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    export default Cpp1","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\cpp\\Cpp1.js",["417"],"import React from 'react'\r\nimport Tutorial from '../Tutorial'\r\nimport {SiCplusplus} from 'react-icons/si'\r\nimport icon from './cpp2.png'\r\nimport icon2 from './cpp9.png'\r\n\r\nconst Cpp1 = () => {\r\n  const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"C++\" language = \"cpp\" next=\"/Cpp2\" icon2={logo.Lname2}\r\n                \r\n                theoryContent = {\r\n                   <div className=\"TutorialPadding\">\r\n                       <h3 className=\"Thead\">C++ Variables, Literals and Constants<hr/></h3>\r\n                        In this tutorial, we will learn about variables, literals, and constants in C++ with the help of examples.\r\n                       <h4>C++ Variables</h4>\r\n                       In programming, a variable is a container (storage area) to hold data.To indicate the storage area, each variable should be given a unique name (identifier). For example, \r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`int age = 14;`}\r\n                            </pre>      \r\n                         </div>\r\n                        Here, <code>age</code> is a variable of the <code>int</code> data type, and we have assigned an integer value 14 to it.\r\n                        The value of a variable can be changed, hence the name variable.\r\n                        <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`int age = 14;   // age is 14\r\nage = 17;       // age is 17`}\r\n                            </pre>      \r\n                        </div>\r\n\r\n                        <h4 className=\"Thead\">Rules for Naming a variable</h4>\r\n                        <ol>\r\n                            <li>A variable name can only have alphabets, numbers, and the underscore <code>_</code>.</li>\r\n                            <li> A variable name cannot begin with a number.</li>\r\n                            <li> Variable names should not begin with an uppercase character.</li>\r\n                            <li> A variable name cannot be a keyword. For example, <code>int</code> is a keyword that is used to denote integers</li>\r\n                            <li> A variable name can start with an underscore. However, it's not considered a good practice.</li>\r\n                        </ol>\r\n                        \r\n                        <h4 className=\"Thead\">C++ Literals</h4>\r\n                       Literals are data used for representing fixed values. They can be used directly in the code. For example: <code>1</code>,<code> 2.5</code>,<code> 'c'</code> etc.<br /><br/>\r\n                       Here,<code> 1</code>,<code> 2.5</code> and <code>'c'</code> are literals. Why? You cannot assign different values to these terms.<hr/>\r\n                       <h4 className=\"Thead\">1. Integers</h4>\r\n                       An integer is a numeric literal(associated with numbers) without any fractional or exponential part. There are three types of integer literals in C programming:\r\n                       <ul>\r\n                            <li>1. decimal (base 10)</li>\r\n                            <li>2. octal (base 8)</li>\r\n                            <li>3. hexadecimal (base 16)</li>    \r\n                       </ul>\r\n                       For example:\r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`Decimal: 0, -9, 22 etc\r\nOctal: 021, 077, 033 etc\r\nHexadecimal: 0x7f, 0x2a, 0x521 etc`}\r\n                            </pre>      \r\n                         </div>\r\n                         In C++ programming, octal starts with a <code>0</code>, and hexadecimal starts with a <code>0x</code>.\r\n                   <hr />\r\n\r\n                        <h4 className=\"Thead\">2. Floating point Literals</h4>\r\n                        A floating-point literal is a numeric literal that has either a fractional form or an exponent form. For example:<br />\r\n                        <code>-2.0</code><br />\r\n                        <code>0.0000234</code><br />\r\n                        <code>-0.22E-5</code>\r\n                        <hr />\r\n\r\n                        <h4 className=\"Thead\">3. characters</h4>\r\n                        A character literal is created by enclosing a single character inside single quotation marks. For example: 'a', 'm', 'F', '2', '}' etc.\r\n                        <hr />\r\n                        <h5 className=\"Thead\">4. Escape Sequence</h5>\r\n                        Sometimes, it is necessary to use characters that cannot be typed or has special meaning in C++ programming. For example, newline (enter), tab, question mark, etc.<br /><br/>\r\n                        In order to use these characters, escape sequences are used.\r\n                        <div class=\"card card-body\">\r\n                            <pre>\r\n                            <table class=\"table table-striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                      <th scope=\"col\"></th>\r\n                                      <th scope=\"col\"></th>\r\n                                    </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                    <tr>\r\n                                      <td><code>Escape Sequence</code></td>\r\n                                      <td><code>Characters</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\b</code></td>\r\n                                      <td><code>Backspace</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\f</code></td>\r\n                                      <td><code>Form feed</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\n</code></td>\r\n                                      <td><code>Newline</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\r</code></td>\r\n                                      <td><code>Return</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\t</code></td>\r\n                                      <td><code>Horizontal tab</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\v</code></td>\r\n                                      <td><code>Vertical tab</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\\\</code></td>\r\n                                      <td><code>Backslash</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\'</code></td>\r\n                                      <td><code>Single quotation mark</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\\"</code></td>\r\n                                      <td><code>Double quotation mark</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\?</code></td>\r\n                                      <td><code>Question mark</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\\0</code></td>\r\n                                      <td><code>Null character</code></td>\r\n                                    </tr> \r\n                                  </tbody>\r\n                                </table>\r\n                            </pre>      \r\n                         </div>\r\n                         <hr />\r\n                         <h4 className=\"Thead\">5. String Literals</h4>\r\n                          A string literal is a sequence of characters enclosed in double-quote marks. For example:\r\n                          <div class=\"card card-body\">\r\n                            <pre>\r\n                            <table class=\"table table-striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                      <th scope=\"col\"></th>\r\n                                      <th scope=\"col\"></th>\r\n                                    </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                    <tr>\r\n                                      <td><code>\"Good\"</code></td>\r\n                                      <td><code>string constant</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\"\"</code></td>\r\n                                      <td><code>null string constant</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\" \"</code></td>\r\n                                      <td><code>string constant of six white space</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\"x\"</code></td>\r\n                                      <td><code>string constant having a single character</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>\"Earth is round\\n\"</code></td>\r\n                                      <td><code>prints string with a new line</code></td>\r\n                                    </tr> \r\n                                  </tbody>\r\n                                </table>\r\n                            </pre>\r\n                           </div>  \r\n                           <hr /> \r\n\r\n                          <h4 className=\"Thead\">C++ Constants</h4>\r\n                          In C++, we can create variables whose value cannot be changed. For that, we use the const keyword. Here's an example:\r\n                          <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`const int LIGHT_SPEED = 299792458;\r\nLIGHT_SPEED = 2500 // Error! LIGHT_SPEED is a constant.`}\r\n                            </pre>      \r\n                         </div>\r\n                         Here, we have used the keyword <code>const</code> to declare a constant named <code>LIGHT_SPEED</code>. If we try to change the value of <code>LIGHT_SPEED</code>, we will get an error.\r\n                          A constant can also be created using the <code>#define</code> preprocessor directive. We will learn about it in detail in the C++ Macros tutorial.\r\n                   </div> \r\n                }\r\n            \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cpp1\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\cpp\\Cpp2.js",["418"],"import React from 'react'\r\nimport Tutorial from '../Tutorial'\r\nimport {SiCplusplus} from 'react-icons/si'\r\nimport icon from './cpp2.png'\r\nimport icon2 from './cpp9.png'\r\n\r\nconst Cpp1 = () => {\r\n  const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"C++\" language = \"cpp\" next=\"/Cpp3\" icon2={logo.Lname2}\r\n                theoryContent = {\r\n                   <div className=\"TutorialPadding\">\r\n                       <h4 className=\"Thead\">C++ Data Types</h4>\r\n                       In this tutorial, we will learn about basic data types such as int, float, char, etc. in C++ programming with the help of examples.<br/><br/>\r\n                       In C++, data types are declarations for variables. This determines the type and size of data associated with variables. For example,\r\n                       <div className=\"card card-box\">\r\n                          int age = 13;\r\n                       </div>\r\n                       Here,<code>age</code> is a variable of type <code>int</code>. Meaning, the variable can only store integers of either 2 or 4 bytes.<hr/>\r\n                       <h4 className=\"Thead\">\r\n                         C++ Fundamental Data Types  \r\n                       </h4>\r\n                       The table below shows the fundamental data types, their meaning, and their sizes (in bytes):\r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                            <table class=\"table table-striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                      <th scope=\"col\">Data Type</th>\r\n                                      <th scope=\"col\">Meaning</th>\r\n                                      <th scope=\"col\">Size (in bytes)</th>\r\n                                    </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                    <tr>\r\n                                      <td><code>int</code></td>\r\n                                      <td><code>Integer</code></td>\r\n                                      <td><code>2 or 4</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>float</code></td>\r\n                                      <td><code>Floating-point</code></td>\r\n                                      <td><code>4</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>double</code></td>\r\n                                      <td><code>DOuble Floating-point</code></td>\r\n                                      <td><code>8</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>char</code></td>\r\n                                      <td><code>Character</code></td>\r\n                                      <td><code>1</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>wchar_t</code></td>\r\n                                      <td><code>Wide Character</code></td>\r\n                                      <td><code>2</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>bool</code></td>\r\n                                      <td><code>Boolean</code></td>\r\n                                      <td><code>1</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>void</code></td>\r\n                                      <td><code>Empty</code></td>\r\n                                      <td><code>0</code></td>\r\n                                    </tr> \r\n                                  </tbody>\r\n                                </table>\r\n                            </pre>\r\n                           </div>\r\n                           Now, let us discuss these fundamental data types in more detail.<hr/>\r\n                           <h4 className=\"Thead\">1. C++ int</h4>\r\n                           <ul>\r\n                              <li>1. The <code>int</code> keyword is used to indicate integers.</li>\r\n                              <li>2. Its size is usually 4 bytes. Meaning, it can store values from -2147483648 to 2147483647.</li>\r\n                              <li>3. For example,</li>\r\n                              <div className=\"card card-body\">\r\n                                <pre>\r\n                                  int salary = 85000;\r\n                                </pre>\r\n                              </div>\r\n                            </ul>\r\n                            <hr />\r\n                            <h4 className=\"Thead\">2.C++ float and double</h4>\r\n                            <ul>\r\n                              <li><code>float</code> and <code>double</code> are used to store floating-point numbers (decimals and exponentials).</li>\r\n                              <li>The size of <code>float</code> is 4 bytes and the size of <code>double</code> is 8 bytes. Hence, <code>double</code> has two times the precision of <code>float</code>. To learn more, visit C++ float and double.</li>\r\n                              <li>For example,</li>\r\n                              <div className=\"card card-body\">\r\n                              <pre>\r\n                              float area = 64.74;<br/>\r\n                              double volume = 134.64534;\r\n                              </pre>\r\n                              </div>  \r\n                            </ul>\r\n                            As mentioned above, these two data types are also used for exponentials. For example,\r\n                            <div className=\"card card-body\">\r\n                            double distance = 45E12    // 45E12 is equal to 45*10^12\r\n                            </div>  \r\n                            <hr/>\r\n                            <h4 className=\"Thead\">3.C++ char</h4>\r\n                              <ul>\r\n                                  <li>Keyword char is used for characters.</li>\r\n                                  <li>Its size is 1 byte.</li>\r\n                                  <li>Characters in C++ are enclosed inside single quotes<code> ' '</code>.</li>\r\n                                  <li>For example,</li>\r\n                                  <div className=\"card card-body\">\r\n                                      char test = 'h';\r\n                                  </div>\r\n                             </ul> \r\n                                <hr />\r\n                                <h4 className=\"Thead\">4. C++ wchar_t</h4>\r\n                                <ul>\r\n                                  <li>Wide character wchar_t is similar to the char data type, except its size is 2 bytes instead of 1.</li>\r\n                                  <li>It is used to represent characters that require more memory to represent them than a single char.</li>\r\n                                  <li>For example,</li>\r\n                                  <div class=\"card card-body\">\r\n                                    wchar_t test = L'ם'  // storing Hebrew character\r\n                                  </div>\r\n                                  Notice the letter L before the quotation marks\r\n                                 </ul> \r\n\r\n                                <h4 className=\"Thead\">5. C++ bool</h4>\r\n                                <ul>\r\n                                    <li>The <code>bool</code> data type has one of two possible values: <code>true</code> or <code>false</code>.</li>\r\n                                    <li>Booleans are used in conditional statements and loops (which we will learn in later chapters).</li>\r\n                                    <li>For example,</li>\r\n                                    <div className=\"card card-body\">\r\n                                        bool cond = false;\r\n                                    </div>  \r\n                                </ul> \r\n                                <hr/>\r\n                                <h4 className=\"Thead\">6. C++ void</h4> \r\n                                <ul>\r\n                                    <li>The <code>void</code> keyword indicates an absence of data. It means \"nothing\" or \"no value</li>\r\n                                    <li>We will use void when we learn about functions and pointers.</li>\r\n                                  </ul>  \r\n                                Note: We cannot declare variables of the <code>void</code> type.<br/><hr/>  \r\n                              \r\n\r\n                   </div> \r\n                }\r\n            \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cpp1\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\cpp\\Cpp4.js",["419"],"import React from 'react'\r\nimport Tutorial from '../Tutorial'\r\nimport {SiCplusplus} from 'react-icons/si'\r\nimport icon from './cpp2.png'\r\nimport icon2 from './cpp9.png'\r\n\r\nconst Cpp1 = () => {\r\n    const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"C++\" language = \"cpp\" next=\"/Cpp4\" icon2={logo.Lname2}\r\n                theoryContent = {\r\n                    <div className=\"TutorialPadding\">\r\n                        <h4 className=\"Thead\">C++ Type Conversion</h4>\r\n                        In this tutorial, we will learn about the basics of C++ type conversion with the help of examples.<br/><br/>\r\n                        C++ allows us to convert data of one type to that of another. This is known as type conversion.<br/><br/>\r\n                        There are two types of type conversion in C++.<br/><br/>\r\n                        <ol>\r\n                            <li>Implicit Conversion</li>\r\n                            <li>Explicit Conversion (also known as Type Casting</li><br/><hr/>\r\n                        </ol>    \r\n\r\n                        <h4 className=\"Thead\">Implicit Type Conversion</h4>  \r\n                        The type conversion that is done automatically done by the compiler is known as implicit type conversion. This type of conversion is also known as automatic conversion.<br/><br/>\r\n                        Let us look at two examples of implicit type conversion.<br/><hr/>\r\n                        <h4 className=\"Thead\">Example 1: Conversion From int to double</h4>\r\n                        <div className=\"card card-body\">\r\n                            <pre>\r\n                            {`// Working of implicit type-conversion\r\n\r\n#include <iostream>\r\nusing namespace std;\r\n\r\nint main() {\r\n   // assigning an int value to num_int\r\n   int num_int = 9;\r\n\r\n   // declaring a double type variable\r\n   double num_double;\r\n \r\n   // implicit conversion\r\n   // assigning int value to a double variable\r\n   num_double = num_int;\r\n\r\n   cout << \"num_int = \" << num_int << endl;\r\n   cout << \"num_double = \" << num_double << endl;\r\n\r\n   return 0;\r\n}  `}\r\n                            </pre>    \r\n                        </div>\r\n                        <h4 className=\"Thead\">Output</h4>\r\n                        <div className=\"card card-body\">\r\n                        num_int = 9<br/>\r\n                        num_double = 9\r\n                        </div>  \r\n\r\n                        In the program, we have assigned an <code>int</code> data to a <code>double</code> variable.\r\n                        <div className=\"card card-body\">\r\n                        num_double = num_int;\r\n                        </div>\r\n                        Here, the <code>int</code> value is automatically converted to <code>double</code> by the compiler before it is assigned to the <code>num_double</code> variable. This is an example of implicit type conversion.    \r\n                        <br/><hr/>\r\n                        <h4 className=\"Thead\">Example 2: Automatic Conversion from double to int</h4>\r\n                        <div className=\"card card-board\">\r\n                            <pre>\r\n                            {`//Working of Implicit type-conversion\r\n\r\n#include <iostream>\r\nusing namespace std;\r\n\r\nint main() {\r\n\r\n   int num_int;\r\n   double num_double = 9.99;\r\n\r\n   // implicit conversion\r\n   // assigning a double value to an int variable\r\n   num_int = num_double;\r\n\r\n   cout << \"num_int = \" << num_int << endl;\r\n   cout << \"num_double = \" << num_double << endl;\r\n\r\n   return 0;\r\n}`}   \r\n                             </pre>   \r\n                        </div> \r\n                        <h4>Output</h4>\r\n                        <div className=\"card card-body\">\r\n                            <pre>\r\n                            num_int = 9<br/>\r\n                            num_double = 9.99\r\n                             </pre>   \r\n                        </div>    \r\n                        In the program, we have assigned a double data to an int variable<br/><hr/>\r\n\r\n                        <div className=\"card card-body\">\r\n                        num_double = num_int;\r\n                        </div>    \r\n                        Here, the <code>double</code> value is automatically converted to <code>int</code> by the compiler before it is assigned to the <code>num_int</code> variable. This is also an example of implicit type conversion.\r\n                    </div>\r\n                }\r\n            \r\n                />\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    export default Cpp1","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\nodejs\\Javascript2.js",["420","421","422","423","424","425","426","427","428"],"import React from 'react'\r\nimport {SiNodeDotJs} from 'react-icons/si'\r\nimport Tutorial from '../Tutorial'\r\nimport icon from './js.png'\r\nimport icon2 from './js2.png'\r\n\r\nconst Nodejs1 = () => {\r\n    const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"Javascript\" language = \"javascript\" next=\"/Javascript3\" icon2={logo.Lname2}\r\n            theoryContent = {   \r\n            <div className=\"TutorialPadding\">\r\n                <h4 className=\"Thead\">Rules for Naming JavaScript Variables</h4>\r\n                The rules for naming variables are:<br/>\r\n                1. Variable names must start with either a letter, an underscore _, or the dollar sign $. For example,\r\n                <div className=\"card card-body\">\r\n                    <pre>\r\n                        //valid<br/>\r\n                        let a = 'hello';<br/>\r\n                        let _a = 'hello';<br/>\r\n                        let $a = 'hello';           \r\n                    </pre>\r\n                </div>\r\n                2. Variable names cannot start with numbers. For example,\r\n                <div className=\"card card-body\">\r\n                    <pre>\r\n                    //invalid<br/>\r\n                    Let 1a = 'hello'; // this gives an error           \r\n                    </pre>\r\n                </div>\r\n                3. JavaScript is case-sensitive. So <code>y</code> and <code>Y</code> are different variables. For example,\r\n                <div className=\"card card-body\">\r\n                    <pre>\r\n                    let y = \"hi\";<br/>\r\n                    let Y = 5;<br/><br/>\r\n\r\n                    console.log(y); // hi<br/>\r\n                    console.log(Y); // 5\r\n                    </pre>     \r\n                </div>            \r\n                4. Keywords cannot be used as variable names. For example,\r\n                <div className=\"card card-body\">\r\n                    <pre>\r\n                    //invalid<br/>   \r\n                    let new = 5; // Error! new is a keyword.                     \r\n                    </pre>\r\n                </div>\r\n                <hr/>\r\n                <h4 className=\"Thead\">JavaScript Constants</h4>\r\n                The <code>const</code> keyword was also introduced in the ES6(ES2015) version to create constants. For example,\r\n                <div className=\"card card-body\">\r\n                    <pre>\r\n                    const x = 5;              \r\n                    </pre>\r\n                </div>\r\n                <hr/>\r\n                Once a constant is initialized, we cannot change its value.\r\n                <div className=\"card card-body\">\r\n                    <pre>\r\n                    const x = 5;<br/>\r\n                    x = 10;  // Error! constant cannot be changed.<br/>\r\n                    console.log(x)                       \r\n                    </pre>\r\n                </div>\r\n                Simply, a constant is a type of variable whose value cannot be changed.<br/><br/>\r\n                Also, you cannot declare a constant without initializing it. For example,\r\n                <div className=\"card card-body\">\r\n                    <pre>\r\n                    const x;  // Error! Missing initializer in const declaration.<br/><br/>\r\n                    x = 5;\r\n                    console.log(x)\r\n                    </pre>     \r\n                </div> \r\n                <br/><hr/> \r\n                <h4 className=\"Thead\">JavaScript Comments</h4>\r\n                In this tutorial, you will learn about JavaScript comments, why you should use them, and how to use them with the help of examples.<br/><br/>\r\n                JavaScript comments are hints that a programmer can add to make their code easier to read and understand. They are completely ignored by JavaScript engines.<br/><br/>\r\n                <hr/>\r\n                There are two ways to add comments to code:\r\n                <ul>\r\n                    <li><code>//</code> - Single Line Comments</li>\r\n                    <li><code>/* */</code> -Multi-line Comments</li>\r\n                </ul>    \r\n                <br/><hr/>\r\n                <h4 className=\"Thead\">Single Line Comments</h4>\r\n                In JavaScript, any line that starts with <code>//</code> is a single line comment. For example,\r\n                <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`name = \"Jack\";\r\n\r\n// printing name on the console\r\nconsole.log(\"Hello \" + name);`}\r\n\r\n                         </pre>   \r\n                    </div> \r\n                    Here,<code> //</code> printing name on the console is a comment.   \r\n                    You can also use single line comment like this:\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        {`name = \"Jack\";\r\n\r\nconsole.log(\"Hello \" + name);  // printing name on the console`}\r\n\r\n                         </pre>   \r\n                    </div>\r\n                    <hr/>\r\n                    <h4 className=\"Thead\">Multi-line Comments</h4>\r\n                    In Javascript, any text between /* and */ is a multi-line comment. For example,<br/>\r\n                    <div className=\"card card-body\">\r\n                        <pre>\r\n                        /* The following program contains the source code for a game called Baghchal.<br/>\r\n                        Baghchal is a popular board game in Nepal where two players choose either sheep or tiger. It is played on a 5x5 grid.<br/>\r\n                        For the player controlling the tiger to win, they must capture all the sheep. There are altogether 4 tigers on the board.<br/>\r\n                        For the sheep to win, all tigers must be surrounded and cornered so that they cannot move. The player controlling the sheep has 20 sheep at his disposal.<br/>\r\n                        */\r\n                         </pre>   \r\n                    </div>\r\n                    <h4 className=\"Thead\">Make Code Easier to Understand</h4>\r\n                    As a JavaScript developer, you will not only write code but may also have to modify code written by other developers.<br/><br/>\r\n                    If you write comments on your code, it will be easier for you to understand the code in the future. Also, it will be easier for your fellow developers to understand the code.<br/><br/>\r\n                    As a general rule of thumb, use comments to explain why you did something rather than how you did something, and you are good.<br/><br/>\r\n\r\n\r\n\r\n            </div>    \r\n            \r\n            }/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nodejs1\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\nodejs\\Javascript3.js",["429"],"import React from 'react'\r\nimport {SiNodeDotJs} from 'react-icons/si'\r\nimport Tutorial from '../Tutorial'\r\nimport icon from './js.png'\r\nimport icon2 from './js2.png'\r\nconst Nodejs1 = () => {\r\n  const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"Javascript\" language = \"javascript\" next=\"/Javascript4\" icon2={logo.Lname2}\r\n            theoryContent = {   \r\n            <div className=\"TutorialPadding\">\r\n                <h4 className=\"Thead\">JavaScript Data Types</h4>\r\n                In this tutorial, you will learn about the various data types available in JavaScript with the help of examples.\r\n                <br/><br/>\r\n                As suggested by the name, data types refers to types of data that you can use in your program. For example,\r\n                <div className=\"card card-body\">\r\n                    <pre>\r\n                    const x = 5;\r\n                    const y = \"Hello\";                    \r\n                    </pre>\r\n                </div> \r\n                Here,<br/>\r\n                <ol>\r\n                    <li><code>5</code> is an integer data.</li>\r\n                    <li><code>\"Hello\"</code> is a string data.</li>\r\n                 </ol>   \r\n                <hr/>\r\n\r\n                <h4 className=\"Thead\">JavaScript Data Types</h4>\r\n                There are eight basic data types in JavaScript. They are:<br/>\r\n                <div class=\"card card-body\">\r\n                            <pre>\r\n                            <table class=\"table table-striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                      <th scope=\"col\">Data Type</th>\r\n                                      <th scope=\"col\">Description</th>\r\n                                      <th scope=\"col\">Example</th>\r\n                                    </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                    <tr>\r\n                                      <td><code>String</code></td>\r\n                                      <td><code>represents textual data</code></td>\r\n                                      <td><code>'hello', \"hello world!\" etc</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>Number</code></td>\r\n                                      <td><code>an integer or a floating-point number</code></td>\r\n                                      <td><code>3, 3.234, 3e-2 etc.</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>BigInt</code></td>\r\n                                      <td><code>an integer with arbitrary precision</code></td>\r\n                                      <td><code>900719925124740999n , 1n etc.</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>Boolean</code></td>\r\n                                      <td><code>Any of two values: true or false</code></td>\r\n                                      <td><code>true and false</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>undefined</code></td>\r\n                                      <td><code>a data type whose variable is not initialized</code></td>\r\n                                      <td><code>let a;</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>null</code></td>\r\n                                      <td><code>denotes a null value</code></td>\r\n                                      <td><code>let a = null;</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>Symbol</code></td>\r\n                                      <td><code>data type whose instances are unique and immutable</code></td>\r\n                                      <td><code>let value = Symbol('hello');</code></td>\r\n                                    </tr> \r\n                                  </tbody>\r\n                                </table>\r\n                            </pre>\r\n                           </div>\r\n                            <hr/>\r\n                            <h4 className=\"Thead\">JavaScript String</h4>\r\n                            <code>String</code> is used to store text. In JavaScript, strings are surrounded by quotes:\r\n                            <ul>\r\n                               <li>Single quotes:<code> 'Hello'</code></li>\r\n                               <li>Double quotes: <code>\"Hello\"</code></li>\r\n                               <li>Backticks: <code>`Hello`</code></li>     \r\n                            </ul>\r\n                            For example,\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                {`//strings example`}<br/>\r\n                                const name = 'ram';<br/>\r\n                                const name1 = \"hari\";\r\n                                </pre>\r\n                            </div>\r\n                            Single quotes and double quotes are practically the same and you can use either of them.<br/><hr/>\r\n                            <h4 className=\"Thead\">JavaScript Number</h4>\r\n                            <code>Number</code> represents integer and floating numbers (decimals and exponentials). For example   \r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                    const number1 = 3;<br/>\r\n                                    const number2 = 3.433;<br/>\r\n                                    const number3 = 3e5 {`// 3 * 10^5`}\r\n                                </pre>\r\n                            </div>\r\n                            A number type can also be +Infinity, -Infinity, and NaN (not a number). For example,\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                    const number1 = 3/0;<br/>\r\n                                    console.log(number1); {`// returns Infinity`}<br/>\r\n\r\n                                    const number2 = -3/0;<br/>\r\n                                    console.log(number2); {`// returns Infinity`}<br/>\r\n\r\n                                    {`// strings can't be divided by numbers`}<br/>\r\n                                    const number3 = \"abc\"/3; <br/>\r\n                                    console.log(number3);  // returns NaN\r\n                                </pre>\r\n                            </div>\r\n                            <hr/>\r\n                            <h4 className=\"Thead\">JavaScript Boolean</h4>\r\n                            This data type represents logical entities. <code>Boolean</code> represents one of two values: <code>true</code> or <code>false</code>. It is easier to think of it as a yes/no switch. For example,<br/>\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                const dataChecked = true;<br/>\r\n                                const valueCounted = false;  \r\n                                </pre>\r\n                            </div>\r\n                            <hr/>\r\n                            <h4 className=\"Thead\">JavaScript undefined</h4>\r\n                            The <code>undefined</code> data type represents value that is not assigned. If a variable is declared but the value is not assigned, then the value of that variable will be undefined. For example,<br/>\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                let name;\r\n                                console.log(name); {`// returns undefined`}<br/>\r\n                                </pre>\r\n                            </div>\r\n                            It is also possible to explicitly assign a variable value <code>undefined</code>. For example,\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                let name = undefined;<br/>\r\n                                console.log(name); {`// returns undefined`}\r\n                                </pre>\r\n                            </div>\r\n\r\n            </div>       \r\n            \r\n        }/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nodejs1\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\nodejs\\Javascript1.js",["430","431","432"],"import React from 'react'\r\nimport {SiNodeDotJs} from 'react-icons/si'\r\nimport Tutorial from '../Tutorial'\r\nimport icon from './js.png'\r\nimport icon2 from './js2.png'\r\n\r\nconst Nodejs1 = () => {\r\n    const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"Javascript\" language = \"javascript\" next=\"/Javascript2\" icon2={logo.Lname2}\r\n            theoryContent = {   \r\n            <div className=\"TutorialPadding\">\r\n                <h4 className=\"Thead\">Getting Started With JavaScript</h4>\r\n                In this tutorial, you will learn about different ways to run JavaScript on your computer.<br/><br/>\r\n                JavaScript is a popular programming language that has a wide range of applications.<br/><br/>\r\n                JavaScript was previously used mainly for making webpages interactive such as form validation, animation, etc. Nowadays, JavaScript is also used in many other areas such as server-side development, mobile app development and so on.<br/><br/>\r\n                Because of its wide range of applications, you can run JavaScript in several ways:<br/>\r\n                <ul>\r\n                    <li>Using console tab of web browsers</li>\r\n                    <li>Using Node.js</li>\r\n                    <li>By creating web pages</li>\r\n                </ul>\r\n                <hr/>\r\n\r\n                <h4 className=\"Thead\">JavaScript Variables and Constants</h4>\r\n                In this tutorial, you will learn about JavaScript variables and constants, and also how to initialize and use them with the help of examples.\r\n                <br/><br/>\r\n                <h4 className=\"Thead\">JavaScript Variables</h4>\r\n                In programming, a variable is a container (storage area) to hold data. For example,<br/><br/>\r\n                <code>let num = 5;</code>\r\n                Here, <code>num</code> is the variabe that holds the number 5.<br/><hr/>\r\n                <h4>JavaScript Declare Variables</h4>\r\n                In JavaScript, we use the following keywords to declare variables: <code>var</code> and <code>let</code>. For example,\r\n                <div className=\"card card-body\">\r\n                    <pre>\r\n                        var x;<br/>\r\n                        let y;\r\n                    </pre>    \r\n                </div> \r\n                Here, x and y are variables.<br/><hr/>\r\n                <h4 className=\"Thead\">JavaScript var Vs let</h4>\r\n                Both <code>var</code> and <code>let</code> are used to declare variables.<br/><br/> However, there are some differences between them.\r\n                <div class=\"card card-body\">\r\n                            <pre>\r\n                            <table class=\"table table-striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                      <th scope=\"col\">var</th>\r\n                                      <th scope=\"col\">let</th>\r\n                                    </tr>\r\n                                  </thead>\r\n                                  <tbody>\r\n                                    <tr>\r\n                                      <td><code>var is used in the older versions of JavaScript</code></td>\r\n                                      <td><code>let is the new way of declaring variables starting ES6 (ES2015)</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>var is function scoped (will be discussed in later tutorials)</code></td>\r\n                                      <td><code>let is block scoped (will be discussed in later tutorials).</code></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                      <td><code>For example, var x;</code></td>\r\n                                      <td><code>For example, let y;</code></td>\r\n                                    </tr> \r\n                                  </tbody>\r\n                                </table>\r\n                            </pre>\r\n                           </div>  \r\n                           <hr/>\r\n                           <h4 className=\"Thead\">JavaScript Initialize Variables</h4>\r\n                           We use the assignment operator <code>=</code> to assign a value to a variable.\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                    let x;<br/>\r\n                                    x=5;\r\n                                </pre>\r\n                            </div>  \r\n                            Here, 5 is assigned to variable <code>x</code>.<br/><br/>\r\n                            You can also initialize variables during its declaration.\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                let x = 5;<br/>\r\n                                let y = 6;\r\n                                </pre>\r\n                            </div>\r\n                            In JavaScript, it's possible to declare variables in a single statement.\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                    let x = 5, y = 6, z = 7;  \r\n                                </pre>\r\n                            </div>\r\n                            <hr/>\r\n                            If you use a variable without initializing it, it will have an <code>undefined</code> value.\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                let x; // x is the name of the variable\r\n                                <br/><br/>    \r\n                                console.log(x); // undefined\r\n                                </pre>\r\n                            </div>\r\n                            Here <code>x</code> is the variable name and since it does not contain any value, it will be undefined.\r\n                            <br/><br/>\r\n                            You will learn about <code>undefined</code> and other data types in the next tutorial in detail.<br/><hr/>\r\n                            <h4 className=\"Thead\">Change the Value of Variables</h4>\r\n                            It's possible to change the value stored in the variable. For example,<br/>\r\n                            <div className=\"card card-body\">\r\n                                <pre>\r\n                                // 5 is assigned to variable x<br/>\r\n                                let x = 5;<br/> \r\n                                console.log(x); // 5<br/>\r\n                                // vaue of variable x is changed<br/>\r\n                                x = 3; <br/>\r\n                                console.log(x); // 3\r\n                                </pre>\r\n                            </div>\r\n                            The value of a variable may vary. Hence, the name variable.\r\n                            <hr/>\r\n\r\n            </div>    \r\n            \r\n        }/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nodejs1\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\csharp\\Csharp2.js",["433"],"import React from 'react'\r\nimport {SiCsharp} from 'react-icons/si'\r\nimport Tutorial from '../Tutorial'\r\nimport icon from './c3.png'\r\nimport icon2 from './c2.png'\r\n\r\nconst Csharp1 = () => {\r\n    const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"C-SHARP\" language = \"Csharp\" next=\"/Csharp3\" icon2={logo.Lname2}\r\n             theoryContent = {\r\n                <p>\r\n                    <h4>C# Variables and (Primitive) Data Types<hr/></h4>\r\n                     <p>A variable is a symbolic name given to a memory location. Variables are used to store data in a computer program.</p>\r\n\r\n\r\n                    <h5>How to declare variables in C#?<hr/></h5>\r\n                    Here's an example to declare a variable in C#.\r\n                    <div class=\"card card-body\">\r\n                         <pre>\r\n                             {`int age;\r\n`}\r\n                         </pre>\r\n                         </div>\r\n\r\n \r\n\r\n                             \r\n\r\n                    <h5>However, the variable can also be initialized to some value during declaration. For example,<hr/></h5>\r\n                    \r\n                    <div class=\"card card-body\">\r\n                         <pre>\r\n                             {`int age = 24;\r\n\r\n`}\r\n                         </pre>      \r\n                      </div>\r\n<p>Here, a variable age of type int is declared and initialized to 24 at the same time.</p>\r\n\r\n\r\n<h5>Since, it’s a variable, we can change the value of variables as well. For example,<hr/></h5>\r\n                    \r\n                    <div class=\"card card-body\">\r\n                         <pre>\r\n                             {`int age = 24;\r\nage = 35;\r\n`}\r\n                         </pre>      \r\n                      </div>\r\n\r\n                    \r\n                      <h5>Integer Types<hr/></h5>\r\n                    <p>The int data type can store whole numbers from -2147483648 to 2147483647. In general, and in our tutorial, the int data type is the preferred data type when we create variables with a numeric value\r\n                    </p>\r\n                    Example\r\n                    <div class=\"card card-body\">\r\n                         <pre>\r\n                             {`int myNum = 100000;\r\nConsole.WriteLine(myNum);\r\n`}\r\n                         </pre>\r\n                         </div>\r\n\r\n\r\n                    <h5>Long<hr/></h5>\r\n                    <p>\r\n                    The long data type can store whole numbers from -9223372036854775808 to 9223372036854775807. This is used when int is not large enough to store the value. Note that you should end the value with an \"L\":\r\n                    </p>\r\n                    Example\r\n                    <div class=\"card card-body\">\r\n                         <pre>\r\n                             {`long myNum = 15000000000L;\r\nConsole.WriteLine(myNum);\r\n`}\r\n                         </pre>\r\n                         </div>\r\n\r\n \r\n\r\n\r\n                         <h5>Floating Point Types<hr/></h5>\r\n                    <p>You should use a floating point type whenever you need a number with a decimal, such as 9.99 or 3.14515.</p>\r\n                    Example\r\n                    <div class=\"card card-body\">\r\n                         <pre>\r\n                             {`int myNum = 100000;\r\nConsole.WriteLine(myNum);\r\n`}\r\n                         </pre>\r\n                         </div>\r\n\r\n\r\n                    <h5>Float<hr/></h5>\r\n                    <p>\r\n                    The float data type can store fractional numbers from 3.4e−038 to 3.4e+038. Note that you should end the value with an \"F\":\r\n                    </p>\r\n                    Example\r\n                    <div class=\"card card-body\">\r\n                         <pre>\r\n                             {`float myNum = 5.75F;\r\nConsole.WriteLine(myNum);\r\n`}\r\n                         </pre>\r\n                         </div>\r\n\r\n                         <h5>Double<hr/></h5>\r\n                    <p>\r\n                    The double data type can store fractional numbers from 1.7e−308 to 1.7e+308. Note that you can end the value with a \"D\" (although not required):\r\n                    </p>\r\n                    Example\r\n                    <div class=\"card card-body\">\r\n                         <pre>\r\n                             {`double myNum = 19.99D;\r\nConsole.WriteLine(myNum);\r\n`}\r\n                         </pre>\r\n                         </div>\r\n\r\n \r\n                    \r\n                      \r\n                    \r\n                     \r\n                </p> \r\n             }\r\n             />\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Csharp1\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\nodejs\\Javascript4.js",["434"],"import React from 'react'\r\nimport {SiNodeDotJs} from 'react-icons/si'\r\nimport Tutorial from '../Tutorial'\r\nimport icon from './js.png'\r\nimport icon2 from './js2.png'\r\n\r\nconst Nodejs1 = () => {\r\n    const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"Javascript\" language = \"javascript\" next=\"/Javascript4\" icon2={logo.Lname2}\r\n            theoryContent = {   \r\n            <div className=\"TutorialPadding\">\r\n                <h4>JavaScript Object</h4>\r\n                An <code>object</code> is a complex data type that allows us to store collections of data. For example,\r\n                <div className=\"card card-body\">\r\n                    <pre>\r\n                   {`const student = {\r\n    firstName: 'ram',\r\n    lastName: null,\r\n    class: 10\r\n};  `}                  \r\n                    </pre>\r\n                </div>\r\n                 <hr/>   \r\n                <h4 className=\"Thead\">JavaScript Symbol</h4>\r\n                This data type was introduced in a newer version of JavaScript (from ES2015).\r\n                A value having the data type Symbol can be referred to as a symbol value. Symbol is an immutable primitive value that is unique. For example,\r\n                <div className=\"card card-body\">\r\n                    <pre>\r\n                   {` // two symbols with the same description`}<br/>\r\n\r\n                    const value1 = Symbol('hello');<br/>\r\n                    const value2 = Symbol('hello');                 \r\n                    </pre>\r\n                </div>    \r\n                Though <code>value1</code> and <code>value2</code> both contain <code>'hello'</code>, they are different as they are of the <code>Symbol</code> type.\r\n                <br/><hr/>\r\n                <h4 className=\"Thead\">JavaScript Object</h4>    \r\n                An <code>object</code> is a complex data type that allows us to store collections of data. For example,\r\n                <div className=\"card card-body\">\r\n                    <pre>\r\n                    {`const student = {\r\n    firstName: 'ram',\r\n    lastName: null,\r\n    class: 10\r\n};`}\r\n                    </pre>\r\n                </div>\r\n                <hr/>\r\n                <h4 className=\"Thead\">JavaScript Type</h4>\r\n                JavaScript is a dynamically typed (loosely typed) language. JavaScript automatically determines the variables' data type for you.\r\n                <hr/>    \r\n                It also means that a variable can be of one data type and later it can be changed to another data type. For example,\r\n                <div className=\"card card-body\">\r\n                    <pre>\r\n                    {`// data is of undefined type\r\nlet data;\r\n\r\n// data is of integer type\r\ndata = 5;\r\n\r\n// data is of string type\r\ndata = \"JavaScript Programming\";`}                    \r\n                    </pre>\r\n                </div>\r\n                <hr/>\r\n                <h4 className=\"Thead\">JavaScript typeof</h4>\r\n                To find the type of a variable, you can use the typeof operator. For example,<br/>\r\n                <div className=\"card card-body\">\r\n                    <pre>\r\n                   {` const name = 'ram';\r\ntypeof(name); // returns \"string\"\r\n\r\nconst number = 4;\r\ntypeof(number); //returns \"number\"\r\n\r\nconst valueChecked = true;\r\ntypeof(valueChecked); //returns \"boolean\"\r\n\r\nconst a = null;\r\ntypeof(a); // returns \"object\"  `}              \r\n                    </pre>\r\n                </div>\r\n            \r\n            \r\n            \r\n            </div>       \r\n            \r\n        }/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nodejs1\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\java\\Java3.js",["435"],"import React from 'react'\r\nimport Tutorial from '../Tutorial'\r\nimport {SiJava} from 'react-icons/si'\r\nimport icon from './java9.png'\r\nimport icon2 from './java1.png'\r\n\r\nconst Java1 = () => {\r\n  const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n          <Tutorial icons = {logo.Lname} name = \"JAVA\" language = \"java\" next=\"/Java4\" icon2={logo.Lname2}\r\n          theoryContent = {\r\n                   <p className=\"TutorialPadding\">\r\n                       <h3 className=\"Thead\">Java Constructors<hr/></h3>\r\n                        <p>In this tutorial, we will learn about Java constructors, their types, and how to use them with the help of examples.</p>\r\n\r\n                      \r\n\r\n                       <h4 className=\"Thead\">What is a Constructor?<hr/></h4>\r\n                       <p>A constructor in Java is similar to a method that is invoked when an object of the class is created.</p>\r\n                       <p>Unlike Java methods, a constructor has the same name as that of the class and does not have any return type. For example,</p>\r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`class Test {\r\n  Test() {\r\n    // constructor body\r\n  }\r\n}\r\n`}\r\n                            </pre>      \r\n                         </div>\r\n    \r\n   <p>Here, Test() is a constructor. It has the same name as that of the class and doesn't have a return type.</p>\r\n                                \r\n\r\n\r\n   <h4 className=\"Thead\">Constructor Parameters<hr/></h4>\r\n                       <p>Constructors can also take parameters, which is used to initialize attributes.</p>\r\n                       <p>The following example adds an int y parameter to the constructor. Inside the constructor we set x to y (x=y). When we call the constructor, we pass a parameter to the constructor (5), which will set the value of x to 5:\r\n\r\n</p>\r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`public class Main {\r\n  int x;\r\n\r\n  public Main(int y) {\r\n    x = y;\r\n  }\r\n\r\n  public static void main(String[] args) {\r\n    Main myObj = new Main(5);\r\n    System.out.println(myObj.x);\r\n  }\r\n}\r\n\r\n// Outputs 5\r\n\r\n`}\r\n                            </pre>      \r\n                         </div>\r\n    \r\n\r\n                                \r\n  \r\n              \r\n\r\n\r\n\r\n                       <h4 className=\"Thead\">Java No-Arg Constructors<hr/></h4>\r\n                       Similar to methods, a Java constructor may or may not have any parameters (arguments).\r\n                        If a constructor does not accept any parameters, it is known as a no-argument constructor.\r\n                      \r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`private Constructor() {\r\n   // body of the constructor\r\n}\r\n`}\r\n                            </pre>      \r\n                         </div>\r\n\r\n                         <h4>Java Parameterized Constructor<hr/></h4>\r\n                         A Java constructor can also accept one or more parameters.\r\n                        Such constructors are known as parameterized constructors (constructor with parameters).\r\n\r\n\r\n                       <div class=\"card card-body\">\r\n\r\n                            <pre>\r\n                                {`class Main {\r\n\r\nString languages;\r\n\r\n// constructor accepting single value\r\nMain(String lang) {\r\n  languages = lang;\r\n  System.out.println(languages + \" Programming Language\");\r\n}\r\n\r\npublic static void main(String[] args) {\r\n\r\n  // call constructor by passing a single value\r\n  Main obj1 = new Main(\"Java\");\r\n  Main obj2 = new Main(\"Python\");\r\n  Main obj3 = new Main(\"C\");\r\n}\r\n}\r\n`}\r\n                            </pre>      \r\n                         </div>\r\n\r\n\r\n\r\n\r\n\r\n                         <h4 className=\"Thead\">Java No-Arg Constructors<hr/></h4>\r\n                       Similar to methods, a Java constructor may or may not have any parameters (arguments).\r\n                        If a constructor does not accept any parameters, it is known as a no-argument constructor.\r\n                      \r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`private Constructor() {\r\n   // body of the constructor\r\n}\r\n`}\r\n                            </pre>      \r\n                         </div>\r\n\r\n                         <h4 className=\"Thead\">Java Default Constructor<hr/></h4>\r\n                         If we do not create any constructor, the Java compiler automatically create a no-arg constructor during the execution of the program. \r\n                         This constructor is called default constructor.\r\n\r\n\r\n\r\n\r\n                       <div class=\"card card-body\">\r\n\r\n                            <pre>\r\n                                {`class Main {\r\n\r\nint a;\r\nboolean b;\r\n\r\npublic static void main(String[] args) {\r\n\r\n  // A default constructor is called\r\n  Main obj = new Main();\r\n\r\n  System.out.println(\"Default Value:\");\r\n  System.out.println(\"a = \" + obj.a);\r\n  System.out.println(\"b = \" + obj.b);\r\n}\r\n}\r\n`}\r\n                            </pre>      \r\n                         </div>\r\n                         \r\n\r\n                         \r\n                       \r\n                        \r\n                   </p> \r\n                }\r\n                />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Java1\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\csharp\\Csharp1.js",["436"],"import React from 'react'\r\nimport {SiCsharp} from 'react-icons/si'\r\nimport Tutorial from '../Tutorial'\r\nimport icon from './c3.png'\r\nimport icon2 from './c2.png'\r\n\r\n\r\nconst Csharp1 = () => {\r\n    const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n            <Tutorial icons = {logo.Lname} name = \"C-SHARP\" language = \"Csharp\" next=\"/Csharp2\" icon2={logo.Lname2}\r\n             theoryContent = {\r\n                <p>\r\n                    <h4>C# Hello World - Your First C# Program<hr/></h4>\r\n                     <p>The “Hello World!” program is often the first program we see when we dive into a new language. It simply prints Hello World! on the output screen.</p>\r\n                    <div class=\"card card-body\">\r\n                         <pre>\r\n                             {`// Hello World! program\r\nnamespace HelloWorld\r\n{\r\n    class Hello {         \r\n        static void Main(sting[] args)\r\n        {\r\n            System.Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n}\r\n`}\r\n                         </pre>      \r\n                      </div>\r\n\r\n\r\n                      <h4>C# Comments<hr/></h4>\r\n                     <p>Comments can be used to explain C# code, and to make it more readable. It can also be used to prevent execution when testing alternative code.\r\n\r\nSingle-line comments start with two forward slashes (//).\r\n\r\nAny text between // and the end of the line is ignored by C# (will not be executed).\r\n\r\nThis example uses a single-line comment before a line of code:</p>\r\n\r\n\r\n<p>This example uses a single-line comment at the end of a line of code:</p>\r\n                     Example               \r\n                    <div class=\"card card-body\">\r\n                         <pre>\r\n                             {`Console.WriteLine(\"Hello World!\");  // This is a comment              \r\n`}\r\n                         </pre>      \r\n                      </div>\r\n \r\n\r\n\r\n                      <h4>C# Multi-line Comments<hr/></h4>\r\n                     <p>Multi-line comments start with /* and ends with */.\r\n\r\nAny text between /* and */ will be ignored by C#.\r\n\r\nThis example uses a multi-line comment (a comment block) to explain the code:</p>\r\n\r\n\r\n<p>This example uses a single-line comment at the end of a line of code:</p>\r\n                     Example               \r\n                    <div class=\"card card-body\">\r\n                         <pre>\r\n                             {`/* The code below will print the words Hello World\r\nto the screen, and it is amazing */\r\nConsole.WriteLine(\"Hello World!\");         \r\n`}\r\n                         </pre>      \r\n                      </div>\r\n\r\n\r\n                             \r\n\r\n                    <h4>Alternative Hello World! implementation<hr/></h4>\r\n                    \r\n                    <div class=\"card card-body\">\r\n                         <pre>\r\n                             {`// Hello World! program\r\nusing System;\r\n \r\nnamespace HelloWorld\r\n{\r\n    class Hello {         \r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n}\r\n\r\n`}\r\n                         </pre>      \r\n                      </div>\r\n\r\n                    \r\n\r\n                    \r\n                      \r\n                    \r\n                     \r\n                </p> \r\n             }\r\n             />\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Csharp1\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\java\\Java4.js",["437"],"import React from 'react'\r\nimport Tutorial from '../Tutorial'\r\nimport {SiJava} from 'react-icons/si'\r\nimport icon from './java9.png'\r\nimport icon2 from './java1.png'\r\n\r\nconst Java1 = () => {\r\n  const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n          <Tutorial icons = {logo.Lname} name = \"JAVA\" language = \"java\" next=\"/Java4\" icon2={logo.Lname2}\r\n          theoryContent = {\r\n                   <p className=\"TutorialPadding\">\r\n                       <h3 className=\"Thead\">Java String<hr/></h3>\r\n                        <p>In Java, a string is a sequence of characters. For example, \"hello\" is a string containing a sequence of characters 'h', 'e', 'l', 'l', and 'o'.</p>\r\n                       <p>We use double quotes to represent a string in Java. For example,</p>\r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`// create a string\r\nString type = \"Java programming\";\r\n`}\r\n                            </pre>      \r\n                         </div>\r\n    \r\n   \r\n                                \r\n  \r\n                       <h4 className=\"Thead\">Create a String in Java<hr/></h4>\r\n                       \r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`class Main {\r\n  public static void main(String[] args) {\r\n    \r\n    // create strings\r\n    String first = \"Java\";\r\n    String second = \"Python\";\r\n    String third = \"JavaScript\";\r\n\r\n    // print strings\r\n    System.out.println(first);   // print Java\r\n    System.out.println(second);  // print Python\r\n    System.out.println(third);   // print JavaScript\r\n  }\r\n}\r\n`}\r\n                            </pre>      \r\n                         </div>\r\n\r\n                         <h4 className=\"Thead\">Java Parameterized Constructor<hr/></h4>\r\n                         A Java constructor can also accept one or more parameters.\r\n                        Such constructors are known as parameterized constructors (constructor with parameters).\r\n\r\n\r\n                       <div class=\"card card-body\">\r\n\r\n                            <pre>\r\n                                {`class Main {\r\n\r\nString languages;\r\n\r\n// constructor accepting single value\r\nMain(String lang) {\r\n  languages = lang;\r\n  System.out.println(languages + \" Programming Language\");\r\n}\r\n\r\npublic static void main(String[] args) {\r\n\r\n  // call constructor by passing a single value\r\n  Main obj1 = new Main(\"Java\");\r\n  Main obj2 = new Main(\"Python\");\r\n  Main obj3 = new Main(\"C\");\r\n}\r\n}\r\n`}\r\n                            </pre>      \r\n                         </div>\r\n\r\n\r\n\r\n                         <h4 className=\"Thead\">Java String Operations<hr/></h4>\r\n                      <h5 className=\"Thead\"> 1. Get Length of a String</h5>\r\n                      To find the length of a string, we use the length() method of the String. For example,\r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`class Main {\r\n  public static void main(String[] args) {\r\n\r\n    // create a string\r\n    String greet = \"Hello! World\";\r\n    System.out.println(\"String: \" + greet);\r\n\r\n    // get the length of greet\r\n    int length = greet.length();\r\n    System.out.println(\"Length: \" + length);\r\n  }\r\n}\r\n`}\r\n                            </pre>      \r\n                         </div>\r\n\r\n                         <h5 className=\"Thead\"> 2. Join two Strings</h5>\r\n                      To find the length of a string, we use the length() method of the String. For example,\r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`class Main {\r\n  public static void main(String[] args) {\r\n\r\n    // create first string\r\n    String first = \"Java \";\r\n    System.out.println(\"First String: \" + first);\r\n\r\n    // create second\r\n    String second = \"Programming\";\r\n    System.out.println(\"Second String: \" + second);\r\n\r\n    // join two strings\r\n    String joinedString = first.concat(second);\r\n    System.out.println(\"Joined String: \" + joinedString);\r\n  }\r\n}\r\n`}\r\n                            </pre>      \r\n                         </div>\r\n\r\n\r\n\r\n                          <h5 className=\"Thead\">3. Compare two Strings</h5>\r\n                          In Java, we can make comparisons between two strings using the equals() method. For example,\r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`class Main {\r\n  public static void main(String[] args) {\r\n\r\n    // create 3 strings\r\n    String first = \"java programming\";\r\n    String second = \"java programming\";\r\n    String third = \"python programming\";\r\n\r\n    // compare first and second strings\r\n    boolean result1 = first.equals(second);\r\n    System.out.println(\"Strings first and second are equal: \" + result1);\r\n\r\n    // compare first and third strings\r\n    boolean result2 = first.equals(third);\r\n    System.out.println(\"Strings first and third are equal: \" + result2);\r\n  }\r\n}\r\n`}\r\n                            </pre>      \r\n                         </div>\r\n\r\n                       \r\n                         \r\n                       \r\n                        \r\n                   </p> \r\n                }\r\n                />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Java1\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\java\\Java1.js",["438","439","440"],"import React from 'react'\r\nimport Tutorial from '../Tutorial'\r\nimport {SiJava} from 'react-icons/si'\r\nimport icon from './java9.png'\r\nimport icon2 from './java1.png'\r\n\r\nconst Java1 = () => {\r\n    const logo={\"Lname\":icon,\r\n              \"Lname2\":icon2\r\n            }\r\n    return (\r\n        <div>\r\n          <Tutorial icons = {logo.Lname} name = \"JAVA\" language = \"java\" next=\"/Java2\" icon2={logo.Lname2}\r\n          theoryContent = {\r\n                   <p className=\"TutorialPadding\">\r\n                       <h3 className=\"Thead\">Java Class and Objects<hr/></h3>\r\n                       <p>In this tutorial, you will learn about the concept of classes and objects in Java with the help of examples.Java is an object-oriented programming language. The core concept of the object-oriented approach is to break complex problems into smaller objects.</p>\r\n                      \r\n\r\n                       <h4 className=\"Thead\">Create a class in Java<hr/></h4>\r\n                       We can create a class in Java using the class keyword. For example,\r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`class ClassName {\r\n  // fields\r\n  // methods\r\n}`}\r\n                            </pre>      \r\n                         </div>\r\n                       <p> Here, fields (variables) and methods represent the state and behavior of the object respectively.\r\n                          fields are used to store data\r\n                          methods are used to perform some operations.</p>\r\n\r\n\r\n\r\n\r\n                          <h4 className=\"Thead\">Using Multiple Classes<hr/></h4>\r\n                          You can also create an object of a class and access it in another class. This is often used for better organization of classes (one class has all the attributes and methods, while the other class holds the main() method (code to be executed)).\r\n                       \r\n                        <p>Main.java</p>\r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`public class Main {\r\n  int x = 5;\r\n}\r\n}`}\r\n                            </pre>      \r\n                         </div>\r\n\r\n\r\n\r\n\r\n                         <p>Second.java</p>\r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`class Second {\r\n  public static void main(String[] args) {\r\n    Main myObj = new Main();\r\n    System.out.println(myObj.x);\r\n  }\r\n  \r\n  }`}      </pre>\r\n          </div>\r\n                     \r\n\r\n\r\n\r\n\r\n          <p>Run the Second.java file:</p>\r\n          <div class=\"card card-body\">\r\n               <pre>\r\n                    {`C:\\Users\\Your Name>java Second`}      </pre>\r\n          </div>\r\n\r\n\r\n          <p>And the output will be:</p>\r\n          <div class=\"card card-body\">\r\n               <pre>\r\n                    {`5`}\r\n              </pre>\r\n          </div>\r\n                               \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                      <h3 className=\"Thead\">Java Objects<hr/></h3>\r\n                      <p> An object is called an instance of a class. For example, suppose Bicycle is a class then MountainBicycle, SportsBicycle, TouringBicycle, etc can be considered as objects of the class</p>\r\n\r\n                      <h4 className=\"Thead\">Creating an Object in Java<hr/></h4>\r\n                       <p>Here is how we can create an object of a class.</p>\r\n\r\n                       <div class=\"card card-body\">\r\n                            <pre>\r\n                                {`className object = new className();\r\n\r\n// for Bicycle class\r\nBicycle sportsBicycle = new Bicycle();\r\n\r\nBicycle touringBicycle = new Bicycle();\r\n`}\r\n                            </pre>      \r\n                         </div>\r\n\r\n                         \r\n                       <p> We have used the new keyword along with the constructor of the class to create an object. Constructors are similar to methods and have the same name as the class. For example, Bicycle() is the constructor of the Bicycle class.</p>\r\n                        \r\n                   </p> \r\n                }\r\n                />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Java1\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\Course.js",["441","442"],"import React,{useState} from 'react';\r\nimport './Course.css';\r\nimport { AiOutlineArrowRight } from \"react-icons/ai\";\r\nimport {Link} from 'react-router-dom'\r\n import 'bootstrap';\r\n\r\nfunction Course(props) {\r\n    \r\n    return (\r\n            <div className=\"card shadow-lg rounded mx-4 my-4 card__main\" style={{\"width\" : \"14em\" , \"height\" : \"12em\"}}>\r\n                <div style = {{\"backgroundColor\" : \"#f9f7f7\"}}>\r\n                    <img src={props.title} height = \"100px\" width = \"100px\" alt=\"...\"/>\r\n                </div>\r\n            <div className=\"card-body\" style = {{\"backgroundColor\" : \"#dbe2ef\"}}>\r\n                <p className=\"card-text lang__name\" style={{\"color\" : \"#112d4e\"}}>{props.info} <br/> PROGRAMMING</p>\r\n                <p style={{\"color\" : \"#3f72af\",\"fontWeight\" : \"500\",\"fontSize\" : \"18px\"}}>learn <AiOutlineArrowRight/></p> \r\n            </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Course\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\Navbar.js",["443","444","445"],"import React from \"react\";\r\nimport './App.css';\r\nimport {Link} from 'react-router-dom';\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../node_modules/bootstrap/dist/js/bootstrap.bundle\";\r\nimport { BsCodeSlash } from \"react-icons/bs\";\r\n\r\nfunction Nav(){\r\n    return(\r\n        <div classNameName=\"container-fluid\">\r\n            <nav className=\"navbar navbar-expand-lg shadow-sm rounded\" style={{\"backgroundColor\" : \"#f9f7f7\"}}>\r\n                <Link to = \"/\" className=\"navbar-brand\"><BsCodeSlash size=\"2em\" color=\"#112d4e\"/></Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\r\n                    <ul className=\"navbar-nav ml-auto\">\r\n                    <li className=\"nav-item active mx-3\">\r\n                        <a className=\"nav-link\"  style={{\"color\" : \"#112d4e\"}}>Home</a>\r\n                    </li>\r\n                    <li className=\"nav-item mx-3\">\r\n                        <a className=\"nav-link\"  style={{\"color\" : \"#112d4e\"}}>Features</a>\r\n                    </li>\r\n                    <li className=\"nav-item mx-3\">\r\n                        <a className=\"nav-link\"  style={{\"color\" : \"#112d4e\"}}>Pricing</a>\r\n                    </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\nexport default Nav;","C:\\Users\\One Life\\Desktop\\finalProject\\src\\footer.js",[],"C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\Delete1.js",[],"C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\AddCourse2.js",["446"],"import React from 'react'\r\nimport 'bootstrap'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst AddCourse2 = (props) => {\r\n    return (\r\n        <div className = \"my-2\">\r\n            <p>\r\n            <button className=\"btn btn-outline-info\" type=\"button\" data-toggle=\"collapse\" data-target={`#collapse${props.index}`} aria-expanded=\"false\" aria-controls=\"collapseExample\">\r\n                Course #{props.index}\r\n            </button>\r\n            <button onClick = {() => {props.del(props.index)}} className=\"btn btn-outline-danger\" style = {{marginLeft : \"43em\"}} type=\"button\" data-toggle=\"collapse\" data-target={`#collapse${props.index}`} aria-expanded=\"false\" aria-controls=\"collapseExample\">\r\n                Delete\r\n            </button>\r\n            </p>\r\n            <div className=\"collapse\" id={`collapse${props.index}`}>\r\n            <div className=\"card card-body\">\r\n               <p>Course Name : {props.input}</p>\r\n              <p>Course Image : <img src=\"\" /></p>\r\n            </div>\r\n            <div>\r\n               <Link to=\"/AddQuiz\"> <button className=\"btn btn-primary col-md-4\">Add Quiz for {props.input}</button></Link>\r\n               <button className=\"btn btn-success col-md-4 offset-md-4\">Add problem for {props.input}</button>\r\n            </div>   \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n//Testcase.js\r\nexport default AddCourse2\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\AddQuiz2.js",[],"C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\Tutorial.js",["447","448","449","450","451","452"],"import React from \"react\";\r\nimport Navbar from \"../Navbar\";\r\nimport Footer from '../footer';\r\nimport 'bootstrap';\r\nimport './Tutorial.css';\r\nimport { BsBook } from \"react-icons/bs\";\r\nimport { FcAddressBook } from \"react-icons/fc\";\r\nimport { FaLaptopCode } from \"react-icons/fa\";\r\nimport Editor from './Editor'\r\nimport { VscOutput } from \"react-icons/vsc\";\r\nimport { Link } from \"react-router-dom\";\r\nimport TabNav from './TabNav';\r\nimport { AiFillPropertySafety } from \"react-icons/ai\";\r\n\r\n\r\nfunction Tutorial(props){\r\n    return(\r\n        <div className=\"container-fluid\">\r\n                <Navbar />\r\n                <TabNav LanguageIcon={props.icon2} LanguageName={props.name} />\r\n            <div className=\"row sticky-top\">\r\n                <div className=\"col-4 mt-5\">\r\n                    <div>\r\n                    <div class=\"overflow-auto con_height borderT\">\r\n                        \r\n                        <div className=\"headL sticky-top\">\r\n                            <span className = \"mx-2\" style = {{fontSize : \"2.5em\"}}><img src={props.icons} height=\"40px\" width=\"40px\"/></span>\r\n                            <span className=\"ml-2 font-weight-bold\">{props.name}</span>\r\n                        </div>\r\n                        <div>\r\n                            {props.theoryContent} \r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className = \"col-8 mt-5\">\r\n                    <Editor language = {props.language} icon2={props.icon2}/>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                <Link to={props.next}><button type=\"button\" class=\"btn btn-info mt-3\">NEXT</button></Link>\r\n            </div>\r\n            \r\n            <div className=\"container-fluid foot\">\r\n                <div className=\"row\">\r\n                    <Footer />\r\n                </div>\r\n            </div>\r\n\r\n                      \r\n        </div>   \r\n    )\r\n\r\n}\r\n\r\nexport default Tutorial;","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\Editor.js",["453","454","455"],"import {React,useState} from 'react';\r\nimport { ControlledEditor } from '@monaco-editor/react';\r\nimport { FaLaptopCode } from \"react-icons/fa\";\r\nimport { VscOutput } from \"react-icons/vsc\";\r\n/*\r\nconst requestBody = {\r\n    method : 'POST',\r\n    headers : { 'Content-type': 'application/json',\r\n              Authorization : 'Token 32038959-b5d4-41f4-8c47-1d0a8f73606a',\r\n              'Access-Control-Allow-Origin' : '*'},\r\n    body : JSON.stringify({\"files\": [{\"name\": \"main.py\", \"content\": input}]})\r\n  };\r\n  const getOutput = async () => {\r\n    const response = await fetch('https://run.glot.io/languages/python/latest',requestBody);\r\n    const data = await response.json();\r\n    console.log(data);\r\n    setOutput(data);\r\n  }\r\n  // const requestBody = {\r\n  //   method : 'POST',\r\n  //   headers : { 'Content-type': 'application/json'},\r\n  //   body : JSON.stringify({\"language\" : \"python\",\"input\" : input})\r\n  // };\r\n  // const getOutput = async () => {\r\n  //   const response = await fetch('http://localhost:8000/submit',requestBody);\r\n  //   const data = await response.json();\r\n  //   console.log(data);\r\n  //  // setOutput(data);\r\n  // };\r\nvar apiUrl = \"https://judge0-ce.p.rapidapi.com/\";\r\nvar apiAuth = {\r\n    \"x-rapidapi-host\": \"judge0-ce.p.rapidapi.com\",\r\n    \"x-rapidapi-key\": \"5461fe29efmsh4a2d0f0a4e07fa5p1278dajsn73080f2bdf88\" // Your RapidAPI Key\r\n};\r\n*/\r\nconst Editor = (props) => {\r\n  const [output, setOutput] = useState('');\r\n  const [input, setInput] = useState('');\r\n  const [status,setStatus] = useState('');\r\n  const [error,setError] = useState('');\r\n  const res = [\"3 3\",\"7 5\"];\r\n  let r = \"\";\r\n  res.forEach(x =>{\r\n    r += x;\r\n    r += \" \";\r\n  });\r\n  console.log(r);\r\n  const stdin = r;\r\n\r\n  const languages = {\r\n      \"cpp\" : 52,\r\n      \"csharp\" : 51,\r\n      \"java\" : 62,\r\n      \"python\" : 71,\r\n      \"javascript\" : 63 \r\n  }\r\n  \r\n  const apiUrl = \"https://judge0-ce.p.rapidapi.com\";\r\n  const apiAuth = {\r\n    \"Content-type\": \"application/json\",\r\n    \"x-rapidapi-host\": \"judge0-ce.p.rapidapi.com\",\r\n    \"x-rapidapi-key\": \"5461fe29efmsh4a2d0f0a4e07fa5p1278dajsn73080f2bdf88\" // Your RapidAPI Key\r\n  };\r\n  const encode = (str) => {\r\n    return btoa(unescape(encodeURIComponent(str || \"\")));\r\n  };\r\n   const decode = (bytes) => {\r\n    var escaped = escape(atob(bytes || \"\"));\r\n    try {\r\n        return decodeURIComponent(escaped);\r\n    } catch {\r\n        return unescape(escaped);\r\n    }\r\n  }\r\n  const handleResult = (d) => {\r\n    setStatus(d.status.description);\r\n    setOutput(decode(d.stdout));\r\n    setError(decode(d.stderr));\r\n  }\r\n\r\n//   const handleresultAsync = d => {\r\n//     return new Promise((resolve,reject) => {\r\n//         setTimeout((d) => {\r\n//              resolve([d.status.description,decode(d.stdout),decode(d.stderr)]);\r\n//         },1500,d);\r\n//     });\r\n// }\r\n  \r\n  const data = {\r\n    stdin : ''/*encode(stdin)*/,\r\n    source_code: encode(input),\r\n    language_id: languages[props.language]\r\n  };\r\n  const requestBody = {\r\n    method : 'POST',\r\n    headers : apiAuth,\r\n    body : JSON.stringify(data,null)\r\n  };\r\n  const getOutput = async () => {\r\n    const response = await fetch(apiUrl + `/submissions?base64_encoded=true&wait=true`,requestBody);\r\n    const data = await response.json();\r\n    //setTimeout(fetchSubmission.bind(null, data.token),1000);\r\n     handleResult(data);\r\n    // setStatus(result[0]);\r\n    // setOutput(result[1]);\r\n    // setError(result[2]);\r\n\r\n  }\r\n  return (\r\n    // <div>\r\n    //   <ControlledEditor language=\"python\" value = {input} onChange = {(e,v) => setInput(v)} />\r\n    // </div>\r\n    <div className = \"row\">\r\n    <div className=\"col-6 borderT\">\r\n        <div className=\"headL row \">\r\n            <span className = \"mx-2\" style = {{fontSize : \"2.5em\"}}><img src={props.icon2} height=\"40px\" width=\"50px\"/></span>\r\n            <span className=\"mx-1 mt-4 font-weight-bold\">CODE HERE</span>\r\n        </div>\r\n        <div className=\"row Eheight\">\r\n            <ControlledEditor language={props.language} value = {input} onChange = {(e,v) => setInput(v)} />\r\n        </div>\r\n        <div className=\"btn btn-success\" onClick = {() => {getOutput()}}>Run...</div>\r\n    </div>\r\n    <div className=\"col-6\" style = {{height : \"500px\"}}>\r\n        <div style = {{width : \"420px\",height : \"500px\"}} className = \"borderT\">\r\n            <div style = {{height : \"60px\",backgroundColor : \"#dbe2ef\",display : \"flex\",alignItems : \"center\"}}>\r\n                <div>\r\n                    <VscOutput style = {{fontSize : \"2.5em\",color : \"#3f72af\"}} className = \"mt-2 mx-2\"/>\r\n                </div>\r\n                <div className = \"mt-2 font-weight-bold\" style = {{color : \"#3f72af\"}}>OUTPUT</div>\r\n            </div>\r\n            <p>{output}</p>\r\n            <p>{status}</p>\r\n            <p>{error}</p>\r\n        </div>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Editor\r\n","C:\\Users\\One Life\\Desktop\\finalProject\\src\\components\\TabNav.js",["456"],"import React from \"react\";\r\nimport 'bootstrap';\r\nimport { FcAddressBook,FcDatabase } from \"react-icons/fc\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction TabNav(props){\r\n    return(\r\n        <div className=\"container-fluid sticky-top tab\">\r\n            <div className=\"row\">\r\n                <div class=\"col\">\r\n                    <span className=\"Ticons\"><img src={props.LanguageIcon} height=\"100px\" width=\"120px\"/></span>\r\n                    <span className=\"Thead\">Learn {props.LanguageName} Programming </span>\r\n                </div>\r\n\r\n            </div>    \r\n            <div className=\"row\">\r\n                <div class=\"col\"></div>\r\n                <div class=\"col\"><h4 className=\"Thead\"><FcAddressBook />Tutorials</h4></div>\r\n                <div class=\"col\"><h4 className=\"Thead\"><FcDatabase/><Link to=\"/Examples\"><span className=\"linkColor\">Examples</span></Link></h4></div>\r\n                <div class=\"col\"></div>\r\n                <div class=\"col\"></div>\r\n                <div class=\"col\"></div>\r\n\r\n            </div>\r\n        </div>    \r\n    );\r\n\r\n};\r\nexport default TabNav;","C:\\Users\\One Life\\Desktop\\finalProject\\src\\validateInfo.js",[],"C:\\Users\\One Life\\Desktop\\finalProject\\src\\useForm.js",["457","458"],"C:\\Users\\One Life\\Desktop\\finalProject\\src\\Form.js",["459"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\index.js",[],["460","461"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\reportWebVitals.js",[],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\App.js",[],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\QuizContext.js",[],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\Login.js",[],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\Register.js",["462","463","464"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\Forgot.js",[],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\Home.js",["465"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\Quiz.js",["466","467","468","469"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\AddQuiz.js",[],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\AddCourse.js",["470"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\Delete.js",[],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\Form.js",["471","472"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\Examples.js",[],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\java\\Java3.js",["473"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\java\\Java1.js",["474","475","476"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\java\\Java4.js",["477"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\python\\Python1.js",["478"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\java\\Java2.js",["479"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\python\\Python2.js",["480"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\csharp\\Csharp1.js",["481"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\python\\Python4.js",["482"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\csharp\\Csharp2.js",["483"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\python\\Python3.js",["484"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\csharp\\Csharp3.js",["485"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\csharp\\Csharp4.js",["486"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\cpp\\Cpp1.js",["487"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\cpp\\Cpp3.js",["488"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\cpp\\Cpp4.js",["489"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\cpp\\Cpp2.js",["490"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\nodejs\\Javascript1.js",["491","492","493"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\nodejs\\Javascript2.js",["494","495","496","497","498","499","500","501","502"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\nodejs\\Javascript3.js",["503"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\nodejs\\Javascript4.js",["504"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\Course.js",["505","506"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\footer.js",[],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\validateInfo.js",[],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\useForm.js",["507","508"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\Navbar.js",["509","510","511"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\AddCourse2.js",["512"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\AddQuiz2.js",[],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\Delete1.js",[],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\Tutorial.js",["513","514","515","516","517","518"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\Editor.js",["519","520","521"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\components\\TabNav.js",["522"],"C:\\Users\\One Life\\Projects_Dac\\upload-image\\ValidationProject\\src\\FormSuccess.js",[],{"ruleId":"523","replacedBy":"524"},{"ruleId":"525","replacedBy":"526"},{"ruleId":"527","severity":1,"message":"528","line":38,"column":21,"nodeType":"529","messageId":"530","endLine":38,"endColumn":32},{"ruleId":"527","severity":1,"message":"531","line":1,"column":15,"nodeType":"529","messageId":"530","endLine":1,"endColumn":23},{"ruleId":"527","severity":1,"message":"532","line":2,"column":8,"nodeType":"529","messageId":"530","endLine":2,"endColumn":11},{"ruleId":"527","severity":1,"message":"533","line":4,"column":9,"nodeType":"529","messageId":"530","endLine":4,"endColumn":13},{"ruleId":"527","severity":1,"message":"534","line":7,"column":12,"nodeType":"529","messageId":"530","endLine":7,"endColumn":19},{"ruleId":"527","severity":1,"message":"535","line":9,"column":12,"nodeType":"529","messageId":"530","endLine":9,"endColumn":23},{"ruleId":"527","severity":1,"message":"536","line":9,"column":24,"nodeType":"529","messageId":"530","endLine":9,"endColumn":38},{"ruleId":"537","severity":1,"message":"538","line":13,"column":7,"nodeType":"539","endLine":13,"endColumn":9,"suggestions":"540"},{"ruleId":"527","severity":1,"message":"541","line":1,"column":15,"nodeType":"529","messageId":"530","endLine":1,"endColumn":23},{"ruleId":"527","severity":1,"message":"542","line":3,"column":9,"nodeType":"529","messageId":"530","endLine":3,"endColumn":15},{"ruleId":"527","severity":1,"message":"543","line":2,"column":9,"nodeType":"529","messageId":"530","endLine":2,"endColumn":17},{"ruleId":"527","severity":1,"message":"543","line":2,"column":9,"nodeType":"529","messageId":"530","endLine":2,"endColumn":17},{"ruleId":"527","severity":1,"message":"543","line":2,"column":9,"nodeType":"529","messageId":"530","endLine":2,"endColumn":17},{"ruleId":"527","severity":1,"message":"544","line":3,"column":9,"nodeType":"529","messageId":"530","endLine":3,"endColumn":17},{"ruleId":"527","severity":1,"message":"543","line":2,"column":9,"nodeType":"529","messageId":"530","endLine":2,"endColumn":17},{"ruleId":"527","severity":1,"message":"544","line":3,"column":9,"nodeType":"529","messageId":"530","endLine":3,"endColumn":17},{"ruleId":"527","severity":1,"message":"545","line":3,"column":9,"nodeType":"529","messageId":"530","endLine":3,"endColumn":20},{"ruleId":"527","severity":1,"message":"545","line":3,"column":9,"nodeType":"529","messageId":"530","endLine":3,"endColumn":20},{"ruleId":"527","severity":1,"message":"545","line":3,"column":9,"nodeType":"529","messageId":"530","endLine":3,"endColumn":20},{"ruleId":"527","severity":1,"message":"545","line":3,"column":9,"nodeType":"529","messageId":"530","endLine":3,"endColumn":20},{"ruleId":"527","severity":1,"message":"546","line":2,"column":9,"nodeType":"529","messageId":"530","endLine":2,"endColumn":20},{"ruleId":"547","severity":1,"message":"548","line":20,"column":26,"nodeType":"549","endLine":21,"endColumn":32},{"ruleId":"547","severity":1,"message":"548","line":29,"column":26,"nodeType":"549","endLine":30,"endColumn":30},{"ruleId":"547","severity":1,"message":"548","line":46,"column":26,"nodeType":"549","endLine":47,"endColumn":30},{"ruleId":"547","severity":1,"message":"548","line":84,"column":31,"nodeType":"549","endLine":84,"endColumn":33},{"ruleId":"547","severity":1,"message":"548","line":85,"column":31,"nodeType":"549","endLine":85,"endColumn":36},{"ruleId":"547","severity":1,"message":"548","line":89,"column":64,"nodeType":"549","endLine":89,"endColumn":66},{"ruleId":"547","severity":1,"message":"548","line":99,"column":32,"nodeType":"549","endLine":99,"endColumn":35},{"ruleId":"547","severity":1,"message":"548","line":113,"column":30,"nodeType":"549","endLine":114,"endColumn":102},{"ruleId":"527","severity":1,"message":"546","line":2,"column":9,"nodeType":"529","messageId":"530","endLine":2,"endColumn":20},{"ruleId":"527","severity":1,"message":"546","line":2,"column":9,"nodeType":"529","messageId":"530","endLine":2,"endColumn":20},{"ruleId":"547","severity":1,"message":"548","line":110,"column":38,"nodeType":"549","endLine":111,"endColumn":63},{"ruleId":"547","severity":1,"message":"548","line":113,"column":58,"nodeType":"549","endLine":114,"endColumn":65},{"ruleId":"527","severity":1,"message":"544","line":2,"column":9,"nodeType":"529","messageId":"530","endLine":2,"endColumn":17},{"ruleId":"527","severity":1,"message":"546","line":2,"column":9,"nodeType":"529","messageId":"530","endLine":2,"endColumn":20},{"ruleId":"527","severity":1,"message":"542","line":3,"column":9,"nodeType":"529","messageId":"530","endLine":3,"endColumn":15},{"ruleId":"527","severity":1,"message":"544","line":2,"column":9,"nodeType":"529","messageId":"530","endLine":2,"endColumn":17},{"ruleId":"527","severity":1,"message":"542","line":3,"column":9,"nodeType":"529","messageId":"530","endLine":3,"endColumn":15},{"ruleId":"527","severity":1,"message":"542","line":3,"column":9,"nodeType":"529","messageId":"530","endLine":3,"endColumn":15},{"ruleId":"550","severity":1,"message":"551","line":72,"column":25,"nodeType":"552","messageId":"553","endLine":72,"endColumn":26,"suggestions":"554"},{"ruleId":"550","severity":1,"message":"555","line":72,"column":31,"nodeType":"552","messageId":"553","endLine":72,"endColumn":32,"suggestions":"556"},{"ruleId":"527","severity":1,"message":"531","line":1,"column":15,"nodeType":"529","messageId":"530","endLine":1,"endColumn":23},{"ruleId":"527","severity":1,"message":"533","line":4,"column":9,"nodeType":"529","messageId":"530","endLine":4,"endColumn":13},{"ruleId":"557","severity":1,"message":"558","line":19,"column":25,"nodeType":"559","endLine":19,"endColumn":80},{"ruleId":"557","severity":1,"message":"558","line":22,"column":25,"nodeType":"559","endLine":22,"endColumn":80},{"ruleId":"557","severity":1,"message":"558","line":25,"column":25,"nodeType":"559","endLine":25,"endColumn":80},{"ruleId":"560","severity":1,"message":"561","line":19,"column":33,"nodeType":"559","endLine":19,"endColumn":47},{"ruleId":"527","severity":1,"message":"562","line":6,"column":10,"nodeType":"529","messageId":"530","endLine":6,"endColumn":16},{"ruleId":"527","severity":1,"message":"563","line":7,"column":10,"nodeType":"529","messageId":"530","endLine":7,"endColumn":23},{"ruleId":"527","severity":1,"message":"564","line":8,"column":10,"nodeType":"529","messageId":"530","endLine":8,"endColumn":22},{"ruleId":"527","severity":1,"message":"565","line":10,"column":10,"nodeType":"529","messageId":"530","endLine":10,"endColumn":19},{"ruleId":"527","severity":1,"message":"566","line":13,"column":10,"nodeType":"529","messageId":"530","endLine":13,"endColumn":30},{"ruleId":"560","severity":1,"message":"561","line":27,"column":85,"nodeType":"559","endLine":27,"endColumn":136},{"ruleId":"527","severity":1,"message":"564","line":3,"column":10,"nodeType":"529","messageId":"530","endLine":3,"endColumn":22},{"ruleId":"527","severity":1,"message":"567","line":48,"column":9,"nodeType":"529","messageId":"530","endLine":48,"endColumn":14},{"ruleId":"560","severity":1,"message":"561","line":116,"column":69,"nodeType":"559","endLine":116,"endColumn":120},{"ruleId":"560","severity":1,"message":"561","line":11,"column":46,"nodeType":"559","endLine":11,"endColumn":106},{"ruleId":"527","severity":1,"message":"568","line":17,"column":11,"nodeType":"529","messageId":"530","endLine":17,"endColumn":18},{"ruleId":"537","severity":1,"message":"569","line":55,"column":9,"nodeType":"539","endLine":55,"endColumn":17,"suggestions":"570"},{"ruleId":"560","severity":1,"message":"561","line":24,"column":9,"nodeType":"559","endLine":24,"endColumn":61},{"ruleId":"523","replacedBy":"571"},{"ruleId":"525","replacedBy":"572"},{"ruleId":"527","severity":1,"message":"531","line":1,"column":15,"nodeType":"529","messageId":"530","endLine":1,"endColumn":23},{"ruleId":"527","severity":1,"message":"532","line":2,"column":8,"nodeType":"529","messageId":"530","endLine":2,"endColumn":11},{"ruleId":"527","severity":1,"message":"533","line":4,"column":9,"nodeType":"529","messageId":"530","endLine":4,"endColumn":13},{"ruleId":"527","severity":1,"message":"528","line":38,"column":21,"nodeType":"529","messageId":"530","endLine":38,"endColumn":32},{"ruleId":"527","severity":1,"message":"534","line":7,"column":12,"nodeType":"529","messageId":"530","endLine":7,"endColumn":19},{"ruleId":"527","severity":1,"message":"535","line":9,"column":12,"nodeType":"529","messageId":"530","endLine":9,"endColumn":23},{"ruleId":"527","severity":1,"message":"536","line":9,"column":24,"nodeType":"529","messageId":"530","endLine":9,"endColumn":38},{"ruleId":"537","severity":1,"message":"538","line":13,"column":7,"nodeType":"539","endLine":13,"endColumn":9,"suggestions":"573"},{"ruleId":"527","severity":1,"message":"541","line":1,"column":15,"nodeType":"529","messageId":"530","endLine":1,"endColumn":23},{"ruleId":"527","severity":1,"message":"574","line":5,"column":8,"nodeType":"529","messageId":"530","endLine":5,"endColumn":13},{"ruleId":"560","severity":1,"message":"561","line":25,"column":9,"nodeType":"559","endLine":25,"endColumn":61},{"ruleId":"527","severity":1,"message":"542","line":3,"column":9,"nodeType":"529","messageId":"530","endLine":3,"endColumn":15},{"ruleId":"527","severity":1,"message":"542","line":3,"column":9,"nodeType":"529","messageId":"530","endLine":3,"endColumn":15},{"ruleId":"550","severity":1,"message":"551","line":72,"column":25,"nodeType":"552","messageId":"553","endLine":72,"endColumn":26,"suggestions":"575"},{"ruleId":"550","severity":1,"message":"555","line":72,"column":31,"nodeType":"552","messageId":"553","endLine":72,"endColumn":32,"suggestions":"576"},{"ruleId":"527","severity":1,"message":"542","line":3,"column":9,"nodeType":"529","messageId":"530","endLine":3,"endColumn":15},{"ruleId":"527","severity":1,"message":"543","line":2,"column":9,"nodeType":"529","messageId":"530","endLine":2,"endColumn":17},{"ruleId":"527","severity":1,"message":"542","line":3,"column":9,"nodeType":"529","messageId":"530","endLine":3,"endColumn":15},{"ruleId":"527","severity":1,"message":"543","line":2,"column":9,"nodeType":"529","messageId":"530","endLine":2,"endColumn":17},{"ruleId":"527","severity":1,"message":"544","line":2,"column":9,"nodeType":"529","messageId":"530","endLine":2,"endColumn":17},{"ruleId":"527","severity":1,"message":"543","line":2,"column":9,"nodeType":"529","messageId":"530","endLine":2,"endColumn":17},{"ruleId":"527","severity":1,"message":"544","line":2,"column":9,"nodeType":"529","messageId":"530","endLine":2,"endColumn":17},{"ruleId":"527","severity":1,"message":"543","line":2,"column":9,"nodeType":"529","messageId":"530","endLine":2,"endColumn":17},{"ruleId":"527","severity":1,"message":"544","line":3,"column":9,"nodeType":"529","messageId":"530","endLine":3,"endColumn":17},{"ruleId":"527","severity":1,"message":"544","line":3,"column":9,"nodeType":"529","messageId":"530","endLine":3,"endColumn":17},{"ruleId":"527","severity":1,"message":"545","line":3,"column":9,"nodeType":"529","messageId":"530","endLine":3,"endColumn":20},{"ruleId":"527","severity":1,"message":"545","line":3,"column":9,"nodeType":"529","messageId":"530","endLine":3,"endColumn":20},{"ruleId":"527","severity":1,"message":"545","line":3,"column":9,"nodeType":"529","messageId":"530","endLine":3,"endColumn":20},{"ruleId":"527","severity":1,"message":"545","line":3,"column":9,"nodeType":"529","messageId":"530","endLine":3,"endColumn":20},{"ruleId":"527","severity":1,"message":"546","line":2,"column":9,"nodeType":"529","messageId":"530","endLine":2,"endColumn":20},{"ruleId":"547","severity":1,"message":"548","line":110,"column":38,"nodeType":"549","endLine":111,"endColumn":63},{"ruleId":"547","severity":1,"message":"548","line":113,"column":58,"nodeType":"549","endLine":114,"endColumn":65},{"ruleId":"527","severity":1,"message":"546","line":2,"column":9,"nodeType":"529","messageId":"530","endLine":2,"endColumn":20},{"ruleId":"547","severity":1,"message":"548","line":20,"column":26,"nodeType":"549","endLine":21,"endColumn":32},{"ruleId":"547","severity":1,"message":"548","line":29,"column":26,"nodeType":"549","endLine":30,"endColumn":30},{"ruleId":"547","severity":1,"message":"548","line":46,"column":26,"nodeType":"549","endLine":47,"endColumn":30},{"ruleId":"547","severity":1,"message":"548","line":84,"column":31,"nodeType":"549","endLine":84,"endColumn":33},{"ruleId":"547","severity":1,"message":"548","line":85,"column":31,"nodeType":"549","endLine":85,"endColumn":36},{"ruleId":"547","severity":1,"message":"548","line":89,"column":64,"nodeType":"549","endLine":89,"endColumn":66},{"ruleId":"547","severity":1,"message":"548","line":99,"column":32,"nodeType":"549","endLine":99,"endColumn":35},{"ruleId":"547","severity":1,"message":"548","line":113,"column":30,"nodeType":"549","endLine":114,"endColumn":102},{"ruleId":"527","severity":1,"message":"546","line":2,"column":9,"nodeType":"529","messageId":"530","endLine":2,"endColumn":20},{"ruleId":"527","severity":1,"message":"546","line":2,"column":9,"nodeType":"529","messageId":"530","endLine":2,"endColumn":20},{"ruleId":"527","severity":1,"message":"531","line":1,"column":15,"nodeType":"529","messageId":"530","endLine":1,"endColumn":23},{"ruleId":"527","severity":1,"message":"533","line":4,"column":9,"nodeType":"529","messageId":"530","endLine":4,"endColumn":13},{"ruleId":"527","severity":1,"message":"577","line":2,"column":8,"nodeType":"529","messageId":"530","endLine":2,"endColumn":16},{"ruleId":"537","severity":1,"message":"569","line":62,"column":9,"nodeType":"539","endLine":62,"endColumn":17,"suggestions":"578"},{"ruleId":"557","severity":1,"message":"558","line":19,"column":25,"nodeType":"559","endLine":19,"endColumn":80},{"ruleId":"557","severity":1,"message":"558","line":22,"column":25,"nodeType":"559","endLine":22,"endColumn":80},{"ruleId":"557","severity":1,"message":"558","line":25,"column":25,"nodeType":"559","endLine":25,"endColumn":80},{"ruleId":"560","severity":1,"message":"561","line":19,"column":33,"nodeType":"559","endLine":19,"endColumn":47},{"ruleId":"527","severity":1,"message":"562","line":6,"column":10,"nodeType":"529","messageId":"530","endLine":6,"endColumn":16},{"ruleId":"527","severity":1,"message":"563","line":7,"column":10,"nodeType":"529","messageId":"530","endLine":7,"endColumn":23},{"ruleId":"527","severity":1,"message":"564","line":8,"column":10,"nodeType":"529","messageId":"530","endLine":8,"endColumn":22},{"ruleId":"527","severity":1,"message":"565","line":10,"column":10,"nodeType":"529","messageId":"530","endLine":10,"endColumn":19},{"ruleId":"527","severity":1,"message":"566","line":13,"column":10,"nodeType":"529","messageId":"530","endLine":13,"endColumn":30},{"ruleId":"560","severity":1,"message":"561","line":27,"column":85,"nodeType":"559","endLine":27,"endColumn":136},{"ruleId":"527","severity":1,"message":"564","line":3,"column":10,"nodeType":"529","messageId":"530","endLine":3,"endColumn":22},{"ruleId":"527","severity":1,"message":"567","line":48,"column":9,"nodeType":"529","messageId":"530","endLine":48,"endColumn":14},{"ruleId":"560","severity":1,"message":"561","line":116,"column":69,"nodeType":"559","endLine":116,"endColumn":120},{"ruleId":"560","severity":1,"message":"561","line":11,"column":46,"nodeType":"559","endLine":11,"endColumn":106},"no-native-reassign",["579"],"no-negated-in-lhs",["580"],"no-unused-vars","'setLanguage' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Nav' is defined but never used.","'Link' is defined but never used.","'correct' is assigned a value but never used.","'isModalOpen' is assigned a value but never used.","'setIsModalOpen' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchQuestions'. Either include it or remove the dependency array.","ArrayExpression",["581"],"'Profiler' is defined but never used.","'SiJava' is defined but never used.","'SiPython' is defined but never used.","'SiCsharp' is defined but never used.","'SiCplusplus' is defined but never used.","'SiNodeDotJs' is defined but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","no-useless-escape","Unnecessary escape character: \\U.","TemplateElement","unnecessaryEscape",["582","583"],"Unnecessary escape character: \\Y.",["584","585"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'BsBook' is defined but never used.","'FcAddressBook' is defined but never used.","'FaLaptopCode' is defined but never used.","'VscOutput' is defined but never used.","'AiFillPropertySafety' is defined but never used.","'stdin' is assigned a value but never used.","'reqBody' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'callback' and 'isSubmitting'. Either include them or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["586"],["579"],["580"],["587"],"'Login' is defined but never used.",["588","589"],["590","591"],"'validate' is defined but never used.",["592"],"no-global-assign","no-unsafe-negation",{"desc":"593","fix":"594"},{"messageId":"595","fix":"596","desc":"597"},{"messageId":"598","fix":"599","desc":"600"},{"messageId":"595","fix":"601","desc":"597"},{"messageId":"598","fix":"602","desc":"600"},{"desc":"603","fix":"604"},{"desc":"593","fix":"605"},{"messageId":"595","fix":"606","desc":"597"},{"messageId":"598","fix":"607","desc":"600"},{"messageId":"595","fix":"608","desc":"597"},{"messageId":"598","fix":"609","desc":"600"},{"desc":"603","fix":"610"},"Update the dependencies array to be: [fetchQuestions]",{"range":"611","text":"612"},"removeEscape",{"range":"613","text":"614"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"615","text":"616"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"617","text":"614"},{"range":"618","text":"616"},"Update the dependencies array to be: [callback, errors, isSubmitting]",{"range":"619","text":"620"},{"range":"621","text":"612"},{"range":"622","text":"614"},{"range":"623","text":"616"},{"range":"624","text":"614"},{"range":"625","text":"616"},{"range":"626","text":"620"},[425,427],"[fetchQuestions]",[2731,2732],"",[2731,2731],"\\",[2737,2738],[2737,2737],[1537,1545],"[callback, errors, isSubmitting]",[425,427],[2731,2732],[2731,2731],[2737,2738],[2737,2737],[1679,1687]]